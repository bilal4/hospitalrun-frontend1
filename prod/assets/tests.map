{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","hospitalrun/tests/acceptance/admin-test.js","hospitalrun/tests/acceptance/admin-test.lint-test.js","hospitalrun/tests/acceptance/appointments-test.js","hospitalrun/tests/acceptance/appointments-test.lint-test.js","hospitalrun/tests/acceptance/imaging-test.js","hospitalrun/tests/acceptance/imaging-test.lint-test.js","hospitalrun/tests/acceptance/inventory-test.js","hospitalrun/tests/acceptance/inventory-test.lint-test.js","hospitalrun/tests/acceptance/invoices-test.js","hospitalrun/tests/acceptance/invoices-test.lint-test.js","hospitalrun/tests/acceptance/labs-test.js","hospitalrun/tests/acceptance/labs-test.lint-test.js","hospitalrun/tests/acceptance/login-test.js","hospitalrun/tests/acceptance/login-test.lint-test.js","hospitalrun/tests/acceptance/medication-test.js","hospitalrun/tests/acceptance/medication-test.lint-test.js","hospitalrun/tests/acceptance/patient-notes-test.js","hospitalrun/tests/acceptance/patient-notes-test.lint-test.js","hospitalrun/tests/acceptance/patients-test.js","hospitalrun/tests/acceptance/patients-test.lint-test.js","hospitalrun/tests/acceptance/pricing-test.js","hospitalrun/tests/acceptance/pricing-test.lint-test.js","hospitalrun/tests/acceptance/procedure-test.js","hospitalrun/tests/acceptance/procedure-test.lint-test.js","hospitalrun/tests/acceptance/role-test.js","hospitalrun/tests/acceptance/role-test.lint-test.js","hospitalrun/tests/acceptance/users-test.js","hospitalrun/tests/acceptance/users-test.lint-test.js","hospitalrun/tests/acceptance/visit-test.js","hospitalrun/tests/acceptance/visit-test.lint-test.js","hospitalrun/tests/adapters/application.js","hospitalrun/tests/adapters/application.lint-test.js","hospitalrun/tests/adapters/user.js","hospitalrun/tests/adapters/user.lint-test.js","hospitalrun/tests/admin/address/controller.js","hospitalrun/tests/admin/address/controller.lint-test.js","hospitalrun/tests/admin/address/route.js","hospitalrun/tests/admin/address/route.lint-test.js","hospitalrun/tests/admin/loaddb/controller.js","hospitalrun/tests/admin/loaddb/controller.lint-test.js","hospitalrun/tests/admin/loaddb/route.js","hospitalrun/tests/admin/loaddb/route.lint-test.js","hospitalrun/tests/admin/lookup/controller.js","hospitalrun/tests/admin/lookup/controller.lint-test.js","hospitalrun/tests/admin/lookup/edit/controller.js","hospitalrun/tests/admin/lookup/edit/controller.lint-test.js","hospitalrun/tests/admin/lookup/route.js","hospitalrun/tests/admin/lookup/route.lint-test.js","hospitalrun/tests/admin/query/controller.js","hospitalrun/tests/admin/query/controller.lint-test.js","hospitalrun/tests/admin/query/route.js","hospitalrun/tests/admin/query/route.lint-test.js","hospitalrun/tests/admin/roles/controller.js","hospitalrun/tests/admin/roles/controller.lint-test.js","hospitalrun/tests/admin/roles/route.js","hospitalrun/tests/admin/roles/route.lint-test.js","hospitalrun/tests/admin/route.js","hospitalrun/tests/admin/route.lint-test.js","hospitalrun/tests/admin/workflow/controller.js","hospitalrun/tests/admin/workflow/controller.lint-test.js","hospitalrun/tests/admin/workflow/route.js","hospitalrun/tests/admin/workflow/route.lint-test.js","hospitalrun/tests/app.js","hospitalrun/tests/app.lint-test.js","hospitalrun/tests/appointments/delete/controller.js","hospitalrun/tests/appointments/delete/controller.lint-test.js","hospitalrun/tests/appointments/edit/controller.js","hospitalrun/tests/appointments/edit/controller.lint-test.js","hospitalrun/tests/appointments/edit/route.js","hospitalrun/tests/appointments/edit/route.lint-test.js","hospitalrun/tests/appointments/index/controller.js","hospitalrun/tests/appointments/index/controller.lint-test.js","hospitalrun/tests/appointments/index/route.js","hospitalrun/tests/appointments/index/route.lint-test.js","hospitalrun/tests/appointments/missed/controller.js","hospitalrun/tests/appointments/missed/controller.lint-test.js","hospitalrun/tests/appointments/missed/route.js","hospitalrun/tests/appointments/missed/route.lint-test.js","hospitalrun/tests/appointments/route.js","hospitalrun/tests/appointments/route.lint-test.js","hospitalrun/tests/appointments/search/controller.js","hospitalrun/tests/appointments/search/controller.lint-test.js","hospitalrun/tests/appointments/search/route.js","hospitalrun/tests/appointments/search/route.lint-test.js","hospitalrun/tests/appointments/today/controller.js","hospitalrun/tests/appointments/today/controller.lint-test.js","hospitalrun/tests/appointments/today/route.js","hospitalrun/tests/appointments/today/route.lint-test.js","hospitalrun/tests/authenticators/custom.js","hospitalrun/tests/authenticators/custom.lint-test.js","hospitalrun/tests/components/action-checkbox.js","hospitalrun/tests/components/action-checkbox.lint-test.js","hospitalrun/tests/components/array-display.js","hospitalrun/tests/components/array-display.lint-test.js","hospitalrun/tests/components/charge-quantity.js","hospitalrun/tests/components/charge-quantity.lint-test.js","hospitalrun/tests/components/charges-by-type-tab.js","hospitalrun/tests/components/charges-by-type-tab.lint-test.js","hospitalrun/tests/components/checkbox-or-typeahead.js","hospitalrun/tests/components/checkbox-or-typeahead.lint-test.js","hospitalrun/tests/components/custom-form.js","hospitalrun/tests/components/custom-form.lint-test.js","hospitalrun/tests/components/date-input.js","hospitalrun/tests/components/date-input.lint-test.js","hospitalrun/tests/components/date-picker.js","hospitalrun/tests/components/date-picker.lint-test.js","hospitalrun/tests/components/edit-panel.js","hospitalrun/tests/components/edit-panel.lint-test.js","hospitalrun/tests/components/erf-html-input.js","hospitalrun/tests/components/erf-html-input.lint-test.js","hospitalrun/tests/components/ext-radio.js","hospitalrun/tests/components/ext-radio.lint-test.js","hospitalrun/tests/components/file-upload.js","hospitalrun/tests/components/file-upload.lint-test.js","hospitalrun/tests/components/icd10-pcs-typeahead.js","hospitalrun/tests/components/icd10-pcs-typeahead.lint-test.js","hospitalrun/tests/components/icd10-typeahead.js","hospitalrun/tests/components/icd10-typeahead.lint-test.js","hospitalrun/tests/components/image-upload.js","hospitalrun/tests/components/image-upload.lint-test.js","hospitalrun/tests/components/inventory-location-picker.js","hospitalrun/tests/components/inventory-location-picker.lint-test.js","hospitalrun/tests/components/inventory-typeahead.js","hospitalrun/tests/components/inventory-typeahead.lint-test.js","hospitalrun/tests/components/item-listing.js","hospitalrun/tests/components/item-listing.lint-test.js","hospitalrun/tests/components/loading-message.js","hospitalrun/tests/components/loading-message.lint-test.js","hospitalrun/tests/components/location-select.js","hospitalrun/tests/components/location-select.lint-test.js","hospitalrun/tests/components/modal-dialog.js","hospitalrun/tests/components/modal-dialog.lint-test.js","hospitalrun/tests/components/nav-menu.js","hospitalrun/tests/components/nav-menu.lint-test.js","hospitalrun/tests/components/nav-paging.js","hospitalrun/tests/components/nav-paging.lint-test.js","hospitalrun/tests/components/number-input.js","hospitalrun/tests/components/number-input.lint-test.js","hospitalrun/tests/components/patient-summary.js","hospitalrun/tests/components/patient-summary.lint-test.js","hospitalrun/tests/components/patient-typeahead.js","hospitalrun/tests/components/patient-typeahead.lint-test.js","hospitalrun/tests/components/photo-display.js","hospitalrun/tests/components/photo-display.lint-test.js","hospitalrun/tests/components/price-list.js","hospitalrun/tests/components/price-list.lint-test.js","hospitalrun/tests/components/pricing-typeahead.js","hospitalrun/tests/components/pricing-typeahead.lint-test.js","hospitalrun/tests/components/print-this.js","hospitalrun/tests/components/print-this.lint-test.js","hospitalrun/tests/components/quantity-calc.js","hospitalrun/tests/components/quantity-calc.lint-test.js","hospitalrun/tests/components/quantity-conv.js","hospitalrun/tests/components/quantity-conv.lint-test.js","hospitalrun/tests/components/role-select.js","hospitalrun/tests/components/role-select.lint-test.js","hospitalrun/tests/components/search-listing.js","hospitalrun/tests/components/search-listing.lint-test.js","hospitalrun/tests/components/select-or-typeahead.js","hospitalrun/tests/components/select-or-typeahead.lint-test.js","hospitalrun/tests/components/smart-prescription.js","hospitalrun/tests/components/smart-prescription.lint-test.js","hospitalrun/tests/components/sortable-column.js","hospitalrun/tests/components/sortable-column.lint-test.js","hospitalrun/tests/components/take-photo.js","hospitalrun/tests/components/take-photo.lint-test.js","hospitalrun/tests/components/text-search.js","hospitalrun/tests/components/text-search.lint-test.js","hospitalrun/tests/components/type-ahead.js","hospitalrun/tests/components/type-ahead.lint-test.js","hospitalrun/tests/controllers/abstract-delete-controller.js","hospitalrun/tests/controllers/abstract-delete-controller.lint-test.js","hospitalrun/tests/controllers/abstract-edit-controller.js","hospitalrun/tests/controllers/abstract-edit-controller.lint-test.js","hospitalrun/tests/controllers/abstract-paged-controller.js","hospitalrun/tests/controllers/abstract-paged-controller.lint-test.js","hospitalrun/tests/controllers/abstract-report-controller.js","hospitalrun/tests/controllers/abstract-report-controller.lint-test.js","hospitalrun/tests/controllers/application.js","hospitalrun/tests/controllers/application.lint-test.js","hospitalrun/tests/controllers/index.js","hospitalrun/tests/controllers/index.lint-test.js","hospitalrun/tests/controllers/login.js","hospitalrun/tests/controllers/login.lint-test.js","hospitalrun/tests/controllers/navigation.js","hospitalrun/tests/controllers/navigation.lint-test.js","hospitalrun/tests/dialog/controller.js","hospitalrun/tests/dialog/controller.lint-test.js","hospitalrun/tests/finishgauth/route.js","hospitalrun/tests/finishgauth/route.lint-test.js","hospitalrun/tests/helpers/authenticate-user.js","hospitalrun/tests/helpers/authenticate-user.lint-test.js","hospitalrun/tests/helpers/date-format.js","hospitalrun/tests/helpers/date-format.lint-test.js","hospitalrun/tests/helpers/destroy-app.js","hospitalrun/tests/helpers/destroy-app.lint-test.js","hospitalrun/tests/helpers/ember-i18n/test-helpers.js","hospitalrun/tests/helpers/ember-keyboard/register-test-helpers.js","hospitalrun/tests/helpers/ember-simple-auth.js","hospitalrun/tests/helpers/html-line-break.js","hospitalrun/tests/helpers/html-line-break.lint-test.js","hospitalrun/tests/helpers/is-equal-array.js","hospitalrun/tests/helpers/is-equal-array.lint-test.js","hospitalrun/tests/helpers/is-equal.js","hospitalrun/tests/helpers/is-equal.lint-test.js","hospitalrun/tests/helpers/is-not.js","hospitalrun/tests/helpers/is-not.lint-test.js","hospitalrun/tests/helpers/module-for-acceptance.js","hospitalrun/tests/helpers/module-for-acceptance.lint-test.js","hospitalrun/tests/helpers/number-format.js","hospitalrun/tests/helpers/number-format.lint-test.js","hospitalrun/tests/helpers/read-path.js","hospitalrun/tests/helpers/read-path.lint-test.js","hospitalrun/tests/helpers/resolver.js","hospitalrun/tests/helpers/resolver.lint-test.js","hospitalrun/tests/helpers/run-with-pouch-dump.js","hospitalrun/tests/helpers/run-with-pouch-dump.lint-test.js","hospitalrun/tests/helpers/select-date.js","hospitalrun/tests/helpers/select-date.lint-test.js","hospitalrun/tests/helpers/select.js","hospitalrun/tests/helpers/select.lint-test.js","hospitalrun/tests/helpers/start-app.js","hospitalrun/tests/helpers/start-app.lint-test.js","hospitalrun/tests/helpers/typeahead-fillin.js","hospitalrun/tests/helpers/typeahead-fillin.lint-test.js","hospitalrun/tests/helpers/validate-properties.js","hospitalrun/tests/helpers/wait-to-appear.js","hospitalrun/tests/helpers/wait-to-appear.lint-test.js","hospitalrun/tests/hospitalrun/admin/address/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/loaddb/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/lookup/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/lookup/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/query/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/roles/template.template-lint-test.js","hospitalrun/tests/hospitalrun/admin/workflow/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/missed/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/appointments/today/template.template-lint-test.js","hospitalrun/tests/hospitalrun/dialog/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/charge/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/completed/completed-list-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/completed/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/index/imaging-edit-button/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/index/requested-list-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/imaging/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/adjust/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/barcode/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/batch/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/listing/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/purchase/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/quick-add/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/rank-select/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/reports/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/request/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/inventory/transfer/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/add-line-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/payment/template.template-lint-test.js","hospitalrun/tests/hospitalrun/invoices/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/charge/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/completed/labs-completed-list-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/completed/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/index/labs-edit-button/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/index/labs-list-item/template.template-lint-test.js","hospitalrun/tests/hospitalrun/labs/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/completed/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/return/template.template-lint-test.js","hospitalrun/tests/hospitalrun/medication/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/add-contact/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/admitted/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/imaging/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/labs/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/medication/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/notes/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/photo/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/quick-add/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/reports/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/socialwork/expense/template.template-lint-test.js","hospitalrun/tests/hospitalrun/patients/socialwork/family-info/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/imaging/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/lab/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/override/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/procedure/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/profiles/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/profiles/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/search/template.template-lint-test.js","hospitalrun/tests/hospitalrun/pricing/ward/template.template-lint-test.js","hospitalrun/tests/hospitalrun/print/invoice/template.template-lint-test.js","hospitalrun/tests/hospitalrun/procedures/charge/template.template-lint-test.js","hospitalrun/tests/hospitalrun/procedures/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/procedures/medication/template.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/application.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/charges-by-type.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/array-display.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/charge-quantity.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/charges-by-type-tab.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/checkbox-or-typeahead.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/cross-icon-svg.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/custom-form.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/edit-panel.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/ext-radio.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/html-input.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/inventory-location-picker.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/item-listing.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/location-select.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/logo-dark-svg.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/logo-svg.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/menu-svg.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/modal-dialog.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/nav-menu.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/nav-paging.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/number-input.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/patient-summary.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/photo-display.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/price-list.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/quantity-calc.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/quantity-conv.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/render-typeahead.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/role-select.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/search-listing.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/select-or-typeahead.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/sortable-column.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/static-text.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/components/take-photo.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/error.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/index.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/inv-purchase.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/inventory-basic.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/item-charges.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/loading.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/login.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/navigation.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/report-rows.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/section.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/sidebar_nav/header.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/sidebar_nav/message.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/sidebar_nav/primary_nav.template-lint-test.js","hospitalrun/tests/hospitalrun/templates/sidebar_nav/search.template-lint-test.js","hospitalrun/tests/hospitalrun/users/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/users/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/users/index/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/add-diagnosis/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/charge/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/edit/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/procedures/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/vitals/delete/template.template-lint-test.js","hospitalrun/tests/hospitalrun/visits/vitals/edit/template.template-lint-test.js","hospitalrun/tests/imaging/charge/controller.js","hospitalrun/tests/imaging/charge/controller.lint-test.js","hospitalrun/tests/imaging/completed/completed-list-item/component.js","hospitalrun/tests/imaging/completed/completed-list-item/component.lint-test.js","hospitalrun/tests/imaging/completed/controller.js","hospitalrun/tests/imaging/completed/controller.lint-test.js","hospitalrun/tests/imaging/completed/route.js","hospitalrun/tests/imaging/completed/route.lint-test.js","hospitalrun/tests/imaging/delete/controller.js","hospitalrun/tests/imaging/delete/controller.lint-test.js","hospitalrun/tests/imaging/edit/controller.js","hospitalrun/tests/imaging/edit/controller.lint-test.js","hospitalrun/tests/imaging/edit/route.js","hospitalrun/tests/imaging/edit/route.lint-test.js","hospitalrun/tests/imaging/index/controller.js","hospitalrun/tests/imaging/index/controller.lint-test.js","hospitalrun/tests/imaging/index/imaging-edit-button/component.js","hospitalrun/tests/imaging/index/imaging-edit-button/component.lint-test.js","hospitalrun/tests/imaging/index/requested-list-item/component.js","hospitalrun/tests/imaging/index/requested-list-item/component.lint-test.js","hospitalrun/tests/imaging/index/route.js","hospitalrun/tests/imaging/index/route.lint-test.js","hospitalrun/tests/imaging/route.js","hospitalrun/tests/imaging/route.lint-test.js","hospitalrun/tests/initializers/i18n.js","hospitalrun/tests/initializers/i18n.lint-test.js","hospitalrun/tests/integration/components/inventory/rank-select-test.js","hospitalrun/tests/integration/components/inventory/rank-select-test.lint-test.js","hospitalrun/tests/integration/components/number-input-test.js","hospitalrun/tests/integration/components/number-input-test.lint-test.js","hospitalrun/tests/inventory/adjust/controller.js","hospitalrun/tests/inventory/adjust/controller.lint-test.js","hospitalrun/tests/inventory/barcode/controller.js","hospitalrun/tests/inventory/barcode/controller.lint-test.js","hospitalrun/tests/inventory/barcode/route.js","hospitalrun/tests/inventory/barcode/route.lint-test.js","hospitalrun/tests/inventory/batch/controller.js","hospitalrun/tests/inventory/batch/controller.lint-test.js","hospitalrun/tests/inventory/batch/route.js","hospitalrun/tests/inventory/batch/route.lint-test.js","hospitalrun/tests/inventory/delete/controller.js","hospitalrun/tests/inventory/delete/controller.lint-test.js","hospitalrun/tests/inventory/edit/controller.js","hospitalrun/tests/inventory/edit/controller.lint-test.js","hospitalrun/tests/inventory/edit/route.js","hospitalrun/tests/inventory/edit/route.lint-test.js","hospitalrun/tests/inventory/index/controller.js","hospitalrun/tests/inventory/index/controller.lint-test.js","hospitalrun/tests/inventory/index/route.js","hospitalrun/tests/inventory/index/route.lint-test.js","hospitalrun/tests/inventory/listing/controller.js","hospitalrun/tests/inventory/listing/controller.lint-test.js","hospitalrun/tests/inventory/listing/route.js","hospitalrun/tests/inventory/listing/route.lint-test.js","hospitalrun/tests/inventory/purchase/edit/controller.js","hospitalrun/tests/inventory/purchase/edit/controller.lint-test.js","hospitalrun/tests/inventory/quick-add/controller.js","hospitalrun/tests/inventory/quick-add/controller.lint-test.js","hospitalrun/tests/inventory/rank-select/component.js","hospitalrun/tests/inventory/rank-select/component.lint-test.js","hospitalrun/tests/inventory/reports/controller.js","hospitalrun/tests/inventory/reports/controller.lint-test.js","hospitalrun/tests/inventory/reports/route.js","hospitalrun/tests/inventory/reports/route.lint-test.js","hospitalrun/tests/inventory/request/controller.js","hospitalrun/tests/inventory/request/controller.lint-test.js","hospitalrun/tests/inventory/request/route.js","hospitalrun/tests/inventory/request/route.lint-test.js","hospitalrun/tests/inventory/route.js","hospitalrun/tests/inventory/route.lint-test.js","hospitalrun/tests/inventory/search/controller.js","hospitalrun/tests/inventory/search/controller.lint-test.js","hospitalrun/tests/inventory/search/route.js","hospitalrun/tests/inventory/search/route.lint-test.js","hospitalrun/tests/inventory/transfer/controller.js","hospitalrun/tests/inventory/transfer/controller.lint-test.js","hospitalrun/tests/invoices/add-line-item/controller.js","hospitalrun/tests/invoices/add-line-item/controller.lint-test.js","hospitalrun/tests/invoices/delete/controller.js","hospitalrun/tests/invoices/delete/controller.lint-test.js","hospitalrun/tests/invoices/edit/controller.js","hospitalrun/tests/invoices/edit/controller.lint-test.js","hospitalrun/tests/invoices/edit/route.js","hospitalrun/tests/invoices/edit/route.lint-test.js","hospitalrun/tests/invoices/index/controller.js","hospitalrun/tests/invoices/index/controller.lint-test.js","hospitalrun/tests/invoices/index/route.js","hospitalrun/tests/invoices/index/route.lint-test.js","hospitalrun/tests/invoices/payment/controller.js","hospitalrun/tests/invoices/payment/controller.lint-test.js","hospitalrun/tests/invoices/route.js","hospitalrun/tests/invoices/route.lint-test.js","hospitalrun/tests/invoices/search/route.js","hospitalrun/tests/invoices/search/route.lint-test.js","hospitalrun/tests/labs/charge/controller.js","hospitalrun/tests/labs/charge/controller.lint-test.js","hospitalrun/tests/labs/completed/controller.js","hospitalrun/tests/labs/completed/controller.lint-test.js","hospitalrun/tests/labs/completed/labs-completed-list-item/component.js","hospitalrun/tests/labs/completed/labs-completed-list-item/component.lint-test.js","hospitalrun/tests/labs/completed/route.js","hospitalrun/tests/labs/completed/route.lint-test.js","hospitalrun/tests/labs/delete/controller.js","hospitalrun/tests/labs/delete/controller.lint-test.js","hospitalrun/tests/labs/edit/controller.js","hospitalrun/tests/labs/edit/controller.lint-test.js","hospitalrun/tests/labs/edit/route.js","hospitalrun/tests/labs/edit/route.lint-test.js","hospitalrun/tests/labs/index/controller.js","hospitalrun/tests/labs/index/controller.lint-test.js","hospitalrun/tests/labs/index/labs-edit-button/component.js","hospitalrun/tests/labs/index/labs-edit-button/component.lint-test.js","hospitalrun/tests/labs/index/labs-list-item/component.js","hospitalrun/tests/labs/index/labs-list-item/component.lint-test.js","hospitalrun/tests/labs/index/route.js","hospitalrun/tests/labs/index/route.lint-test.js","hospitalrun/tests/labs/route.js","hospitalrun/tests/labs/route.lint-test.js","hospitalrun/tests/locales/de/translations.js","hospitalrun/tests/locales/de/translations.lint-test.js","hospitalrun/tests/locales/en/config.js","hospitalrun/tests/locales/en/config.lint-test.js","hospitalrun/tests/locales/en/translations.js","hospitalrun/tests/locales/en/translations.lint-test.js","hospitalrun/tests/locales/es-CO/translations.js","hospitalrun/tests/locales/es-CO/translations.lint-test.js","hospitalrun/tests/locales/es/translations.js","hospitalrun/tests/locales/es/translations.lint-test.js","hospitalrun/tests/locales/fr/translations.js","hospitalrun/tests/locales/fr/translations.lint-test.js","hospitalrun/tests/locales/pt-BR/translations.js","hospitalrun/tests/locales/pt-BR/translations.lint-test.js","hospitalrun/tests/locales/ru/translations.js","hospitalrun/tests/locales/ru/translations.lint-test.js","hospitalrun/tests/locales/tr/translations.js","hospitalrun/tests/locales/tr/translations.lint-test.js","hospitalrun/tests/medication/completed/controller.js","hospitalrun/tests/medication/completed/controller.lint-test.js","hospitalrun/tests/medication/completed/route.js","hospitalrun/tests/medication/completed/route.lint-test.js","hospitalrun/tests/medication/delete/controller.js","hospitalrun/tests/medication/delete/controller.lint-test.js","hospitalrun/tests/medication/edit/controller.js","hospitalrun/tests/medication/edit/controller.lint-test.js","hospitalrun/tests/medication/edit/route.js","hospitalrun/tests/medication/edit/route.lint-test.js","hospitalrun/tests/medication/index/controller.js","hospitalrun/tests/medication/index/controller.lint-test.js","hospitalrun/tests/medication/index/route.js","hospitalrun/tests/medication/index/route.lint-test.js","hospitalrun/tests/medication/return/controller.js","hospitalrun/tests/medication/return/controller.lint-test.js","hospitalrun/tests/medication/return/route.js","hospitalrun/tests/medication/return/route.lint-test.js","hospitalrun/tests/medication/route.js","hospitalrun/tests/medication/route.lint-test.js","hospitalrun/tests/medication/search/route.js","hospitalrun/tests/medication/search/route.lint-test.js","hospitalrun/tests/mixins/appointment-statuses.js","hospitalrun/tests/mixins/appointment-statuses.lint-test.js","hospitalrun/tests/mixins/billing-categories.js","hospitalrun/tests/mixins/billing-categories.lint-test.js","hospitalrun/tests/mixins/blood-types.js","hospitalrun/tests/mixins/blood-types.lint-test.js","hospitalrun/tests/mixins/can-edit-requested.js","hospitalrun/tests/mixins/can-edit-requested.lint-test.js","hospitalrun/tests/mixins/charge-actions.js","hospitalrun/tests/mixins/charge-actions.lint-test.js","hospitalrun/tests/mixins/charge-route.js","hospitalrun/tests/mixins/charge-route.lint-test.js","hospitalrun/tests/mixins/date-format.js","hospitalrun/tests/mixins/date-format.lint-test.js","hospitalrun/tests/mixins/dob-days.js","hospitalrun/tests/mixins/dob-days.lint-test.js","hospitalrun/tests/mixins/edit-panel-props.js","hospitalrun/tests/mixins/edit-panel-props.lint-test.js","hospitalrun/tests/mixins/fulfill-request.js","hospitalrun/tests/mixins/fulfill-request.lint-test.js","hospitalrun/tests/mixins/hospitalrun-version.js","hospitalrun/tests/mixins/hospitalrun-version.lint-test.js","hospitalrun/tests/mixins/imaging-pricing-types.js","hospitalrun/tests/mixins/imaging-pricing-types.lint-test.js","hospitalrun/tests/mixins/inventory-adjustment-types.js","hospitalrun/tests/mixins/inventory-adjustment-types.lint-test.js","hospitalrun/tests/mixins/inventory-id.js","hospitalrun/tests/mixins/inventory-id.lint-test.js","hospitalrun/tests/mixins/inventory-locations.js","hospitalrun/tests/mixins/inventory-locations.lint-test.js","hospitalrun/tests/mixins/inventory-selection.js","hospitalrun/tests/mixins/inventory-selection.lint-test.js","hospitalrun/tests/mixins/inventory-type-list.js","hospitalrun/tests/mixins/inventory-type-list.lint-test.js","hospitalrun/tests/mixins/is-update-disabled.js","hospitalrun/tests/mixins/is-update-disabled.lint-test.js","hospitalrun/tests/mixins/lab-pricing-types.js","hospitalrun/tests/mixins/lab-pricing-types.lint-test.js","hospitalrun/tests/mixins/location-name.js","hospitalrun/tests/mixins/location-name.lint-test.js","hospitalrun/tests/mixins/medication-details.js","hospitalrun/tests/mixins/medication-details.lint-test.js","hospitalrun/tests/mixins/modal-helper.js","hospitalrun/tests/mixins/modal-helper.lint-test.js","hospitalrun/tests/mixins/navigation.js","hospitalrun/tests/mixins/navigation.lint-test.js","hospitalrun/tests/mixins/number-format.js","hospitalrun/tests/mixins/number-format.lint-test.js","hospitalrun/tests/mixins/pagination-props.js","hospitalrun/tests/mixins/pagination-props.lint-test.js","hospitalrun/tests/mixins/paging-actions.js","hospitalrun/tests/mixins/paging-actions.lint-test.js","hospitalrun/tests/mixins/patient-appointments.js","hospitalrun/tests/mixins/patient-appointments.lint-test.js","hospitalrun/tests/mixins/patient-diagnosis.js","hospitalrun/tests/mixins/patient-diagnosis.lint-test.js","hospitalrun/tests/mixins/patient-id.js","hospitalrun/tests/mixins/patient-id.lint-test.js","hospitalrun/tests/mixins/patient-invoices.js","hospitalrun/tests/mixins/patient-invoices.lint-test.js","hospitalrun/tests/mixins/patient-list-route.js","hospitalrun/tests/mixins/patient-list-route.lint-test.js","hospitalrun/tests/mixins/patient-name.js","hospitalrun/tests/mixins/patient-name.lint-test.js","hospitalrun/tests/mixins/patient-notes.js","hospitalrun/tests/mixins/patient-notes.lint-test.js","hospitalrun/tests/mixins/patient-submodule.js","hospitalrun/tests/mixins/patient-submodule.lint-test.js","hospitalrun/tests/mixins/patient-visits.js","hospitalrun/tests/mixins/patient-visits.lint-test.js","hospitalrun/tests/mixins/payment-profiles.js","hospitalrun/tests/mixins/payment-profiles.lint-test.js","hospitalrun/tests/mixins/pouch-adapter-utils.js","hospitalrun/tests/mixins/pouch-adapter-utils.lint-test.js","hospitalrun/tests/mixins/pouchdb.js","hospitalrun/tests/mixins/pouchdb.lint-test.js","hospitalrun/tests/mixins/progress-dialog.js","hospitalrun/tests/mixins/progress-dialog.lint-test.js","hospitalrun/tests/mixins/publish-statuses.js","hospitalrun/tests/mixins/publish-statuses.lint-test.js","hospitalrun/tests/mixins/result-validation.js","hospitalrun/tests/mixins/result-validation.lint-test.js","hospitalrun/tests/mixins/return-to.js","hospitalrun/tests/mixins/return-to.lint-test.js","hospitalrun/tests/mixins/setup-user-role.js","hospitalrun/tests/mixins/setup-user-role.lint-test.js","hospitalrun/tests/mixins/unit-types.js","hospitalrun/tests/mixins/unit-types.lint-test.js","hospitalrun/tests/mixins/user-roles.js","hospitalrun/tests/mixins/user-roles.lint-test.js","hospitalrun/tests/mixins/user-session.js","hospitalrun/tests/mixins/user-session.lint-test.js","hospitalrun/tests/mixins/visit-types.js","hospitalrun/tests/mixins/visit-types.lint-test.js","hospitalrun/tests/models/abstract.js","hospitalrun/tests/models/abstract.lint-test.js","hospitalrun/tests/models/add-diagnosis.js","hospitalrun/tests/models/add-diagnosis.lint-test.js","hospitalrun/tests/models/appointment.js","hospitalrun/tests/models/appointment.lint-test.js","hospitalrun/tests/models/billing-line-item.js","hospitalrun/tests/models/billing-line-item.lint-test.js","hospitalrun/tests/models/family-info.js","hospitalrun/tests/models/family-info.lint-test.js","hospitalrun/tests/models/imaging.js","hospitalrun/tests/models/imaging.lint-test.js","hospitalrun/tests/models/inv-location.js","hospitalrun/tests/models/inv-location.lint-test.js","hospitalrun/tests/models/inv-purchase.js","hospitalrun/tests/models/inv-purchase.lint-test.js","hospitalrun/tests/models/inv-request.js","hospitalrun/tests/models/inv-request.lint-test.js","hospitalrun/tests/models/inventory-batch.js","hospitalrun/tests/models/inventory-batch.lint-test.js","hospitalrun/tests/models/inventory.js","hospitalrun/tests/models/inventory.lint-test.js","hospitalrun/tests/models/invoice.js","hospitalrun/tests/models/invoice.lint-test.js","hospitalrun/tests/models/lab.js","hospitalrun/tests/models/lab.lint-test.js","hospitalrun/tests/models/line-item-detail.js","hospitalrun/tests/models/line-item-detail.lint-test.js","hospitalrun/tests/models/lookup.js","hospitalrun/tests/models/lookup.lint-test.js","hospitalrun/tests/models/medication.js","hospitalrun/tests/models/medication.lint-test.js","hospitalrun/tests/models/option.js","hospitalrun/tests/models/option.lint-test.js","hospitalrun/tests/models/override-price.js","hospitalrun/tests/models/override-price.lint-test.js","hospitalrun/tests/models/patient-note.js","hospitalrun/tests/models/patient-note.lint-test.js","hospitalrun/tests/models/patient.js","hospitalrun/tests/models/patient.lint-test.js","hospitalrun/tests/models/payment.js","hospitalrun/tests/models/payment.lint-test.js","hospitalrun/tests/models/photo.js","hospitalrun/tests/models/photo.lint-test.js","hospitalrun/tests/models/price-profile.js","hospitalrun/tests/models/price-profile.lint-test.js","hospitalrun/tests/models/pricing.js","hospitalrun/tests/models/pricing.lint-test.js","hospitalrun/tests/models/proc-charge.js","hospitalrun/tests/models/proc-charge.lint-test.js","hospitalrun/tests/models/procedure.js","hospitalrun/tests/models/procedure.lint-test.js","hospitalrun/tests/models/sequence.js","hospitalrun/tests/models/sequence.lint-test.js","hospitalrun/tests/models/social-expense.js","hospitalrun/tests/models/social-expense.lint-test.js","hospitalrun/tests/models/user-role.js","hospitalrun/tests/models/user-role.lint-test.js","hospitalrun/tests/models/user.js","hospitalrun/tests/models/user.lint-test.js","hospitalrun/tests/models/visit.js","hospitalrun/tests/models/visit.lint-test.js","hospitalrun/tests/models/vital.js","hospitalrun/tests/models/vital.lint-test.js","hospitalrun/tests/patients/add-contact/controller.js","hospitalrun/tests/patients/add-contact/controller.lint-test.js","hospitalrun/tests/patients/admitted/controller.js","hospitalrun/tests/patients/admitted/controller.lint-test.js","hospitalrun/tests/patients/admitted/route.js","hospitalrun/tests/patients/admitted/route.lint-test.js","hospitalrun/tests/patients/delete/controller.js","hospitalrun/tests/patients/delete/controller.lint-test.js","hospitalrun/tests/patients/edit/controller.js","hospitalrun/tests/patients/edit/controller.lint-test.js","hospitalrun/tests/patients/edit/route.js","hospitalrun/tests/patients/edit/route.lint-test.js","hospitalrun/tests/patients/index/controller.js","hospitalrun/tests/patients/index/controller.lint-test.js","hospitalrun/tests/patients/index/route.js","hospitalrun/tests/patients/index/route.lint-test.js","hospitalrun/tests/patients/notes/controller.js","hospitalrun/tests/patients/notes/controller.lint-test.js","hospitalrun/tests/patients/photo/controller.js","hospitalrun/tests/patients/photo/controller.lint-test.js","hospitalrun/tests/patients/quick-add/controller.js","hospitalrun/tests/patients/quick-add/controller.lint-test.js","hospitalrun/tests/patients/reports/controller.js","hospitalrun/tests/patients/reports/controller.lint-test.js","hospitalrun/tests/patients/reports/route.js","hospitalrun/tests/patients/reports/route.lint-test.js","hospitalrun/tests/patients/route.js","hospitalrun/tests/patients/route.lint-test.js","hospitalrun/tests/patients/search/controller.js","hospitalrun/tests/patients/search/controller.lint-test.js","hospitalrun/tests/patients/search/route.js","hospitalrun/tests/patients/search/route.lint-test.js","hospitalrun/tests/patients/socialwork/expense/controller.js","hospitalrun/tests/patients/socialwork/expense/controller.lint-test.js","hospitalrun/tests/patients/socialwork/family-info/controller.js","hospitalrun/tests/patients/socialwork/family-info/controller.lint-test.js","hospitalrun/tests/pricing/delete/controller.js","hospitalrun/tests/pricing/delete/controller.lint-test.js","hospitalrun/tests/pricing/edit/controller.js","hospitalrun/tests/pricing/edit/controller.lint-test.js","hospitalrun/tests/pricing/edit/route.js","hospitalrun/tests/pricing/edit/route.lint-test.js","hospitalrun/tests/pricing/imaging/controller.js","hospitalrun/tests/pricing/imaging/controller.lint-test.js","hospitalrun/tests/pricing/imaging/route.js","hospitalrun/tests/pricing/imaging/route.lint-test.js","hospitalrun/tests/pricing/index/controller.js","hospitalrun/tests/pricing/index/controller.lint-test.js","hospitalrun/tests/pricing/index/route.js","hospitalrun/tests/pricing/index/route.lint-test.js","hospitalrun/tests/pricing/lab/controller.js","hospitalrun/tests/pricing/lab/controller.lint-test.js","hospitalrun/tests/pricing/lab/route.js","hospitalrun/tests/pricing/lab/route.lint-test.js","hospitalrun/tests/pricing/override/controller.js","hospitalrun/tests/pricing/override/controller.lint-test.js","hospitalrun/tests/pricing/procedure/controller.js","hospitalrun/tests/pricing/procedure/controller.lint-test.js","hospitalrun/tests/pricing/procedure/route.js","hospitalrun/tests/pricing/procedure/route.lint-test.js","hospitalrun/tests/pricing/profiles/controller.js","hospitalrun/tests/pricing/profiles/controller.lint-test.js","hospitalrun/tests/pricing/profiles/edit/controller.js","hospitalrun/tests/pricing/profiles/edit/controller.lint-test.js","hospitalrun/tests/pricing/profiles/route.js","hospitalrun/tests/pricing/profiles/route.lint-test.js","hospitalrun/tests/pricing/route.js","hospitalrun/tests/pricing/route.lint-test.js","hospitalrun/tests/pricing/search/controller.js","hospitalrun/tests/pricing/search/controller.lint-test.js","hospitalrun/tests/pricing/search/route.js","hospitalrun/tests/pricing/search/route.lint-test.js","hospitalrun/tests/pricing/ward/controller.js","hospitalrun/tests/pricing/ward/controller.lint-test.js","hospitalrun/tests/pricing/ward/route.js","hospitalrun/tests/pricing/ward/route.lint-test.js","hospitalrun/tests/print/invoice/controller.js","hospitalrun/tests/print/invoice/controller.lint-test.js","hospitalrun/tests/procedures/charge/controller.js","hospitalrun/tests/procedures/charge/controller.lint-test.js","hospitalrun/tests/procedures/edit/controller.js","hospitalrun/tests/procedures/edit/controller.lint-test.js","hospitalrun/tests/procedures/edit/route.js","hospitalrun/tests/procedures/edit/route.lint-test.js","hospitalrun/tests/procedures/medication/controller.js","hospitalrun/tests/procedures/medication/controller.lint-test.js","hospitalrun/tests/resolver.js","hospitalrun/tests/resolver.lint-test.js","hospitalrun/tests/router.js","hospitalrun/tests/router.lint-test.js","hospitalrun/tests/routes/abstract-edit-route.js","hospitalrun/tests/routes/abstract-edit-route.lint-test.js","hospitalrun/tests/routes/abstract-index-route.js","hospitalrun/tests/routes/abstract-index-route.lint-test.js","hospitalrun/tests/routes/abstract-module-route.js","hospitalrun/tests/routes/abstract-module-route.lint-test.js","hospitalrun/tests/routes/abstract-search-route.js","hospitalrun/tests/routes/abstract-search-route.lint-test.js","hospitalrun/tests/routes/application.js","hospitalrun/tests/routes/application.lint-test.js","hospitalrun/tests/routes/index.js","hospitalrun/tests/routes/index.lint-test.js","hospitalrun/tests/routes/login.js","hospitalrun/tests/routes/login.lint-test.js","hospitalrun/tests/serializers/application.js","hospitalrun/tests/serializers/application.lint-test.js","hospitalrun/tests/serializers/user.js","hospitalrun/tests/serializers/user.lint-test.js","hospitalrun/tests/services/config.js","hospitalrun/tests/services/config.lint-test.js","hospitalrun/tests/services/database.js","hospitalrun/tests/services/database.lint-test.js","hospitalrun/tests/services/filesystem.js","hospitalrun/tests/services/filesystem.lint-test.js","hospitalrun/tests/serviceworkers/pouchdb-sync.js","hospitalrun/tests/serviceworkers/pouchdb-sync.lint-test.js","hospitalrun/tests/styles/_base.stylelint-test.js","hospitalrun/tests/styles/_bootstrap-theme.stylelint-test.js","hospitalrun/tests/styles/_bootstrap.stylelint-test.js","hospitalrun/tests/styles/_index.stylelint-test.js","hospitalrun/tests/styles/_layout.stylelint-test.js","hospitalrun/tests/styles/_loading_notice.stylelint-test.js","hospitalrun/tests/styles/_print.stylelint-test.js","hospitalrun/tests/styles/_sign_in_screen.stylelint-test.js","hospitalrun/tests/styles/_temp_misc.stylelint-test.js","hospitalrun/tests/styles/_typography.stylelint-test.js","hospitalrun/tests/styles/_variables_mixins.stylelint-test.js","hospitalrun/tests/styles/app.stylelint-test.js","hospitalrun/tests/styles/components/_form_styles.stylelint-test.js","hospitalrun/tests/styles/components/_imaging.stylelint-test.js","hospitalrun/tests/styles/components/_labs.stylelint-test.js","hospitalrun/tests/styles/components/_pagination.stylelint-test.js","hospitalrun/tests/styles/components/_panel.stylelint-test.js","hospitalrun/tests/styles/components/_patient_history.stylelint-test.js","hospitalrun/tests/styles/components/_patient_summary.stylelint-test.js","hospitalrun/tests/styles/components/_sidebar_nav.stylelint-test.js","hospitalrun/tests/styles/components/_tab_content.stylelint-test.js","hospitalrun/tests/styles/components/_tab_nav.stylelint-test.js","hospitalrun/tests/template-deprecations-test.js","hospitalrun/tests/test-helper.js","hospitalrun/tests/test-helper.lint-test.js","hospitalrun/tests/unit/appointments/missed/route-test.js","hospitalrun/tests/unit/appointments/missed/route-test.lint-test.js","hospitalrun/tests/unit/components/nav-menu-test.js","hospitalrun/tests/unit/components/nav-menu-test.lint-test.js","hospitalrun/tests/unit/models/inventory-test.js","hospitalrun/tests/unit/models/inventory-test.lint-test.js","hospitalrun/tests/unit/models/visit-test.js","hospitalrun/tests/unit/models/visit-test.lint-test.js","hospitalrun/tests/unit/services/config-test.js","hospitalrun/tests/unit/services/config-test.lint-test.js","hospitalrun/tests/unit/services/filesystem-test.js","hospitalrun/tests/unit/services/filesystem-test.lint-test.js","hospitalrun/tests/unit/utils/item-condition-test.js","hospitalrun/tests/unit/utils/item-condition-test.lint-test.js","hospitalrun/tests/users/delete/controller.js","hospitalrun/tests/users/delete/controller.lint-test.js","hospitalrun/tests/users/edit/controller.js","hospitalrun/tests/users/edit/controller.lint-test.js","hospitalrun/tests/users/edit/route.js","hospitalrun/tests/users/edit/route.lint-test.js","hospitalrun/tests/users/index/controller.js","hospitalrun/tests/users/index/controller.lint-test.js","hospitalrun/tests/users/index/route.js","hospitalrun/tests/users/index/route.lint-test.js","hospitalrun/tests/users/route.js","hospitalrun/tests/users/route.lint-test.js","hospitalrun/tests/utils/date-sort.js","hospitalrun/tests/utils/date-sort.lint-test.js","hospitalrun/tests/utils/email-validation.js","hospitalrun/tests/utils/email-validation.lint-test.js","hospitalrun/tests/utils/item-condition.js","hospitalrun/tests/utils/item-condition.lint-test.js","hospitalrun/tests/utils/patient-validation.js","hospitalrun/tests/utils/patient-validation.lint-test.js","hospitalrun/tests/utils/pouch-views.js","hospitalrun/tests/utils/pouch-views.lint-test.js","hospitalrun/tests/utils/select-values.js","hospitalrun/tests/utils/select-values.lint-test.js","hospitalrun/tests/visits/add-diagnosis/controller.js","hospitalrun/tests/visits/add-diagnosis/controller.lint-test.js","hospitalrun/tests/visits/charge/controller.js","hospitalrun/tests/visits/charge/controller.lint-test.js","hospitalrun/tests/visits/delete/controller.js","hospitalrun/tests/visits/delete/controller.lint-test.js","hospitalrun/tests/visits/edit/controller.js","hospitalrun/tests/visits/edit/controller.lint-test.js","hospitalrun/tests/visits/edit/route.js","hospitalrun/tests/visits/edit/route.lint-test.js","hospitalrun/tests/visits/procedures/delete/controller.js","hospitalrun/tests/visits/procedures/delete/controller.lint-test.js","hospitalrun/tests/visits/route.js","hospitalrun/tests/visits/route.lint-test.js","hospitalrun/tests/visits/vitals/delete/controller.js","hospitalrun/tests/visits/vitals/delete/controller.lint-test.js","hospitalrun/tests/visits/vitals/edit/controller.js","hospitalrun/tests/visits/vitals/edit/controller.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('hospitalrun/tests/acceptance/admin-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | admin', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /admin', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin');\n        select('.lookup-type', 'Visit Types');\n        andThen(function () {\n          assert.equal(find('h3.panel-title').text(), 'Visit Types', 'Visit Types header is displayed');\n          assert.equal(find('td.lookup-type-value:first').text(), 'Admission', 'Admission visit type displays');\n          click('button:contains(Update)');\n          waitToAppear('.modal-dialog');\n          andThen(function () {\n            assert.equal(find('.modal-title').text(), 'List Saved', 'Lookup list is saved');\n          });\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('add new lookup value', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin');\n        select('.lookup-type', 'Anesthesiologists');\n        click('button:contains(Add Value)');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Add Value', 'Add value modal is displayed');\n          fillIn('.lookup-type-value input', 'Dr Smith');\n          click('button:contains(Add):last');\n          andThen(function () {\n            waitToAppear('td.lookup-type-value:contains(Dr Smith)');\n            andThen(function () {\n              assert.equal(find('td.lookup-type-value:contains(Dr Smith)').length, 1, 'Added lookup type is added to list');\n            });\n          });\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete lookup value', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin');\n        select('.lookup-type', 'Anesthesia Types');\n        andThen(function () {\n          assert.equal(find('td.lookup-type-value:contains(Epidural)').length, 1, 'Have lookup type to delete from list');\n          click('button:contains(Delete)');\n          andThen(function () {\n            assert.equal(find('td.lookup-type-value:contains(Epidural)').length, 0, 'Deleted lookup type is removed from the list');\n          });\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('Update address options', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin/address');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/address');\n        fillIn('input', 'Address Label');\n        click('button:contains(Update)');\n        andThen(function () {\n          waitToAppear('.modal-dialog');\n          andThen(function () {\n            assert.equal(find('.modal-title').text(), 'Options Saved', 'Address Options Saved');\n          });\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('Update workflow options', function (assert) {\n    var selector = 'input[type=checkbox]';\n\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin/workflow');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/workflow', 'Correctly navigated to admin workflow');\n\n        setAllTo(false, function () {\n          visit('/admin/workflow');\n          andThen(function () {\n            setAllTo(true);\n          });\n        });\n      });\n    });\n\n    function setAllTo(checked, cb) {\n      Array.prototype.slice.call(document.querySelectorAll(selector)).forEach(function (node) {\n        node.checked = checked;\n      });\n      click('button:contains(Update)');\n      andThen(function () {\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Options Saved', 'Workflow Options Saved');\n          verifyAll(checked);\n          if (cb) {\n            cb();\n          }\n        });\n      });\n    }\n\n    function verifyAll(checked) {\n      Array.prototype.slice.call(document.querySelectorAll(selector)).forEach(function (node) {\n        assert.equal(node.checked, checked, 'Checkbox is ' + (checked ? 'checked' : 'unchecked'));\n      });\n    }\n  });\n});","define('hospitalrun/tests/acceptance/admin-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/admin-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/admin-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/appointments-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | appointments', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /appointments', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/appointments');\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments');\n        findWithAssert('button:contains(new appointment)');\n        findWithAssert('.table-header');\n      });\n    });\n  });\n\n  (0, _qunit.test)('visiting /appointments/missed', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      var url = '/appointments';\n      // create an apointmet scheduled in the past\n      var today = moment();\n      var tomorrow = moment().add(1, 'days');\n      var status = 'Missed';\n      createAppointment(today, tomorrow, status);\n      visit(url);\n      andThen(function () {\n        assert.equal(currentURL(), url);\n        findWithAssert('.appointment-status:contains(' + status + ')');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Creating a new appointment', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      visit('/appointments/edit/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments/edit/new');\n        findWithAssert('button:contains(Cancel)');\n        findWithAssert('button:contains(Add)');\n      });\n\n      createAppointment();\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments');\n        assert.equal(find('tr').length, 2, 'New appointment has been added');\n        findWithAssert('button:contains(Add Visit)');\n        findWithAssert('button:contains(Edit)');\n        findWithAssert('button:contains(Delete)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Adding a visit to an appointment', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      createAppointment();\n      visit('/appointments');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments');\n        assert.equal(find('tr').length, 2, 'New appointment has been added');\n        findWithAssert('button:contains(Add Visit)');\n        findWithAssert('button:contains(Edit)');\n        findWithAssert('button:contains(Delete)');\n      });\n\n      click('button:contains(Add Visit)');\n      andThen(function () {\n        assert.equal(currentURL(), '/visits/edit/new', 'Now in add visiting information route');\n      });\n      click('.panel-footer button:contains(Add)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Visit Saved', 'New visit has been saved');\n      });\n      click('button:contains(Ok)');\n      andThen(function () {\n        findWithAssert('button:contains(New Note)');\n        findWithAssert('button:contains(New Procedure)');\n        findWithAssert('button:contains(New Medication)');\n        findWithAssert('button:contains(New Lab)');\n        findWithAssert('button:contains(New Imaging)');\n        findWithAssert('button:contains(New Vitals)');\n        findWithAssert('button:contains(Add Item)');\n      });\n\n      click('button:contains(Return)');\n\n      click('button:contains(Return)');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients');\n        findWithAssert('button:contains(Discharge)');\n        findWithAssert('button:contains(Edit)');\n        findWithAssert('button:contains(Delete)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Delete an appointment', function (assert) {\n    runWithPouchDump('appointments', function () {\n      authenticateUser();\n      createAppointment();\n      visit('/appointments');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments');\n        assert.equal(find('.appointment-date').length, 1, 'One appointment is listed');\n        findWithAssert('button:contains(Add Visit)');\n        findWithAssert('button:contains(Edit)');\n        findWithAssert('button:contains(Delete)');\n      });\n\n      click('button:contains(Delete)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text().trim(), 'Delete Appointment', 'Delete Appointment confirmation modal has been displayed');\n      });\n      click('.modal-dialog button:contains(Delete)');\n      waitToDisappear('.appointment-date');\n      andThen(function () {\n        assert.equal(find('.appointment-date').length, 0, 'No appointments are displayed');\n      });\n    });\n  });\n\n  function createAppointment() {\n    var startDate = arguments.length <= 0 || arguments[0] === undefined ? new Date() : arguments[0];\n    var endDate = arguments.length <= 1 || arguments[1] === undefined ? moment().add(1, 'day').toDate() : arguments[1];\n    var status = arguments.length <= 2 || arguments[2] === undefined ? 'Scheduled' : arguments[2];\n\n    visit('/appointments/edit/new');\n    typeAheadFillIn('.test-patient-input', 'Lennex Zinyando - P00017');\n    select('.test-appointment-type', 'Admission');\n    select('.test-appointment-status', status);\n    waitToAppear('.test-appointment-start input');\n    andThen(function () {\n      selectDate('.test-appointment-start input', startDate);\n    });\n    andThen(function () {\n      selectDate('.test-appointment-end input', endDate);\n    });\n    typeAheadFillIn('.test-appointment-location', 'Harare');\n    fillIn('.test-appointment-with', 'Dr Test');\n    click('button:contains(Add)');\n    waitToAppear('.table-header');\n  }\n});","define('hospitalrun/tests/acceptance/appointments-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/appointments-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/appointments-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/imaging-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | imaging', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /imaging', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/imaging');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging');\n        var newImagingButton = find('button:contains(new imaging)');\n        assert.equal(newImagingButton.length, 1, 'New Imaging button is visible');\n        findWithAssert('p:contains(No items found. )');\n        findWithAssert('a:contains(Create a new record?)');\n      });\n      click('button:contains(new imaging)');\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/edit/new');\n      });\n    });\n  });\n\n  (0, _qunit.test)('create a new imaging request', function (assert) {\n    runWithPouchDump('imaging', function () {\n      authenticateUser();\n      visit('/imaging/edit/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/edit/new');\n      });\n      typeAheadFillIn('.patient-input', 'Joe Bagadonuts - P00001');\n      typeAheadFillIn('.imaging-type-input', 'Chest Scan');\n      typeAheadFillIn('.radiologist-input', 'Dr Test');\n      fillIn('.result-input input', 'Check is clear');\n      fillIn('textarea', 'Patient is healthy');\n      click('button:contains(Add)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Imaging Request Saved', 'Imaging Request was saved successfully');\n      });\n      click('button:contains(Ok)');\n      andThen(function () {\n        findWithAssert('button:contains(Update)');\n        findWithAssert('button:contains(Return)');\n        findWithAssert('button:contains(Complete)');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-summary').length, 1, 'Patient summary is displayed');\n      });\n      click('button:contains(Return)');\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging');\n        assert.equal(find('tr').length, 3, 'Two imaging requests are displayed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('completed requests are displayed', function (assert) {\n    runWithPouchDump('imaging', function () {\n      authenticateUser();\n      visit('/imaging/completed');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/completed');\n        assert.equal(find('.table').length, 1, 'Requests table is visible');\n      });\n    });\n  });\n\n  (0, _qunit.test)('mark an imaging request as completed', function (assert) {\n    runWithPouchDump('imaging', function () {\n      authenticateUser();\n      visit('/imaging');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging');\n        assert.equal(find('.table').length, 1, 'Requests table is visible');\n        assert.equal(find('tr').length, 2, 'One imaging request not completed');\n      });\n      click('button:contains(Edit):first');\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/edit/12DEDA58-4670-7A74-BA8B-9CC5E5CA82E7');\n        findWithAssert('button:contains(Update)');\n        findWithAssert('button:contains(Return)');\n        findWithAssert('button:contains(Complete)');\n      });\n      click('button:contains(Complete)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Imaging Request Completed', 'Imaging Request was saved successfully');\n      });\n      click('button:contains(Ok)');\n      click('button:contains(Return)');\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging');\n        findWithAssert('a:contains(Create a new record?)');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/imaging-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/imaging-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/imaging-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/inventory-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | inventory', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /inventory', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/inventory');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory');\n        findWithAssert('button:contains(new request)');\n        findWithAssert('button:contains(inventory received)');\n        findWithAssert('p:contains(No requests found. )');\n        findWithAssert('a:contains(Create a new request?)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Adding a new inventory item', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/inventory/edit/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/edit/new');\n      });\n      fillIn('.test-inv-name input', 'Biogesic');\n      select('.test-inv-rank', 'B');\n      fillIn('textarea', 'Biogesic nga medisina');\n      select('.test-inv-type', 'Medication');\n      fillIn('.test-inv-cross input', '2600');\n      fillIn('.test-inv-reorder input', '100');\n      fillIn('.test-inv-price input', '5');\n      select('.test-inv-dist-unit', 'tablet');\n      fillIn('.test-inv-quantity input', '1000');\n      fillIn('.test-inv-cost input', '4000');\n      select('.test-inv-unit', 'tablet');\n      typeAheadFillIn('.test-vendor', 'Alpha Pharmacy');\n      click('button:contains(Add)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Inventory Item Saved', 'Inventory Item was saved successfully');\n      });\n      click('button:contains(Ok)');\n\n      andThen(function () {\n        findWithAssert('button:contains(Add Purchase)');\n        findWithAssert('button:contains(Update)');\n        findWithAssert('button:contains(Return)');\n      });\n\n      click('button:contains(Return)');\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/listing');\n        assert.equal(find('tr').length, 2, 'One item is listed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Visiting /inventory/barcode', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory/listing');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/listing');\n        click('a:contains(Barcode)');\n        andThen(function () {\n          assert.equal(currentURL(), '/inventory/barcode/igbmk5zf_is');\n          findWithAssert('.panel-body img[src^=\"data:image\"]');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('Deleting the last inventory item', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory/listing');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/listing');\n        click('button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Delete Item', 'Deleting confirmation.');\n        });\n        click('.modal-content button:contains(Delete)');\n        waitToAppear('.panel-body .alert-info');\n        andThen(function () {\n          assert.equal(currentURL(), '/inventory/listing');\n          findWithAssert('a:contains(Create a new record?)');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('Creating a new inventory request', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory/request/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/request/new');\n      });\n      typeAheadFillIn('.test-inv-item', 'Biogesic - m00001 (1000 available)');\n      fillIn('.test-inv-quantity input', 500);\n      typeAheadFillIn('.test-delivery-location', 'Harare');\n      typeAheadFillIn('.test-delivery-aisle', 'C100');\n      typeAheadFillIn('.test-bill-to', 'Accounts Dept');\n      click('button:contains(Add)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Request Updated', 'New request has been saved');\n      });\n      click('button:contains(Ok)');\n      andThen(function () {\n        findWithAssert('button:contains(Fulfill)');\n        findWithAssert('button:contains(Cancel)');\n      });\n      click('button:contains(Cancel)');\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory');\n        assert.equal(find('tr').length, 3, 'Two requests are now displayed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Fulfilling an inventory request', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory');\n        var tableRows = find('tr').length;\n        assert.equal(tableRows, 2, 'One request not fulfilled');\n      });\n      click('button:contains(Fulfill)');\n\n      andThen(function () {\n        findWithAssert('button:contains(Fulfill)');\n        findWithAssert('button:contains(Cancel)');\n      });\n\n      click('button:contains(Fulfill)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        var modalTitle = find('.modal-title');\n        assert.equal(modalTitle.text(), 'Request Fulfilled', 'Inventory request has been fulfilled');\n      });\n\n      click('button:contains(Ok)');\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Receiving inventory', function (assert) {\n    runWithPouchDump('inventory', function () {\n      authenticateUser();\n      visit('/inventory/batch/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/batch/new');\n      });\n      typeAheadFillIn('.test-vendor', 'Alpha Pharmacy');\n      fillIn('.test-invoice-number input', 'P2345');\n      typeAheadFillIn('.test-inv-item', 'Biogesic - m00001');\n      fillIn('.test-inv-quantity input', 500);\n      fillIn('.test-inv-cost input', '2000');\n      click('button:contains(Save)');\n      waitToAppear('.modal-title');\n\n      andThen(function () {\n        var modalTitle = find('.modal-title');\n        assert.equal(modalTitle.text(), 'Inventory Purchases Saved', 'Inventory has been received');\n      });\n      click('button:contains(Ok)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/inventory/listing');\n      });\n    });\n  });\n\n  testSimpleReportForm('Detailed Adjustment');\n  testSimpleReportForm('Detailed Purchase');\n  testSimpleReportForm('Detailed Stock Usage');\n  testSimpleReportForm('Detailed Stock Transfer');\n  testSimpleReportForm('Detailed Expenses');\n  testSimpleReportForm('Expiration Date');\n  testSimpleReportForm('Summary Expenses');\n  testSimpleReportForm('Summary Purchase');\n  testSimpleReportForm('Summary Stock Usage');\n  testSimpleReportForm('Summary Stock Transfer');\n  testSimpleReportForm('Finance Summary');\n  testSingleDateReportForm('Inventory By Location');\n  testSingleDateReportForm('Inventory Valuation');\n\n  function testSimpleReportForm(reportName) {\n    (0, _qunit.test)(reportName + ' report can be generated', function (assert) {\n      runWithPouchDump('default', function () {\n        authenticateUser();\n        visit('/inventory/reports');\n        andThen(function () {\n          assert.equal(currentURL(), '/inventory/reports');\n        });\n        var startDate = moment('2015-10-01');\n        var endDate = moment('2015-10-31');\n        selectDate('.test-start-date input', startDate.toDate());\n        selectDate('.test-end-date input', endDate.toDate());\n        select('#report-type', '' + reportName);\n        click('button:contains(Generate Report)');\n        waitToAppear('.panel-title');\n\n        andThen(function () {\n          var reportTitle = reportName + ' Report ' + startDate.format('l') + ' - ' + endDate.format('l');\n          assert.equal(find('.panel-title').text().trim(), reportTitle, reportName + ' Report generated');\n          findWithAssert('a:contains(Export Report)');\n        });\n      });\n    });\n  }\n\n  function testSingleDateReportForm(reportName) {\n    (0, _qunit.test)(reportName + ' report can be generated', function (assert) {\n      runWithPouchDump('default', function () {\n        authenticateUser();\n        visit('/inventory/reports');\n        andThen(function () {\n          assert.equal(currentURL(), '/inventory/reports');\n        });\n        select('#report-type', '' + reportName);\n        click('button:contains(Generate Report)');\n        waitToAppear('.panel-title');\n\n        andThen(function () {\n          assert.equal(find('.panel-title').text().trim(), reportName + ' Report ' + moment().format('l'), reportName + ' Report generated');\n          findWithAssert('a:contains(Export Report)');\n        });\n      });\n    });\n  }\n});","define('hospitalrun/tests/acceptance/inventory-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/inventory-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/inventory-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/invoices-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | invoices', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /invoices', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n      });\n    });\n  });\n\n  (0, _qunit.test)('create invoice', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices/edit/new');\n      });\n      typeAheadFillIn('.invoice-patient', 'Joe Bagadonuts - TCH 00001');\n      waitToAppear('.invoice-visit option:contains((Admission))');\n      andThen(function () {\n        select('.invoice-visit', '(Admission)');\n        fillIn('.external-invoice-no input', 'inv000002');\n      });\n      waitToAppear('button:contains(Update)');\n      andThen(function () {\n        click('button:contains(Update)');\n      });\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Invoice Saved', 'Invoice was saved successfully');\n      });\n    });\n  });\n\n  (0, _qunit.test)('print invoice', function (assert) {\n    runWithPouchDump('billing', function () {\n      window.print = _ember['default'].K; // Disable browser print dialog.\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n        assert.equal(find('.invoice-number:contains(inv00001)').length, 1, 'Invoice is available for printing');\n        click('button:contains(Edit)');\n        waitToAppear('button:contains(Print)');\n      });\n      andThen(function () {\n        click('button:contains(Print)');\n      });\n      andThen(function () {\n        assert.equal(find('.print-invoice').length, 1, 'Invoice is displayed for printing');\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete invoice', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n        assert.equal(find('.invoice-number:contains(inv00001)').length, 1, 'Invoice is displayed for deletion');\n      });\n      click('button:contains(Delete)');\n      andThen(function () {\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.alert').text().trim(), 'Are you sure you wish to delete inv00001?', 'Invoice deletion confirm displays');\n      });\n      click('button:contains(Delete):last');\n      waitToDisappear('.invoice-number:contains(inv00001)');\n      andThen(function () {\n        assert.equal(find('.invoice-number:contains(inv00001)').length, 0, 'Invoice is deleted');\n      });\n    });\n  });\n\n  (0, _qunit.test)('add payment', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n      });\n      click('button:contains(Add Payment)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Payment', 'Add Payment modal displays');\n      });\n      fillIn('.payment-amount input', 100);\n      click('.update-payment-btn');\n      waitToAppear('.modal-title:contains(Payment Added)');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Payment Added', 'Payment was saved successfully');\n      });\n    });\n  });\n\n  (0, _qunit.test)('add deposit', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/invoices');\n      andThen(function () {\n        assert.equal(currentURL(), '/invoices');\n      });\n      click('button:contains(add deposit)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Deposit', 'Add Deposit modal displays');\n      });\n      fillIn('.payment-amount input', 140);\n      typeAheadFillIn('.payment-patient', 'Joe Bagadonuts - TCH 00001');\n      click('.update-payment-btn');\n      waitToAppear('.modal-title:contains(Deposit Added)');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Deposit Added', 'Deposit was saved successfully');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/invoices-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/invoices-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/invoices-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/labs-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | labs', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /labs', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/labs');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/labs');\n        findWithAssert('a:contains(Create a new record?)');\n        findWithAssert('button:contains(new lab)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Adding a new lab request', function (assert) {\n    runWithPouchDump('labs', function () {\n      authenticateUser();\n      visit('/labs');\n\n      click('button:contains(new lab)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/labs/edit/new');\n      });\n\n      typeAheadFillIn('.test-patient-name', 'Lennex Zinyando - P00017');\n      typeAheadFillIn('.test-lab-type', 'Chest Scan');\n      fillIn('.test-result-input input', 'Chest is clear');\n      fillIn('textarea', 'Dr test ordered another scan');\n      click('button:contains(Add)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Lab Request Saved', 'Lab Request was saved successfully');\n        findWithAssert('.patient-summary');\n      });\n\n      click('.modal-footer button:contains(Ok)');\n\n      andThen(function () {\n        assert.equal(find('.patient-summary').length, 1, 'Patient summary is displayed');\n      });\n\n      click('.panel-footer button:contains(Return)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/labs');\n        assert.equal(find('tr').length, 3, 'Two lab requests are displayed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Marking a lab request as completed', function (assert) {\n    runWithPouchDump('labs', function () {\n      authenticateUser();\n      visit('/labs/completed');\n\n      andThen(function () {\n        assert.equal(find('.alert-info').text().trim(), 'No completed items found.', 'No completed requests are displayed');\n      });\n\n      visit('/labs');\n      click('button:contains(Edit)');\n      click('button:contains(Complete)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Lab Request Completed', 'Lab Request was completed successfully');\n      });\n\n      click('.modal-footer button:contains(Ok)');\n      click('.panel-footer button:contains(Return)');\n      visit('/labs/completed');\n\n      andThen(function () {\n        assert.equal(find('tr').length, 2, 'One completed request is displayed');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/labs-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/labs-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/labs-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/login-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app', 'ember-cli-fake-server'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp, _emberCliFakeServer) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | login', {\n    beforeEach: function beforeEach() {\n      _emberCliFakeServer['default'].start();\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _emberCliFakeServer['default'].stop();\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting / redirects user to login', function (assert) {\n    assert.expect(3);\n    runWithPouchDump('default', function () {\n      visit('/');\n\n      (0, _emberCliFakeServer.stubRequest)('post', '/db/_session', function (request) {\n        assert.equal(request.requestBody, 'name=hradmin&password=test', 'credential are sent to the server');\n        request.ok({ 'ok': true, 'name': 'hradmin', 'roles': ['System Administrator', 'admin', 'user'] });\n      });\n\n      (0, _emberCliFakeServer.stubRequest)('post', '/chkuser', function (request) {\n        assert.equal(request.requestBody, 'name=hradmin', 'username is sent to /chkuser');\n        request.ok({ 'prefix': 'p1', 'role': 'System Administrator' });\n      });\n\n      andThen(function () {\n        assert.equal(currentURL(), '/login');\n      });\n\n      fillIn('#identification', 'hradmin');\n      fillIn('#password', 'test');\n      click('button:contains(Sign in)');\n    });\n  });\n\n  (0, _qunit.test)('incorrect credentials shows an error message on the screen', function (assert) {\n    assert.expect(2);\n    runWithPouchDump('default', function () {\n      visit('/');\n\n      var errorMessage = 'Username or password is incorrect.';\n\n      (0, _emberCliFakeServer.stubRequest)('post', '/db/_session', function (request) {\n        assert.equal(request.requestBody, 'name=hradmin&password=tset', 'credential are sent to the server');\n        request.error({ 'error': 'unauthorized', 'reason': errorMessage });\n      });\n\n      fillIn('#identification', 'hradmin');\n      fillIn('#password', 'tset');\n      click('button:contains(Sign in)');\n\n      andThen(function () {\n        assert.equal(find('.form-signin-alert').text(), errorMessage, 'Error reason is shown');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/login-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/login-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/login-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/medication-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | medication', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /medication', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/medication');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication');\n        findWithAssert('button:contains(new request)');\n        findWithAssert('button:contains(dispense medication)');\n        findWithAssert('button:contains(return medication)');\n        findWithAssert('p:contains(No items found. )');\n        findWithAssert('a:contains(Create a new medication request?)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('creating a new medication request', function (assert) {\n    runWithPouchDump('medication', function () {\n      authenticateUser();\n      visit('/medication/edit/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication/edit/new');\n      });\n      typeAheadFillIn('.test-patient-input', 'Lennex Zinyando - P00017');\n      waitToAppear('.have-inventory-items');\n      andThen(function () {\n        typeAheadFillIn('.test-medication-input', 'Biogesic - m00001 (950 available)');\n      });\n      fillIn('textarea', '30 Biogesic Pills');\n      fillIn('.test-quantity-input input', '30');\n      click('button:contains(Add)');\n\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text().trim(), 'Medication Request Saved', 'New medication request has been saved');\n      });\n\n      click('button:contains(Ok)');\n      click('button:contains(Return)');\n      andThen(function () {\n        assert.equal(currentURL(), '/medication');\n        assert.equal(find('tr').length, 3, 'New medication request is now displayed');\n      });\n    });\n  });\n\n  (0, _qunit.test)('fulfilling a medication request', function (assert) {\n    runWithPouchDump('medication', function () {\n      authenticateUser();\n      visit('/medication');\n      click('button:contains(Fulfill)');\n\n      andThen(function () {\n        assert.equal(find('.patient-summary').length, 1, 'Patient summary is displayed');\n      });\n\n      click('button:contains(Fulfill)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text().trim(), 'Medication Request Fulfilled', 'Medication Request has been Fulfilled');\n      });\n\n      click('button:contains(Ok)');\n      click('button:contains(Return)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication');\n        findWithAssert('p:contains(No items found. )');\n        findWithAssert('a:contains(Create a new medication request?)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('returning medication', function (assert) {\n    runWithPouchDump('medication', function () {\n      authenticateUser();\n      visit('/medication/return/new');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication/return/new');\n      });\n      waitToAppear('.have-inventory-items');\n      andThen(function () {\n        typeAheadFillIn('.test-medication-input', 'Biogesic - m00001');\n      });\n      fillIn('.test-medication-quantity input', 30);\n      click('button:contains(Return Medication)');\n      waitToAppear('.modal-dialog');\n\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Medication Returned', 'Medication has been return successfully');\n      });\n      click('button:contains(Ok)');\n\n      andThen(function () {\n        assert.equal(currentURL(), '/medication');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/medication-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/medication-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/medication-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/patient-notes-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | patient notes', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('patient notes crud testing', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/edit/new');\n        fillIn('.test-first-name input', 'John');\n        fillIn('.test-last-name input', 'Doe');\n        click('.panel-footer button:contains(Add)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Patient Saved', 'Patient record has been saved');\n        click('button:contains(Close)');\n        waitToAppear('.patient-summary');\n      });\n      andThen(function () {\n        findWithAssert('.patient-summary');\n        click('[data-test-selector=visits-tab]');\n      });\n      andThen(function () {\n        findWithAssert('#visits');\n        click('button:contains(New Visit)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/visits/edit/new', 'Now in add visiting information route');\n        click('.panel-footer button:contains(Add)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Visit Saved', 'New visit has been saved');\n        click('button:contains(Ok)');\n      });\n      andThen(function () {\n        findWithAssert('button:contains(New Note)');\n        findWithAssert('button:contains(New Procedure)');\n        findWithAssert('button:contains(New Medication)');\n        findWithAssert('button:contains(New Lab)');\n        findWithAssert('button:contains(New Imaging)');\n        findWithAssert('button:contains(New Vitals)');\n        findWithAssert('button:contains(Add Item)');\n        assert.equal(find('button:contains(New Note)').length, 1, 'New Note button in visible');\n        click('button:contains(New Note)');\n      });\n      andThen(function () {\n        assert.equal(find('label:contains(Note)').length, 1, 'Notes modal appeared.');\n        fillIn('.test-note-content textarea', 'This is a note.');\n        fillIn('.test-note-attribution input', 'Dr. Nick');\n        click('.modal-footer button:contains(Add)');\n      });\n      andThen(function () {\n        waitToAppear('#visit-notes table tr td:contains(This is a note.)');\n      });\n      andThen(function () {\n        assert.equal(find('#visit-notes table tr td:contains(This is a note.)').length, 1, 'Successfully added note.');\n        click('#visit-notes table tr td button:contains(Edit)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        fillIn('.test-note-content textarea', 'This is an updated note.');\n        click('.modal-footer button:contains(Update)');\n        waitToAppear('#visit-notes table tr td:contains(This is an updated note.)');\n      });\n      andThen(function () {\n        assert.equal(find('#visit-notes table tr td:contains(This is an updated note.)').length, 1, 'Successfully updated note.');\n        click('#visit-notes table tr td button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        assert.equal(find('#visit-notes table tr td:contains(This is an updated note.)').length, 0, 'Successfully deleted note.');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/patient-notes-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/patient-notes-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/patient-notes-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/patients-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | patients', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /patients route', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients');\n        var noPatientsFound = find('[data-test-selector=\"no-patients-found\"]');\n        assert.equal(noPatientsFound.text().trim(), 'No patients found. Create a new patient record?', 'no records found');\n        var newPatientButton = find('button:contains(+ new patient)');\n        assert.equal(newPatientButton.length, 1, 'Add new patient button is visible');\n      });\n      click('button:contains(+ new patient)');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/edit/new');\n      });\n    });\n  });\n\n  (0, _qunit.test)('View reports tab', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients/reports');\n\n      andThen(function () {\n        var generateReportButton = find('button:contains(Generate Report)');\n        assert.equal(currentURL(), '/patients/reports');\n        assert.equal(generateReportButton.length, 1, 'Generate Report button is visible');\n        var reportType = find('[data-test-selector=\"select-report-type\"]');\n        assert.equal(reportType.length, 1, 'Report type select is visible');\n        assert.equal(reportType.find(':selected').text().trim(), 'Admissions Detail', 'Default value selected\"');\n      });\n    });\n  });\n\n  testSimpleReportForm('Admissions Summary');\n  testSimpleReportForm('Diagnostic Testing');\n  testSimpleReportForm('Discharges Detail');\n  testSimpleReportForm('Discharges Summary');\n  testSimpleReportForm('Procedures Detail');\n\n  (0, _qunit.test)('View reports tab | Patient Status', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients/reports');\n      select('[data-test-selector=\"select-report-type\"] select', 'Patient Status');\n\n      andThen(function () {\n        var generateReportButton = find('button:contains(Generate Report)');\n        assert.equal(currentURL(), '/patients/reports');\n        assert.equal(generateReportButton.length, 1, 'Generate Report button is visible');\n        var reportType = find('[data-test-selector=\"select-report-type\"] select');\n        assert.equal(reportType.length, 1, 'Report type select is visible');\n        assert.equal(reportType.find(':selected').text().trim(), 'Patient Status', 'Default value selected\"');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Adding a new patient record', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      visit('/patients/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients/edit/new');\n      });\n\n      fillIn('.test-first-name input', 'John');\n      fillIn('.test-last-name input', 'Doe');\n      click('.panel-footer button:contains(Add)');\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Patient Saved', 'Patient record has been saved');\n        assert.equal(find('.modal-body').text().trim(), 'The patient record for John Doe has been saved.', 'Record has been saved');\n      });\n      click('button:contains(Close)');\n      waitToAppear('.patient-summary');\n\n      andThen(function () {\n        findWithAssert('.patient-summary');\n      });\n      andThen(function () {\n        findWithAssert('#general');\n      });\n    });\n  });\n\n  function testSimpleReportForm(reportName) {\n    (0, _qunit.test)('View reports tab | ' + reportName + ' shows start and end dates', function (assert) {\n      runWithPouchDump('default', function () {\n        authenticateUser();\n        visit('/patients/reports');\n        select('[data-test-selector=\"select-report-type\"] select', reportName);\n\n        andThen(function () {\n          var reportStartDate = find('[data-test-selector=\"select-report-start-date\"]');\n          var reportEndDate = find('[data-test-selector=\"select-report-end-date\"]');\n          assert.equal(reportStartDate.length, 1, 'Report start date select is visible');\n          assert.equal(reportEndDate.length, 1, 'Report end date select is visible');\n          var reportType = find('[data-test-selector=\"select-report-type\"] select');\n          assert.equal(reportType.find(':selected').text().trim(), reportName, reportName + ' option selected');\n        });\n      });\n    });\n  }\n});","define('hospitalrun/tests/acceptance/patients-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/patients-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/patients-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/pricing-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  function verifyPricingLists(path, includesPrices, excludesPrices, assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit(path);\n      andThen(function () {\n        assert.equal(currentURL(), path);\n        includesPrices.forEach(function (priceName) {\n          assert.equal(find('.price-name:contains(' + priceName + ')').length, 1, priceName + ' displays');\n        });\n        excludesPrices.forEach(function (priceName) {\n          assert.equal(find('.price-name:contains(' + priceName + ')').length, 0, priceName + ' is not present');\n        });\n      });\n    });\n  }\n\n  (0, _qunit.module)('Acceptance | pricing', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /pricing', function (assert) {\n    var includesPrices = ['Xray Hand', 'Blood test', 'Leg Casting', 'Gauze pad'];\n    verifyPricingLists('/pricing', includesPrices, [], assert);\n  });\n\n  (0, _qunit.test)('visiting /pricing/imaging', function (assert) {\n    var excludesPrices = ['Blood test', 'Leg Casting', 'Gauze pad'];\n    var includesPrices = ['Xray Hand'];\n    verifyPricingLists('/pricing/imaging', includesPrices, excludesPrices, assert);\n  });\n\n  (0, _qunit.test)('visiting /pricing/lab', function (assert) {\n    var excludesPrices = ['Xray Hand', 'Leg Casting', 'Gauze pad'];\n    var includesPrices = ['Blood test'];\n    verifyPricingLists('/pricing/lab', includesPrices, excludesPrices, assert);\n  });\n\n  (0, _qunit.test)('visiting /pricing/procedure', function (assert) {\n    var excludesPrices = ['Xray Hand', 'Blood test', 'Gauze pad'];\n    var includesPrices = ['Leg Casting'];\n    verifyPricingLists('/pricing/procedure', includesPrices, excludesPrices, assert);\n  });\n\n  (0, _qunit.test)('visiting /pricing/ward', function (assert) {\n    var excludesPrices = ['Xray Hand', 'Blood test', 'Leg Casting'];\n    var includesPrices = ['Gauze pad'];\n    verifyPricingLists('/pricing/ward', includesPrices, excludesPrices, assert);\n  });\n\n  (0, _qunit.test)('create new price', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/pricing/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/pricing/edit/new');\n        fillIn('.price-name input', 'Xray Foot');\n        fillIn('.price-amount input', 100);\n        fillIn('.price-department input', 'Imaging');\n        select('.price-category', 'Imaging');\n        fillIn('.price-type', 'Imaging Procedure');\n        click('button:contains(Add):last');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Pricing Item Saved', 'Pricing Item saved');\n          click('button:contains(Ok)');\n        });\n        andThen(function () {\n          click('button:contains(Add Override)');\n          waitToAppear('.modal-dialog');\n        });\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'Add Override', 'Add Override Dialog displays');\n          select('.pricing-profile', 'Half off');\n          fillIn('.pricing-override-price input', 20);\n        });\n        andThen(function () {\n          click('button:contains(Add):last');\n          waitToAppear('.override-profile');\n        });\n        andThen(function () {\n          assert.equal(find('.override-profile').text(), 'Half off', 'Pricing override saved');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete price', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/pricing/lab');\n      andThen(function () {\n        assert.equal(currentURL(), '/pricing/lab');\n        assert.equal(find('.price-name:contains(Blood test)').length, 1, 'Price exists to delete');\n        click('button:contains(Delete)');\n      });\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.alert').text().trim(), 'Are you sure you wish to delete Blood test?', 'Pricing item is displayed for deletion');\n      });\n      click('button:contains(Delete):last');\n      waitToDisappear('.price-name:contains(Blood test)');\n      andThen(function () {\n        assert.equal(find('.price-name:contains(Blood test)').length, 0, 'Price disappears from price list');\n      });\n    });\n  });\n\n  (0, _qunit.test)('create new pricing profile', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/pricing/profiles');\n      andThen(function () {\n        assert.equal(currentURL(), '/pricing/profiles');\n        click('button:contains(+ new item)');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'New Pricing Profile', 'New Pricing Profile modal appears');\n        });\n        fillIn('.pricing-profile-name input', 'Quarter Off');\n        fillIn('.pricing-profile-percentage input', 25);\n        fillIn('.pricing-profile-discount input', 10);\n        andThen(function () {\n          click('button:contains(Add)');\n        });\n        waitToAppear('.modal-title:contains(Pricing Profile Saved)');\n        click('button:contains(Ok)');\n        waitToAppear('.pricing-profile-name:contains(Quarter Off)');\n        andThen(function () {\n          assert.equal(find('.pricing-profile-name:contains(Quarter Off)').text(), 'Quarter Off', 'New price profile displays');\n        });\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete pricing profile', function (assert) {\n    runWithPouchDump('billing', function () {\n      authenticateUser();\n      visit('/pricing/profiles');\n      andThen(function () {\n        assert.equal(currentURL(), '/pricing/profiles');\n        assert.equal(find('.pricing-profile-name:contains(Half off)').length, 1, 'Pricing profile exists to delete');\n        click('button:contains(Delete)');\n      });\n      waitToAppear('.modal-dialog');\n      andThen(function () {\n        assert.equal(find('.modal-title').text().trim(), 'Delete Profile', 'Pricing Profile delete confirmation is displayed');\n      });\n      click('button:contains(Ok)');\n      waitToDisappear('.pricing-profile-name:contains(Half off)');\n      andThen(function () {\n        assert.equal(find('.pricing-profile-name:contains(Half off)').length, 0, 'Pricing profile disappears from list');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/pricing-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/pricing-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/pricing-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/procedure-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | procedures', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  testWithVisit('Add procedure', function (assert) {\n    var procedureDesc = 'Release Left Elbow Bursa and Ligament, Percutaneous Approach';\n    assert.equal(find('#visit-procedures tr').length, 2, 'One procedure is listed for the visit');\n    click('button:contains(New Procedure)');\n    andThen(function () {\n      typeAheadFillIn('.procedure-description', procedureDesc);\n      typeAheadFillIn('.procedure-physician', 'Dr Jones');\n      updateProcedure(assert, 'Add');\n    });\n    andThen(function () {\n      click('button:contains(Return)');\n    });\n    andThen(function () {\n      assert.equal(find('#visit-procedures tr').length, 3, 'Two procedure are listed for the visit');\n      assert.equal(find('#visit-procedures td:contains(' + procedureDesc + ')').length, 1, 'New procedure description is listed for the visit');\n    });\n  });\n\n  testWithVisit('Edit procedure', function (assert) {\n    click('#visit-procedures button:contains(Edit)');\n    andThen(function () {\n      assert.equal(currentURL(), '/visits/procedures/edit/398B4F58-152F-1476-8ED1-329C4D85E25F', 'Procedure url is correct');\n      fillIn('.procedure-notes', 'Abdominals blood glucose level blood pressure carbohydrate medications');\n    });\n    andThen(function () {\n      click('button:contains(Add Item)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Add Charge Item', 'Add Charge Item modal appears');\n      typeAheadFillIn('.charge-item-name', 'Gauze pad');\n      click('.modal-footer button:contains(Add)');\n      waitToAppear('td.charge-item-name');\n    });\n    andThen(function () {\n      assert.equal(find('td.charge-item-name').text(), 'Gauze pad', 'New charge item appears');\n      click('.charge-items button:contains(Edit)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Edit Charge Item', 'Edit Charge Item modal appears');\n      typeAheadFillIn('.charge-item-name', 'Gauze padding');\n      click('.modal-footer button:contains(Update)');\n      waitToAppear('td.charge-item-name:contains(Gauze padding)');\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('td.charge-item-name').text(), 'Gauze padding', 'Updated charge item appears');\n      assert.equal(find('.medication-charges tr').length, 2, 'One medication charge exists');\n      assert.equal(find('.medication-charges button:contains(Add Medication)').length, 1, 'Add medication button exists');\n      click('button:contains(Add Medication)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Add Medication Used', 'Add Medication Used modal appears');\n      typeAheadFillIn('.medication-used', 'Cefazolin 500mg vial (Hazolin) - m00001 (999998 available)');\n      click('.modal-footer button:contains(Add)');\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.medication-charges tr').length, 3, 'Two medication charges exists');\n      click('.medication-charges button:contains(Edit)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Edit Medication Used', 'Edit Medication Used modal appears here');\n      fillIn('.medication-quantity input', 2);\n      click('.modal-footer button:contains(Update)');\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.medication-charge-quantity:first').text(), '2', 'Updated medication quantity appears');\n      updateProcedure(assert, 'Update');\n    });\n    andThen(function () {\n      click('.charge-items tr:last button:contains(Delete)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Delete Charge Item', 'Delete Charge Item dialog displays');\n      click('.modal-footer button:contains(Ok)');\n    });\n    andThen(function () {\n      click('.medication-charges button:contains(Delete)');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Delete Medication Used', 'Delete Medication Used dialog displays');\n      click('.modal-footer button:contains(Ok)');\n    });\n    andThen(function () {\n      assert.equal(find('td.charge-item-name').length, 0, 'Charge item is deleted');\n      assert.equal(find('.medication-charges tr').length, 2, 'Medication used is deleted');\n    });\n  });\n\n  testWithVisit('Delete procedure', function (assert) {\n    assert.equal(find('#visit-procedures tr').length, 2, 'One procedure is displayed to delete');\n    click('#visit-procedures button:contains(Delete)');\n    waitToAppear('.modal-dialog');\n    andThen(function () {});\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Delete Procedure', 'Delete Procedure confirmation displays');\n      click('.modal-footer button:contains(Delete)');\n      waitToDisappear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('#visit-procedures tr').length, 1, 'Procedure is deleted');\n    });\n  });\n\n  function testWithVisit(testLabel, testFunction) {\n    (0, _qunit.test)(testLabel, function (assert) {\n      runWithPouchDump('patient', function () {\n        authenticateUser();\n        visit('/patients');\n        andThen(function () {\n          assert.equal(currentURL(), '/patients', 'Patient url is correct');\n          click('button:contains(Edit)');\n        });\n        andThen(function () {\n          assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient record displays');\n          click('[data-test-selector=visits-tab]');\n          waitToAppear('#visits button:contains(Edit)');\n        });\n        andThen(function () {\n          click('#visits button:contains(Edit)');\n        });\n        andThen(function () {\n          assert.equal(currentURL(), '/visits/edit/03C7BF8B-04E0-DD9E-9469-96A5604F5340', 'Visit url is correct');\n          testFunction(assert);\n        });\n      });\n    });\n  }\n\n  function updateProcedure(assert, buttonText) {\n    andThen(function () {\n      click('.panel-footer button:contains(' + buttonText + ')');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Procedure Saved', 'Procedure Saved dialog displays');\n      click('button:contains(Ok)');\n    });\n  }\n});","define('hospitalrun/tests/acceptance/procedure-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/procedure-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/procedure-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/role-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | roles', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /admin/roles', function (assert) {\n    runWithPouchDump('admin', function () {\n      authenticateUser();\n      visit('/admin/roles');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/roles');\n        select('.role-select', 'Doctor');\n      });\n      andThen(function () {\n        assert.equal(find('.checkbox-appointments input:checked').length, 0, 'Appointments checkbox is not checked');\n        assert.equal(find('.checkbox-addAppointment input:checked').length, 0, 'Add appointments checkbox is not checked');\n      });\n      click('.checkbox-appointments input');\n      click('.checkbox-addAppointment input');\n      andThen(function () {\n        assert.equal(find('.checkbox-appointments input:checked').length, 1, 'Appointments checkbox is checked');\n        assert.equal(find('.checkbox-addAppointment input:checked').length, 1, 'Add appointments checkbox is checked');\n        click('button:contains(Update)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Role Saved', 'Role has been saved');\n        assert.equal(find('.modal-body').text().trim(), 'The Doctor role has been saved.', 'Doctor role has been saved');\n        click('button:contains(Ok)');\n        invalidateSession();\n        visit('/login');\n      });\n      andThen(function () {\n        authenticateUser({\n          name: 'doctor@hospitalrun.io',\n          roles: ['Doctor', 'user'],\n          role: 'Doctor',\n          prefix: 'p1'\n        });\n      });\n      visit('/appointments/edit/new');\n      andThen(function () {\n        assert.equal(currentURL(), '/appointments/edit/new', 'Doctor can now navigate to new appointments');\n        assert.equal(find('.view-current-title').text(), 'New Appointment', 'New appointment screen displays');\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/role-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/role-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/role-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/users-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app', 'ember-cli-fake-server'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp, _emberCliFakeServer) {\n  'use strict';\n\n  function addAllUsers(assert) {\n    (0, _emberCliFakeServer.stubRequest)('get', '/db/_users/_all_docs', function (request) {\n      var expectedQuery = {\n        include_docs: 'true',\n        startkey: '\"org.couchdb.user\"'\n      };\n      assert.equal(JSON.stringify(request.queryParams), JSON.stringify(expectedQuery), 'All Users request sent to the server');\n      request.ok({\n        'total_rows': 1,\n        'offset': 1,\n        'rows': [{\n          'id': 'org.couchdb.user:hradmin',\n          'key': 'org.couchdb.user:hradmin',\n          'value': { 'rev': '1-242f3d5b5eb8596144f8a6300f9f5a2f' },\n          'doc': {\n            '_id': 'org.couchdb.user:hradmin',\n            '_rev': '1-242f3d5b5eb8596144f8a6300f9f5a2f',\n            'password_scheme': 'pwdscheme',\n            'iterations': 10,\n            'name': 'hradmin',\n            'roles': ['System Administrator', 'admin', 'user'],\n            'type': 'user',\n            'userPrefix': 'p',\n            'derived_key': 'derivedkeyhere',\n            'salt': 'saltgoeshere',\n            'displayName': 'HospitalRun Administrator',\n            'email': 'hradmin@hospitalrun.io'\n          }\n        }, {\n          'id': 'org.couchdb.user:joe@donuts.com',\n          'key': 'org.couchdb.user:joe@donuts.com',\n          'value': {\n            'rev': '1-ef3d54502f2cc8e8f73d8547881f0836'\n          },\n          'doc': {\n            '_id': 'org.couchdb.user:joe@donuts.com',\n            '_rev': '1-ef3d54502f2cc8e8f73d8547881f0836',\n            'password_scheme': 'pbkdf2',\n            'iterations': 10,\n            'displayName': 'Joe Bagadonuts',\n            'email': 'joe@donuts.com',\n            'name': 'joe@donuts.com',\n            'roles': ['Hospital Administrator', 'user'],\n            'userPrefix': 'p01',\n            'type': 'user',\n            'derived_key': 'derivedkeyhere',\n            'salt': 'saltgoeshere'\n          }\n        }]\n      });\n    });\n  }\n\n  (0, _qunit.module)('Acceptance | users', {\n    beforeEach: function beforeEach() {\n      _emberCliFakeServer['default'].start();\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _emberCliFakeServer['default'].stop();\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('visiting /admin/users', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      addAllUsers(assert);\n\n      visit('/admin/users');\n      andThen(function () {\n        assert.equal(currentURL(), '/admin/users');\n        assert.equal(find('td.user-display-name:first').text(), 'HospitalRun Administrator');\n        assert.equal(find('td.user-name:first').text(), 'hradmin');\n        assert.equal(find('td.user-email:first').text(), 'hradmin@hospitalrun.io');\n        assert.equal(find('td.user-role:first').text(), 'System Administrator');\n      });\n    });\n  });\n\n  (0, _qunit.test)('create new user', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      addAllUsers(assert);\n      visit('/admin/users');\n      (0, _emberCliFakeServer.stubRequest)('put', '/db/_users/org.couchdb.user:jane@donuts.com', function (request) {\n        var expectedBody = {\n          _id: 'org.couchdb.user:jane@donuts.com',\n          deleted: false,\n          displayName: 'Jane Bagadonuts',\n          email: 'jane@donuts.com',\n          name: 'jane@donuts.com',\n          password: 'password',\n          roles: ['Hospital Administrator', 'user'],\n          userPrefix: 'p02',\n          type: 'user'\n        };\n        assert.equal(request.requestBody, JSON.stringify(expectedBody), 'New user data sent to the server');\n        request.ok({\n          'ok': true,\n          'id': 'org.couchdb.user:jane@donuts.com',\n          'rev': '1-ef3d54502f2cc8e8f73d8547881f0836'\n        });\n      });\n\n      visit('/admin/users/edit/new');\n      andThen(function () {\n        select('.user-role', 'Hospital Administrator');\n        fillIn('.user-display-name input', 'Jane Bagadonuts');\n        fillIn('.user-email input', 'jane@donuts.com');\n        fillIn('.user-password input', 'password');\n        click('button:contains(Add)');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.modal-title').text(), 'User Saved', 'User was saved successfully');\n        });\n        click('button:contains(Ok)');\n      });\n    });\n  });\n\n  (0, _qunit.test)('delete user', function (assert) {\n    runWithPouchDump('default', function () {\n      authenticateUser();\n      addAllUsers(assert);\n      (0, _emberCliFakeServer.stubRequest)('put', '/db/_users/org.couchdb.user:joe@donuts.com', function (request) {\n        var expectedBody = {\n          _id: 'org.couchdb.user:joe@donuts.com',\n          derived_key: 'derivedkeyhere',\n          deleted: true,\n          displayName: 'Joe Bagadonuts',\n          email: 'joe@donuts.com',\n          iterations: 10,\n          name: 'joe@donuts.com',\n          password_scheme: 'pbkdf2',\n          _rev: '1-ef3d54502f2cc8e8f73d8547881f0836',\n          roles: ['deleted'],\n          salt: 'saltgoeshere',\n          userPrefix: 'p01',\n          type: 'user'\n        };\n        assert.equal(request.requestBody, JSON.stringify(expectedBody), 'Delete user request sent to the server');\n        request.ok({\n          'ok': true,\n          'id': 'org.couchdb.user:joe@donuts.com',\n          'rev': '1-ef3d54502f2cc8e8f73d8547881f0836'\n        });\n      });\n\n      visit('/admin/users');\n      andThen(function () {\n        click('button:contains(Delete):last');\n        waitToAppear('.modal-dialog');\n        andThen(function () {\n          assert.equal(find('.alert').text().trim(), 'Are you sure you wish to delete the user joe@donuts.com?', 'User is displayed for deletion');\n        });\n        click('button:contains(Delete):last');\n        andThen(function () {\n          assert.equal(find('.user-email:contains(joe@donuts.com)').length, 0, 'User disappears from user list');\n        });\n      });\n    });\n  });\n});","define('hospitalrun/tests/acceptance/users-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/users-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/users-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/acceptance/visit-test', ['exports', 'ember', 'qunit', 'hospitalrun/tests/helpers/start-app'], function (exports, _ember, _qunit, _hospitalrunTestsHelpersStartApp) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | visits', {\n    beforeEach: function beforeEach() {\n      this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n    },\n\n    afterEach: function afterEach() {\n      _ember['default'].run(this.application, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('Add visit', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      visit('/patients');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients', 'Patient url is correct');\n        click('button:contains(Edit)');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient record displays');\n        click('[data-test-selector=visits-tab]');\n        waitToAppear('#visits button:contains(Edit)'); // Make sure visits have been retrieved.\n      });\n      andThen(function () {\n        click('#visits button:contains(New Visit)');\n        waitToAppear('#visit-info');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-name').text(), 'Joe Bagadonuts', 'Joe Bagadonuts displays as patient for visit');\n        updateVisit(assert, 'Add');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Edit visit', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      visit('/patients');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients', 'Patient url is correct');\n        click('button:contains(Edit)');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient record displays');\n        click('[data-test-selector=visits-tab]');\n        waitToAppear('#visits button:contains(Edit)');\n      });\n      andThen(function () {\n        click('#visits button:contains(Edit)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/visits/edit/03C7BF8B-04E0-DD9E-9469-96A5604F5340', 'Visit url is correct');\n        click('button:contains(Add Diagnosis)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Add Diagnosis', 'Add Diagnosis dialog displays');\n        fillIn('.diagnosis-text input', 'Broken Arm');\n        click('.modal-footer button:contains(Add)');\n      });\n      andThen(function () {\n        assert.equal(find('.additional-diagnoses-text').text(), 'Broken Arm', 'New additional diagnosis appears');\n        click('button:contains(New Medication)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/medication/edit/new', 'New medication url is correct');\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'New medication prepopulates with patient');\n        click('button:contains(Cancel)');\n      });\n      andThen(function () {\n        click('button:contains(New Lab)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/labs/edit/new', 'New lab url is correct');\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'New lab prepopulates with patient');\n        click('button:contains(Cancel)');\n      });\n      andThen(function () {\n        click('button:contains(New Imaging)');\n      });\n      andThen(function () {\n        assert.equal(currentURL(), '/imaging/edit/new', 'New imaging url is correct');\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'New imaging prepopulates with patient');\n        click('button:contains(Cancel)');\n      });\n      andThen(function () {\n        click('button:contains(New Vitals)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        fillIn('.temperature-text input', '34.56');\n        fillIn('.weight-text input', '34.56');\n        fillIn('.height-text input', '34.56');\n        fillIn('.sbp-text input', '34.56');\n        fillIn('.dbp-text input', '34.56');\n        fillIn('.heart-rate-text input', '34.56');\n        fillIn('.respiratory-rate-text input', '34.56');\n        click('.modal-footer button:contains(Add)');\n        waitToAppear('#visit-vitals tr:last td:contains(34.56)');\n      });\n      andThen(function () {\n        assert.equal(find('#visit-vitals tr:last td:contains(34.56)').length, 7, 'New vitals appears');\n        click('button:contains(Add Item)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        typeAheadFillIn('.charge-item-name', 'Gauze pad');\n        click('.modal-footer button:contains(Add)');\n        waitToAppear('td.charge-item-name');\n      });\n      andThen(function () {\n        assert.equal(find('td.charge-item-name').text(), 'Gauze pad', 'New charge item appears');\n      });\n      updateVisit(assert, 'Update');\n      andThen(function () {\n        click('.delete-additional-diagnosis');\n      });\n      andThen(function () {\n        click('#visit-vitals tr:last button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Vitals', 'Delete Vitals dialog displays');\n        click('.modal-footer button:contains(Delete)');\n      });\n      andThen(function () {\n        click('.charge-items tr:last button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Charge Item', 'Delete Charge Item dialog displays');\n        click('.modal-footer button:contains(Ok)');\n      });\n      andThen(function () {\n        assert.equal(find('.additional-diagnoses-text').length, 0, 'New additional diagnosis is deleted');\n        assert.equal(find('#visit-vitals tr:last td:contains(34.56)').length, 0, 'Vital is deleted');\n        assert.equal(find('td.charge-item-name').length, 0, 'Charge item is deleted');\n      });\n    });\n  });\n\n  (0, _qunit.test)('Delete visit', function (assert) {\n    runWithPouchDump('patient', function () {\n      authenticateUser();\n      visit('/patients');\n      andThen(function () {\n        assert.equal(currentURL(), '/patients', 'Patient url is correct');\n        click('button:contains(Edit)');\n      });\n      andThen(function () {\n        assert.equal(find('.patient-name .ps-info-data').text(), 'Joe Bagadonuts', 'Joe Bagadonuts patient record displays');\n        click('[data-test-selector=visits-tab]');\n        waitToAppear('#visits button:contains(Delete)'); // Make sure visits have been retrieved.\n      });\n      andThen(function () {\n        assert.equal(find('#visits tr').length, 2, 'One visit is displayed to delete');\n        click('#visits button:contains(Delete)');\n        waitToAppear('.modal-dialog');\n      });\n      andThen(function () {\n        assert.equal(find('.modal-title').text(), 'Delete Visit', 'Delete Visit confirmation displays');\n        click('.modal-footer button:contains(Delete)');\n        waitToDisappear('#visits td:contains(Fall from in-line roller-skates, initial encounter)');\n      });\n      andThen(function () {\n        assert.equal(find('#visits tr').length, 1, 'Visit is deleted');\n      });\n    });\n  });\n\n  function updateVisit(assert, buttonText) {\n    andThen(function () {\n      click('.panel-footer button:contains(' + buttonText + ')');\n      waitToAppear('.modal-dialog');\n    });\n    andThen(function () {\n      assert.equal(find('.modal-title').text(), 'Visit Saved', 'Visit Saved dialog displays');\n      click('button:contains(Ok)');\n    });\n  }\n});","define('hospitalrun/tests/acceptance/visit-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - acceptance/visit-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/visit-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/adapters/application', ['exports', 'ember', 'ember-pouch', 'hospitalrun/mixins/pouch-adapter-utils'], function (exports, _ember, _emberPouch, _hospitalrunMixinsPouchAdapterUtils) {\n  'use strict';\n\n  var bind = _ember['default'].run.bind;\n  exports['default'] = _emberPouch.Adapter.extend(_hospitalrunMixinsPouchAdapterUtils['default'], {\n    database: _ember['default'].inject.service(),\n    db: _ember['default'].computed.reads('database.mainDB'),\n\n    _specialQueries: ['containsValue', 'mapReduce'],\n\n    _esDefaultSize: 25,\n\n    _executeContainsSearch: function _executeContainsSearch(store, type, query) {\n      var _this = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var typeName = _this.getRecordTypeName(type);\n        var searchUrl = '/search/hrdb/' + typeName + '/_search';\n        if (query.containsValue && query.containsValue.value) {\n          (function () {\n            var queryString = '';\n            query.containsValue.keys.forEach(function (key) {\n              if (!_ember['default'].isEmpty(queryString)) {\n                queryString = queryString + ' OR ';\n              }\n              var queryValue = query.containsValue.value;\n              switch (key.type) {\n                case 'contains':\n                  {\n                    queryValue = '*' + queryValue + '*';\n                    break;\n                  }\n                case 'fuzzy':\n                  {\n                    queryValue = queryValue + '~';\n                    break;\n                  }\n              }\n              queryString = queryString + 'data.' + key.name + ':' + queryValue;\n            });\n            var successFn = function successFn(results) {\n              if (results && results.hits && results.hits.hits) {\n                var resultDocs = _ember['default'].A(results.hits.hits).map(function (hit) {\n                  var mappedResult = hit._source;\n                  mappedResult.id = mappedResult._id;\n                  return mappedResult;\n                });\n                var response = {\n                  rows: resultDocs\n                };\n                _this._handleQueryResponse(response, store, type).then(resolve, reject);\n              } else if (results.rows) {\n                _this._handleQueryResponse(results, store, type).then(resolve, reject);\n              } else {\n                reject('Search results are not valid');\n              }\n            };\n\n            if (_ember['default'].isEmpty(query.size)) {\n              query.size = _this.get('_esDefaultSize');\n            }\n\n            _ember['default'].$.ajax(searchUrl, {\n              dataType: 'json',\n              data: {\n                q: queryString,\n                size: _this.get('_esDefaultSize')\n              },\n              success: successFn\n            });\n          })();\n        } else {\n          reject('invalid query');\n        }\n      });\n    },\n\n    _handleQueryResponse: function _handleQueryResponse(response, store, type) {\n      var _this2 = this;\n\n      var database = this.get('database');\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        if (response.rows.length > 0) {\n          (function () {\n            var ids = response.rows.map(function (row) {\n              return database.getEmberId(row.id);\n            });\n            _this2.findRecord(store, type, ids).then(function (findResponse) {\n              var primaryRecordName = type.modelName.camelize().pluralize();\n              var sortedValues = [];\n              // Sort response in order of ids\n              ids.forEach(function (id) {\n                var resolvedRecord = findResponse[primaryRecordName].findBy('id', id);\n                sortedValues.push(resolvedRecord);\n              });\n              findResponse[primaryRecordName] = sortedValues;\n              resolve(findResponse);\n            }, reject);\n          })();\n        } else {\n          var emptyResponse = {};\n          emptyResponse[type.modelName] = [];\n          resolve(emptyResponse);\n        }\n      });\n    },\n\n    /**\n     * @private\n     * Look for nulls and maxvalues in start key because those keys can't be handled by the sort/list function\n     */\n    _doesStartKeyContainSpecialCharacters: function _doesStartKeyContainSpecialCharacters(startkey) {\n      var haveSpecialCharacters = false;\n      var maxValue = this.get('maxValue');\n      if (!_ember['default'].isEmpty(startkey) && _ember['default'].isArray(startkey)) {\n        startkey.forEach(function (keyvalue) {\n          if (keyvalue === null || keyvalue === maxValue) {\n            haveSpecialCharacters = true;\n          }\n        });\n      }\n      return haveSpecialCharacters;\n    },\n\n    _startChangesToStoreListener: function _startChangesToStoreListener() {\n      var db = this.get('db');\n      if (db) {\n        this.changes = db.changes({\n          since: 'now',\n          live: true,\n          returnDocs: false\n        }).on('change', bind(this, 'onChange')).on('error', _ember['default'].K); // Change sometimes throws weird 500 errors that we can ignore\n        db.changesListener = this.changes;\n      }\n    },\n\n    generateIdForRecord: function generateIdForRecord() {\n      return uuid.v4();\n    },\n\n    query: function query(store, type, _query, options) {\n      var _this3 = this;\n\n      var specialQuery = false;\n      for (var i = 0; i < this._specialQueries.length; i++) {\n        if (_ember['default'].get(_query, this._specialQueries[i])) {\n          specialQuery = true;\n          break;\n        }\n      }\n\n      if (!specialQuery) {\n        if (_query.options) {\n          this._init(store, type);\n          var recordTypeName = this.getRecordTypeName(type);\n          return this.get('db').rel.find(recordTypeName, _query.options);\n        } else {\n          return this._super(store, type, _query, options);\n        }\n      } else {\n        var _ret3 = (function () {\n          var mapReduce = null;\n          var queryParams = {};\n          if (_query.options) {\n            queryParams = _ember['default'].copy(_query.options);\n            if (_query.sortKey || _query.filterBy) {\n              if (_query.sortDesc) {\n                queryParams.sortDesc = _query.sortDesc;\n              }\n              if (_query.sortKey) {\n                queryParams.sortKey = _query.sortKey;\n              }\n              if (!_this3._doesStartKeyContainSpecialCharacters(queryParams.startkey)) {\n                queryParams.sortLimit = queryParams.limit;\n                delete queryParams.limit;\n                queryParams.sortStartKey = JSON.stringify(queryParams.startkey);\n                delete queryParams.startkey;\n              } else if (queryParams.startkey) {\n                queryParams.startkey = JSON.stringify(queryParams.startkey);\n              }\n              if (_query.filterBy) {\n                queryParams.filterBy = JSON.stringify(_query.filterBy);\n              }\n              if (queryParams.endkey) {\n                queryParams.endkey = JSON.stringify(queryParams.endkey);\n              }\n              _query.useList = true;\n            }\n          }\n          queryParams.reduce = false;\n          queryParams.include_docs = false;\n          if (_query.mapReduce) {\n            mapReduce = _query.mapReduce;\n          } else if (_query.containsValue) {\n            return {\n              v: _this3._executeContainsSearch(store, type, _query)\n            };\n          }\n          return {\n            v: new _ember['default'].RSVP.Promise(function (resolve, reject) {\n              var db = _this3.get('db');\n              try {\n                if (mapReduce) {\n                  if (_query.useList) {\n                    queryParams.include_docs = true;\n                    var listParams = {\n                      query: queryParams\n                    };\n                    db.list(mapReduce + '/sort/' + mapReduce, listParams, function (err, response) {\n                      if (err) {\n                        _this3._pouchError(reject)(err);\n                      } else {\n                        var responseJSON = JSON.parse(response.body);\n                        _this3._handleQueryResponse(responseJSON, store, type).then(resolve, reject);\n                      }\n                    });\n                  } else {\n                    db.query(mapReduce, queryParams, function (err, response) {\n                      if (err) {\n                        _this3._pouchError(reject)(err);\n                      } else {\n                        _this3._handleQueryResponse(response, store, type).then(resolve, reject);\n                      }\n                    });\n                  }\n                } else {\n                  db.allDocs(queryParams, function (err, response) {\n                    if (err) {\n                      _this3._pouchError(reject)(err);\n                    } else {\n                      _this3._handleQueryResponse(response, store, type).then(resolve, reject);\n                    }\n                  });\n                }\n              } catch (err) {\n                _this3._pouchError(reject)(err);\n              }\n            }, 'findQuery in application-pouchdb-adapter')\n          };\n        })();\n\n        if (typeof _ret3 === 'object') return _ret3.v;\n      }\n    }\n  });\n});","define('hospitalrun/tests/adapters/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - adapters/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/adapters/user', ['exports', 'ember', 'ember-data', 'hospitalrun/mixins/user-session'], function (exports, _ember, _emberData, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _emberData['default'].RESTAdapter.extend(_hospitalrunMixinsUserSession['default'], {\n    database: _ember['default'].inject.service(),\n    session: _ember['default'].inject.service(),\n    endpoint: '/db/_users/',\n    defaultSerializer: 'couchdb',\n    oauthHeaders: _ember['default'].computed.alias('database.oauthHeaders'),\n\n    ajaxError: function ajaxError(jqXHR) {\n      var error = this._super(jqXHR);\n      if (jqXHR && jqXHR.status === 401) {\n        var jsonErrors = _ember['default'].$.parseJSON(jqXHR.responseText);\n        window.Hospitalrun.__container__.lookup('controller:application').transitionToRoute('login');\n        return new _emberData['default'].InvalidError(jsonErrors);\n      } else {\n        return error;\n      }\n    },\n\n    /**\n    @method ajaxOptions Overriden here so that we can specify xhr with credentials\n    @private\n    @param {String} url\n    @param {String} type The request type GET, POST, PUT, DELETE etc.\n    @param {Object} options\n    @return {Object} hash\n    */\n    ajaxOptions: function ajaxOptions(url, type, options) {\n      options = options || {};\n      options.xhrFields = { withCredentials: true };\n      return this._super(url, type, options);\n    },\n\n    /**\n     Called by the store when a newly created record is\n     saved via the `save` method on a model record instance.\n      The `createRecord` method serializes the record and makes an Ajax (HTTP POST) request\n     to a URL computed by `buildURL`.\n      See `serialize` for information on how to customize the serialized form\n     of a record.\n      @method createRecord\n     @param {DS.Store} store\n     @param {subclass of DS.Model} type\n     @param {DS.Model} record\n     @returns {Promise} promise\n    */\n    createRecord: function createRecord(store, type, record) {\n      return this.updateRecord(store, type, record);\n    },\n\n    /**\n    Called by the store when a record is deleted.\n    @method deleteRecord\n    @param {DS.Store} store\n    @param {subclass of DS.Model} type\n    @param {DS.Snapshot} record\n    @returns {Promise} promise\n    */\n    deleteRecord: function deleteRecord(store, type, snapshot) {\n      return this.updateRecord(store, type, snapshot, true);\n    },\n\n    /**\n    Called by the store in order to fetch the JSON for a given\n    type and ID.\n     The `find` method makes an Ajax request to a URL computed by `buildURL`, and returns a\n    promise for the resulting payload.\n     This method performs an HTTP `GET` request with the id provided as part of the query string.\n     @method find\n    @param {DS.Store} store\n    @param {subclass of DS.Model} type\n    @param {String} id\n    @returns {Promise} promise\n    */\n    find: function find(store, type, id) {\n      var findUrl = this.endpoint + id;\n      return this.ajax(findUrl, 'GET');\n    },\n\n    headers: (function () {\n      var oauthHeaders = this.get('oauthHeaders');\n      if (_ember['default'].isEmpty(oauthHeaders)) {\n        return {};\n      } else {\n        return oauthHeaders;\n      }\n    }).property('oauthHeaders'),\n\n    /**\n     Called by the store when an existing record is saved\n     via the `save` method on a model record instance.\n      The `updateRecord` method serializes the record and makes an Ajax (HTTP PUT) request\n     to a URL computed by `buildURL`.\n      See `serialize` for information on how to customize the serialized form\n     of a record.\n      @method updateRecord\n     @param {DS.Store} store\n     @param {subclass of DS.Model} type\n     @param {DS.Snapshot} record\n     @param {boolean} deleteUser true if we are deleting the user.\n     @returns {Promise} promise\n    */\n    updateRecord: function updateRecord(store, type, record, deleteUser) {\n      var data = {};\n      var serializer = store.serializerFor(record.modelName);\n      serializer.serializeIntoHash(data, type, record, { includeId: true });\n      data.type = 'user';\n      if (deleteUser) {\n        data.deleted = true;\n        delete data.oauth;\n        data.roles = ['deleted'];\n      }\n      if (_ember['default'].isEmpty(data._rev)) {\n        delete data._rev;\n      }\n      data = this._cleanPasswordAttrs(data);\n      var putURL = '' + this.endpoint + _ember['default'].get(record, 'id');\n      return this.ajax(putURL, 'PUT', {\n        data: data\n      });\n    },\n\n    /**\n    Called by the store in order to fetch a JSON array for all\n    of the records for a given type.\n     The `findAll` method makes an Ajax (HTTP GET) request to a URL computed by `buildURL`, and returns a\n    promise for the resulting payload.\n     @private\n    @method findAll\n    @param {DS.Store} store //currently unused\n    @param {subclass of DS.Model} type //currently unused\n    @param {String} sinceToken //currently unused\n    @returns {Promise} promise\n    */\n    findAll: function findAll() {\n      var ajaxData = {\n        data: {\n          include_docs: true,\n          startkey: '\"org.couchdb.user\"'\n        }\n      };\n      var allURL = this.endpoint + '_all_docs';\n      return this.ajax(allURL, 'GET', ajaxData);\n    },\n\n    /**\n     Remove null/empty password fields from payload sent to server\n     */\n    _cleanPasswordAttrs: function _cleanPasswordAttrs(data) {\n      var attrsToCheck = ['derived_key', 'password', 'password_scheme', 'password_sha', 'salt', 'iterations'];\n      attrsToCheck.forEach(function (attr) {\n        if (_ember['default'].isEmpty(data[attr])) {\n          delete data[attr];\n        }\n      });\n      return data;\n    },\n\n    shouldReloadAll: function shouldReloadAll() {\n      return true;\n    }\n\n  });\n});","define('hospitalrun/tests/adapters/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - adapters/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/address/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    hideCancelButton: true,\n    updateCapability: 'update_config',\n\n    afterUpdate: function afterUpdate() {\n      this.displayAlert(this.get('i18n').t('admin.address.titles.optionsSaved'), this.get('i18n').t('admin.address.messages.addressSaved'));\n    }\n  });\n});","define('hospitalrun/tests/admin/address/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/address/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/address/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/address/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    hideNewButton: true,\n    newTitle: (0, _emberI18n.translationMacro)('admin.address.newTitle'),\n    editTitle: (0, _emberI18n.translationMacro)('admin.address.editTitle'),\n    model: function model() {\n      return new _ember['default'].RSVP.Promise((function (resolve) {\n        this.get('store').find('option', 'address_options').then(function (addressOptions) {\n          resolve(addressOptions);\n        }, (function () {\n          var store = this.get('store');\n          var newConfig = store.push(store.normalize('option', {\n            id: 'address_options',\n            value: {\n              address1Label: this.get('i18n').t('admin.address.addressLabel'),\n              address1Include: true\n            }\n          }));\n          resolve(newConfig);\n        }).bind(this));\n      }).bind(this));\n    }\n  });\n});","define('hospitalrun/tests/admin/address/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/address/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/address/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/loaddb/controller', ['exports', 'ember', 'ember-i18n', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/progress-dialog'], function (exports, _ember, _emberI18n, _hospitalrunMixinsModalHelper, _hospitalrunMixinsProgressDialog) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsProgressDialog['default'], {\n    database: _ember['default'].inject.service(),\n    fileSystem: _ember['default'].inject.service('filesystem'),\n    progressMessage: (0, _emberI18n.translationMacro)('admin.loaddb.progressMessage'),\n    progressTitle: (0, _emberI18n.translationMacro)('admin.loaddb.progressTitle'),\n    syncResults: null,\n    fileImportedName: null,\n\n    actions: {\n      loadFile: function loadFile() {\n        var _this = this;\n\n        var fileSystem = this.get('fileSystem');\n        var fileToImport = this.get('importFile');\n        if (!fileToImport || !fileToImport.type) {\n          this.displayAlert(this.get('i18n').t('admin.loaddb.displayAlertTitle'), this.get('i18n').t('admin.loaddb.displayAlertMessage'));\n        } else {\n          this.showProgressModal();\n          this.set('syncResults');\n          this.set('fileImportedName');\n          fileSystem.fileToString(fileToImport).then(function (fileAsString) {\n            var database = _this.get('database');\n            var fileName = _this.get('importFile.name');\n            _this.set('fileImportedName', fileName);\n            _this.set('importFile');\n            _this.set('model.importFileName');\n            database.loadDBFromDump(fileAsString).then(function (results) {\n              _this.closeProgressModal();\n              _this.set('syncResults', results);\n            })['catch'](function (err) {\n              _this.displayAlert(_this.get('i18n').t('admin.loaddb.errorDisplayAlertTitle'), _this.get('i18n').t('admin.loaddb.errorDisplayAlertMessage', { error: JSON.stringify(err) }));\n            });\n          });\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/loaddb/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/loaddb/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/loaddb/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/loaddb/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    hideNewButton: true,\n    editTitle: (0, _emberI18n.translationMacro)('admin.loaddb.editTitle'),\n\n    beforeModel: function beforeModel() {\n      if (!this.currentUserCan('load_db')) {\n        this.transitionTo('application');\n      }\n    },\n\n    // No model needed for import.\n    model: function model() {\n      return _ember['default'].RSVP.resolve(_ember['default'].Object.create({}));\n    }\n  });\n});","define('hospitalrun/tests/admin/loaddb/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/loaddb/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/loaddb/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/lookup/controller', ['exports', 'ember', 'hospitalrun/mixins/billing-categories', 'hospitalrun/mixins/lab-pricing-types', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/imaging-pricing-types', 'hospitalrun/mixins/inventory-type-list', 'hospitalrun/mixins/unit-types', 'hospitalrun/mixins/visit-types', 'ember-keyboard'], function (exports, _ember, _hospitalrunMixinsBillingCategories, _hospitalrunMixinsLabPricingTypes, _hospitalrunMixinsModalHelper, _hospitalrunMixinsImagingPricingTypes, _hospitalrunMixinsInventoryTypeList, _hospitalrunMixinsUnitTypes, _hospitalrunMixinsVisitTypes, _emberKeyboard) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsBillingCategories['default'], _emberKeyboard.EKMixin, _hospitalrunMixinsImagingPricingTypes['default'], _hospitalrunMixinsInventoryTypeList['default'], _hospitalrunMixinsLabPricingTypes['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsUnitTypes['default'], _hospitalrunMixinsVisitTypes['default'], {\n    fileSystem: _ember['default'].inject.service('filesystem'),\n    lookupTypes: _ember['default'].computed(function () {\n      return [{\n        name: this.get('i18n').t('admin.lookup.anesthesiaTypes'),\n        value: 'anesthesia_types',\n        model: {\n          procedure: 'anesthesiaType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.anesthesiologists'),\n        value: 'anesthesiologists',\n        model: {\n          procedure: 'anesthesiologist'\n        }\n      }, {\n        defaultValues: 'defaultBillingCategories',\n        name: this.get('i18n').t('admin.lookup.billingCategories'),\n        value: 'billing_categories',\n        models: {\n          'billing-line-item': 'category'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.clinicList'),\n        value: 'clinic_list',\n        models: { // Models that use this lookup -- use this later to update models on lookup changes\n          patient: 'clinic'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.countryList'),\n        value: 'country_list',\n        models: {\n          patient: 'country'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.diagnosisList'),\n        value: 'diagnosis_list',\n        models: {\n          visit: 'primaryDiagnosis'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.cptCodeList'),\n        value: 'cpt_code_list',\n        models: {\n          procedure: 'cptCode'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.expenseAccountList'),\n        value: 'expense_account_list',\n        models: {\n          'inv-request': 'expenseAccount',\n          pricing: 'expenseAccount'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.aisleLocationList'),\n        value: 'aisle_location_list',\n        models: {\n          inventory: 'aisleLocation',\n          'inv-location': 'aisleLocation',\n          'inv-purchase': 'aisleLocation',\n          'inv-request': ['deliveryAisle', 'locationsAffected' // Special use case that we need to handle\n          ]\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.warehouseList'),\n        value: 'warehouse_list',\n        models: {\n          inventory: 'location',\n          'inv-location': 'location',\n          'inv-purchase': 'location',\n          'inv-request': ['deliveryLocation', 'locationsAffected' // Special use case that we need to handle\n          ]\n        }\n      }, {\n        defaultValues: 'defaultInventoryTypes',\n        name: this.get('i18n').t('admin.lookup.inventoryTypes'),\n        value: 'inventory_types',\n        models: {\n          inventory: 'inventoryType'\n        }\n      }, {\n        defaultValues: 'defaultImagingPricingTypes',\n        name: this.get('i18n').t('admin.lookup.imagingPricingTypes'),\n        value: 'imaging_pricing_types',\n        models: {\n          pricing: 'pricingType'\n        }\n      }, {\n        defaultValues: 'defaultLabPricingTypes',\n        name: this.get('i18n').t('admin.lookup.labPricingTypes'),\n        value: 'lab_pricing_types',\n        models: {\n          pricing: 'pricingType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.patientStatusList'),\n        value: 'patient_status_list',\n        models: {\n          patient: 'status'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.physicianList'),\n        value: 'physician_list',\n        models: {\n          appointment: 'provider',\n          visit: 'examiner',\n          procedure: ['assistant', 'physician']\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.procedureList'),\n        value: 'procedure_list',\n        models: {\n          procedure: 'description'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.procedureLocations'),\n        value: 'procedure_locations',\n        models: {\n          procedure: 'location'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.procedurePricingTypes'),\n        value: 'procedure_pricing_types',\n        models: {\n          pricing: 'pricingType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.radiologists'),\n        value: 'radiologists',\n        model: {\n          imaging: 'radiologist'\n        }\n      }, {\n        name: this.get('i18n').t('labels.sex'),\n        value: 'sex',\n        model: {\n          patient: 'sex'\n        }\n      }, {\n        defaultValues: 'defaultUnitList',\n        name: this.get('i18n').t('admin.lookup.unitTypes'),\n        value: 'unit_types',\n        models: {\n          inventory: 'distributionUnit',\n          'inv-purchase': 'distributionUnit'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.vendorList'),\n        value: 'vendor_list',\n        models: {\n          'inv-purchase': 'vendor'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.visitLocationList'),\n        value: 'visit_location_list',\n        models: {\n          appointment: 'location',\n          visit: 'location'\n        }\n      }, {\n        defaultValues: 'defaultVisitTypes',\n        name: this.get('i18n').t('admin.lookup.visitTypes'),\n        value: 'visit_types',\n        models: {\n          visit: 'visitType'\n        }\n      }, {\n        name: this.get('i18n').t('admin.lookup.wardPricingTypes'),\n        value: 'ward_pricing_types',\n        models: {\n          pricing: 'pricingType'\n        }\n      }];\n    }),\n\n    importFile: _ember['default'].computed.alias('lookupTypeList.importFile'),\n\n    lookupTitle: (function () {\n      var lookupType = this.get('model.lookupType');\n      var lookupTypes = this.get('lookupTypes');\n      var lookupDesc = undefined;\n      if (!_ember['default'].isEmpty(lookupType)) {\n        lookupDesc = lookupTypes.findBy('value', lookupType);\n        if (!_ember['default'].isEmpty(lookupDesc)) {\n          return lookupDesc.name;\n        }\n      }\n    }).property('model.lookupType'),\n\n    lookupTypeList: (function () {\n      var lookupType = this.get('model.lookupType');\n      var lookupItem = undefined;\n      if (!_ember['default'].isEmpty(lookupType)) {\n        lookupItem = this.get('model').findBy('id', lookupType);\n        if (_ember['default'].isEmpty(lookupItem) || !lookupItem.get('isLoaded')) {\n          var defaultValues = [];\n          var lookupTypes = this.get('lookupTypes');\n          var lookupDesc = lookupTypes.findBy('value', lookupType);\n          var store = this.get('store');\n          if (!_ember['default'].isEmpty(lookupDesc) && !_ember['default'].isEmpty(lookupDesc.defaultValues)) {\n            defaultValues = this.get(lookupDesc.defaultValues);\n          }\n          lookupItem = store.push(store.normalize('lookup', {\n            id: lookupType,\n            value: defaultValues\n          }));\n        }\n        if (!_ember['default'].isEmpty(lookupItem) && _ember['default'].isEmpty(lookupItem.get('userCanAdd'))) {\n          lookupItem.set('userCanAdd', true);\n        }\n        this.set('model.userCanAdd', lookupItem.get('userCanAdd'));\n        this.set('model.organizeByType', lookupItem.get('organizeByType'));\n        return lookupItem;\n      }\n    }).property('model.lookupType'),\n\n    lookupTypeValues: (function () {\n      var values = this.get('lookupTypeList.value');\n      if (!_ember['default'].isEmpty(values)) {\n        values.sort(this._sortValues);\n      }\n      return _ember['default'].ArrayProxy.create({ content: _ember['default'].A(values) });\n    }).property('model.lookupType', 'lookupTypeList.value'),\n\n    showOrganizeByType: (function () {\n      var lookupType = this.get('model.lookupType');\n      return !_ember['default'].isEmpty(lookupType) && lookupType.indexOf('pricing_types') > 0;\n    }).property('model.lookupType'),\n\n    _canDeleteValue: function _canDeleteValue(value) {\n      var lookupType = this.get('model.lookupType');\n      switch (lookupType) {\n        case 'inventory_types':\n          {\n            if (value === 'Medication') {\n              this.displayAlert(this.get('i18n').t('admin.lookup.deleteValueInventoryTypeMedicationTitle'), this.get('i18n').t('admin.lookup.deleteValueInventoryTypeMedicationMessage'));\n              return false;\n            }\n            break;\n          }\n        case 'lab_pricing_types':\n          {\n            if (value === 'Lab Procedure') {\n              this.displayAlert(this.get('i18n').t('admin.lookup.deleteValueLabPricingTypeProcedureTitle'), this.get('i18n').t('admin.lookup.deleteValueLabPricingTypeProcedureMessage'));\n              return false;\n            }\n            break;\n          }\n        case 'imaging_pricing_types':\n          {\n            if (value === 'Imaging Procedure') {\n              this.displayAlert(this.get('i18n').t('admin.lookup.deleteValueImagingPricingTypeProcedureTitle'), this.get('i18n').t('admin.lookup.deleteValueImagingPricingTypeProcedureMessage'));\n              return false;\n            }\n            break;\n          }\n        case 'visit_types':\n          {\n            if (value === 'Admission') {\n              this.displayAlert(this.get('i18n').t('admin.lookup.deleteValueVisitTypeAdmissionTitle'), this.get('i18n').t('admin.lookup.deleteValueVisitTypeAdmissionMessage'));\n              return false;\n            } else if (value === 'Imaging') {\n              this.displayAlert(this.get('i18n').t('admin.lookup.deleteValueVisitTypeImagingTitle'), this.get('i18n').t('admin.lookup.deleteValueVisitTypeImagingMessage'));\n              return false;\n            } else if (value === 'Lab') {\n              this.displayAlert(this.get('i18n').t('admin.lookup.deleteValueVisitTypeLabTitle'), this.get('i18n').t('admin.lookup.deleteValueVisitTypeLabMessage'));\n              return false;\n            } else if (value === 'Pharmacy') {\n              this.displayAlert(this.get('i18n').t('admin.lookup.deleteValueVisitTypePharmacyTitle'), this.get('i18n').t('admin.lookup.deleteValueVisitTypePharmacyMessage'));\n              return false;\n            }\n          }\n      }\n      return true;\n    },\n\n    _sortValues: function _sortValues(a, b) {\n      return _ember['default'].compare(a.toLowerCase(), b.toLowerCase());\n    },\n\n    activateKeyboard: _ember['default'].on('init', function () {\n      this.set('keyboardActivated', true);\n    }),\n\n    updateListKeyboard: _ember['default'].on((0, _emberKeyboard.keyDown)('ctrl+KeyS'), (0, _emberKeyboard.keyDown)('cmd+KeyS'), function (event) {\n      this.send('updateList');\n      event.preventDefault();\n    }),\n\n    actions: {\n      addValue: function addValue() {\n        this.send('openModal', 'admin.lookup.edit', _ember['default'].Object.create({\n          isNew: true\n        }));\n      },\n      deleteValue: function deleteValue(value) {\n        var lookupTypeList = this.get('lookupTypeList');\n        var lookupTypeValues = lookupTypeList.get('value');\n        if (this._canDeleteValue(value)) {\n          lookupTypeValues.removeObject(value.toString());\n          lookupTypeList.save();\n        }\n      },\n      editValue: function editValue(value) {\n        if (!_ember['default'].isEmpty(value)) {\n          this.send('openModal', 'admin.lookup.edit', _ember['default'].Object.create({\n            isNew: false,\n            originalValue: value.toString(),\n            value: value.toString()\n          }));\n        }\n      },\n      importList: function importList() {\n        var fileSystem = this.get('fileSystem');\n        var fileToImport = this.get('importFile');\n        var lookupTypeList = this.get('lookupTypeList');\n        if (!fileToImport || !fileToImport.type) {\n          this.displayAlert(this.get('i18n').t('admin.lookup.alertImportListTitle'), this.get('i18n').t('admin.lookup.alertImportListMessage'));\n        } else {\n          fileSystem.fileToDataURL(fileToImport).then((function (fileDataUrl) {\n            var dataUrlParts = fileDataUrl.split(',');\n            lookupTypeList.setProperties({\n              _attachments: {\n                file: {\n                  content_type: fileToImport.type,\n                  data: dataUrlParts[1]\n                }\n              },\n              importFile: true\n            });\n            lookupTypeList.save().then((function () {\n              this.displayAlert(this.get('i18n').t('admin.lookup.alertImportListSaveTitle'), this.get('i18n').t('admin.lookup.alertImportListSaveMessage'), 'refreshLookupLists');\n              this.set('importFile');\n              this.set('model.importFileName');\n            }).bind(this));\n          }).bind(this));\n        }\n      },\n      updateList: function updateList() {\n        var lookupTypeList = this.get('lookupTypeList');\n        lookupTypeList.set('userCanAdd', this.get('model.userCanAdd'));\n        lookupTypeList.set('organizeByType', this.get('model.organizeByType'));\n        lookupTypeList.save().then((function () {\n          this.displayAlert(this.get('i18n').t('admin.lookup.alertImportListUpdateTitle'), this.get('i18n').t('admin.lookup.alertImportListUpdateMessage'));\n        }).bind(this));\n      },\n      updateValue: function updateValue(valueObject) {\n        var updateList = false;\n        var lookupTypeList = this.get('lookupTypeList');\n        var lookupTypeValues = this.get('lookupTypeValues');\n        var values = lookupTypeList.get('value');\n        var value = valueObject.get('value');\n        if (valueObject.get('isNew')) {\n          updateList = true;\n        } else {\n          var originalValue = valueObject.get('originalValue');\n          if (value !== originalValue) {\n            lookupTypeValues.removeObject(originalValue);\n            updateList = true;\n            // TODO UPDATE ALL EXISTING DATA LOOKUPS (NODEJS JOB)\n          }\n        }\n        if (updateList) {\n          values.addObject(value);\n          values = values.sort(this._sortValues);\n          lookupTypeList.set('value', values);\n          lookupTypeList.save().then(function (list) {\n            // Make sure that the list on screen gets updated with the sorted items.\n            var values = _ember['default'].copy(list.get('value'));\n            lookupTypeValues.clear();\n            lookupTypeValues.addObjects(values);\n          });\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/lookup/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/lookup/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/lookup/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/lookup/edit/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    editController: _ember['default'].inject.controller('admin/lookup'),\n    showUpdateButton: true,\n\n    updateButtonAction: 'update',\n    updateButtonText: (function () {\n      var i18n = this.get('i18n');\n      if (this.get('model.isNew')) {\n        return i18n.t('buttons.add');\n      } else {\n        return i18n.t('buttons.update');\n      }\n    }).property('model.isNew'),\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      update: function update() {\n        if (!_ember['default'].isEmpty(this.get('model.value'))) {\n          this.get('editController').send('updateValue', this.get('model'));\n          this.send('closeModal');\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/lookup/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/lookup/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/lookup/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/lookup/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    hideNewButton: true,\n    pageTitle: (0, _emberI18n.translationMacro)('admin.lookup.pageTitle'),\n    model: function model() {\n      return this.store.findAll('lookup');\n    },\n\n    afterModel: function afterModel(model) {\n      model.set('lookupType', 'anesthesia_types');\n    },\n\n    actions: {\n      refreshLookupLists: function refreshLookupLists() {\n        this.refresh();\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/lookup/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/lookup/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/lookup/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/query/controller', ['exports', 'ember', 'hospitalrun/mixins/edit-panel-props', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunMixinsEditPanelProps, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsEditPanelProps['default'], {\n    hideCancelButton: true,\n    showUpdateButton: true,\n    updateButtonAction: 'query',\n    updateButtonText: 'Query', // admin function not requiring i8ln\n\n    objectTypeList: ['appointment', 'imaging', 'inv-location', 'inv-purchase', 'inv-request', 'inventory', 'invoice', 'lab', 'medication', 'patient', 'photo', 'procedure', 'visit', 'vital'],\n\n    objectTypes: _ember['default'].computed.map('objectTypeList', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n\n    actions: {\n      query: function query() {\n        var fieldName = this.get('fieldName');\n        var objectType = this.get('objectType');\n        var queryValue = this.get('queryValue');\n        var query = {\n          containsValue: {\n            value: queryValue,\n            keys: [fieldName]\n          }\n        };\n        this.store.query(objectType, query).then((function (results) {\n          var _this = this;\n\n          if (_ember['default'].isEmpty(results)) {\n            this.set('errorMessage', 'Query returned no results.');\n            this.set('haveError', true);\n            this.set('showQueryResults', false);\n          } else {\n            (function () {\n              var currentValue = undefined;\n              var attributes = ['id'];\n              var resultRows = [];\n              results.get('firstObject').eachAttribute(function (name) {\n                attributes.push(name);\n              });\n\n              results.forEach(function (result) {\n                var resultRow = [];\n                /* resultRow.push({\n                    name: 'id',\n                    value: result.get('id')\n                }); */\n                attributes.forEach(function (attribute) {\n                  currentValue = result.get(attribute);\n                  if (!_ember['default'].isEmpty(currentValue)) {\n                    resultRow.push({\n                      name: attribute,\n                      value: currentValue\n                    });\n                  }\n                });\n                resultRows.push(resultRow);\n              });\n              _this.set('resultRows', resultRows);\n              _this.set('haveError', false);\n              _this.set('showQueryResults', true);\n            })();\n          }\n        }).bind(this), (function (error) {\n          this.set('errorMessage', error);\n          this.set('haveError', true);\n          this.set('showQueryResults', false);\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/query/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/query/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/query/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/query/route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsUserSession['default'], _emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    beforeModel: function beforeModel() {\n      if (!this.currentUserCan('query_db')) {\n        this.transitionTo('application');\n      }\n    }\n  });\n});","define('hospitalrun/tests/admin/query/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/query/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/query/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/roles/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/user-roles', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsUserRoles, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsUserRoles['default'], _hospitalrunMixinsUserSession['default'], {\n    currentRole: '',\n    disabledAction: false,\n    hideCancelButton: true,\n    updateCapability: 'user_roles',\n    filteredRoles: _ember['default'].computed.filter('userRoles', function (userRole) {\n      return userRole.name !== 'System Administrator';\n    }),\n\n    availableCapabilities: [{\n      name: 'admin',\n      capabilities: ['admin', 'loadDb', 'updateConfig', 'userRoles']\n    }, {\n      name: 'appointments',\n      capabilities: ['appointments', 'addAppointment']\n    }, {\n      name: 'billing',\n      capabilities: ['billing', 'addCharge', 'addPricing', 'addPricingProfile', 'addInvoice', 'addPayment', 'deleteInvoice', 'deletePricing', 'deletePricingProfile', 'editInvoice', 'invoices', 'overrideInvoice', 'pricing']\n    }, {\n      name: 'patients',\n      capabilities: ['patients', 'addDiagnosis', 'addPhoto', 'addPatient', 'addProcedure', 'addVisit', 'addVitals', 'admitPatient', 'deletePhoto', 'deletePatient', 'deleteAppointment', 'deleteDiagnosis', 'deleteProcedure', 'deleteSocialwork', 'deleteVitals', 'deleteVisit', 'dischargePatient', 'patientReports', 'visits']\n    }, {\n      name: 'medication',\n      capabilities: ['medication', 'addMedication', 'deleteMedication', 'fulfillMedication']\n    }, {\n      name: 'labs',\n      capabilities: ['labs', 'addLab', 'completeLab', 'deleteLab']\n    }, {\n      name: 'imaging',\n      capabilities: ['imaging', 'addImaging', 'completeImaging', 'deleteImaging']\n    }, {\n      name: 'inventory',\n      capabilities: ['inventory', 'addInventoryRequest', 'addInventoryItem', 'addInventoryPurchase', 'adjustInventoryLocation', 'deleteInventoryItem', 'fulfillInventory']\n    }],\n\n    capabilitySections: _ember['default'].computed.map('availableCapabilities', function (section) {\n      var _this = this;\n\n      var mappedCapabilities = [];\n      section.capabilities.forEach(function (key) {\n        mappedCapabilities.push({\n          key: key,\n          name: _this.get('i18n').t('admin.roles.capability.' + key)\n        });\n      });\n      return {\n        name: this.get('i18n').t('admin.roles.capability.' + section.name),\n        capabilities: mappedCapabilities\n      };\n    }),\n\n    actions: {\n      selectRole: function selectRole(role) {\n        var _this2 = this;\n\n        var roleToUpdate = this.get('model').findBy('id', role.dasherize());\n        this.set('currentRole', role);\n        this.set('roleToUpdate', roleToUpdate);\n        if (roleToUpdate) {\n          (function () {\n            var capabilities = roleToUpdate.get('capabilities');\n            _this2.get('availableCapabilities').forEach(function (section) {\n              section.capabilities.forEach(function (capability) {\n                if (capabilities.includes(capability)) {\n                  _this2.set(capability, true);\n                } else {\n                  _this2.set(capability, false);\n                }\n              });\n            });\n          })();\n        } else {\n          (function () {\n            var defaultCapabilities = _this2.get('defaultCapabilities');\n            Object.keys(defaultCapabilities).forEach(function (capability) {\n              var capabilityRoles = defaultCapabilities[capability];\n              if (capabilityRoles.includes(role)) {\n                _this2.set(capability, true);\n              } else {\n                _this2.set(capability, false);\n              }\n            });\n          })();\n        }\n      },\n\n      update: function update() {\n        var _this3 = this;\n\n        var currentRole = this.get('currentRole');\n        var roleToUpdate = this.get('roleToUpdate');\n        if (_ember['default'].isEmpty(roleToUpdate)) {\n          roleToUpdate = this.get('store').createRecord('user-role', {\n            id: currentRole.dasherize(),\n            name: currentRole\n          });\n        }\n        var capabilitiesToSave = [];\n        this.get('availableCapabilities').forEach(function (section) {\n          section.capabilities.forEach(function (capability) {\n            if (_this3.get(capability) === true) {\n              capabilitiesToSave.push(capability);\n            }\n          });\n        });\n        roleToUpdate.set('capabilities', capabilitiesToSave);\n        roleToUpdate.save().then(function () {\n          _this3.displayAlert(_this3.get('i18n').t('admin.roles.titles.roleSaved'), _this3.get('i18n').t('admin.roles.messages.roleSaved', { roleName: currentRole }));\n        });\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/admin/roles/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/roles/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/roles/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/roles/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    hideNewButton: true,\n    newTitle: (0, _emberI18n.translationMacro)('admin.userRoles'),\n    editTitle: (0, _emberI18n.translationMacro)('admin.userRoles'),\n    model: function model() {\n      return this.get('store').findAll('user-role');\n    }\n  });\n});","define('hospitalrun/tests/admin/roles/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/roles/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/roles/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_user',\n    allowSearch: false,\n    moduleName: 'admin',\n    sectionTitle: 'Admin',\n\n    editPath: (function () {\n      return 'users.edit';\n    }).property(),\n\n    deletePath: (function () {\n      return 'users.delete';\n    }).property()\n  });\n});","define('hospitalrun/tests/admin/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/workflow/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    hideCancelButton: true,\n    updateCapability: 'update_config',\n\n    afterUpdate: function afterUpdate() {\n      this.displayAlert(this.get('i18n').t('admin.workflow.titles.optionsSaved'), this.get('i18n').t('admin.workflow.messages.optionsSaved'));\n    }\n  });\n});","define('hospitalrun/tests/admin/workflow/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/workflow/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/workflow/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/admin/workflow/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    hideNewButton: true,\n    editTitle: (0, _emberI18n.translationMacro)('admin.workflow.editTitle'),\n\n    model: function model() {\n      var store = this.get('store');\n      return store.find('option', 'workflow_options')['catch'](function () {\n        // create a new workflow_option if none exists\n        return store.push(store.normalize('option', {\n          id: 'workflow_options',\n          value: {\n            admissionDeposit: false,\n            clinicPrepayment: false,\n            followupPrepayment: false,\n            outpatientLabPrepayment: false,\n            outpatientImagingPrepayment: false,\n            outpatientMedicationPrepayment: false\n          }\n        }));\n      });\n    }\n  });\n});","define('hospitalrun/tests/admin/workflow/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - admin/workflow/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'admin/workflow/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/app', ['exports', 'ember', 'hospitalrun/tests/resolver', 'ember-load-initializers', 'hospitalrun/tests/config/environment'], function (exports, _ember, _hospitalrunTestsResolver, _emberLoadInitializers, _hospitalrunTestsConfigEnvironment) {\n  'use strict';\n\n  var App = undefined;\n\n  _ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = _ember['default'].Application.extend({\n    modulePrefix: _hospitalrunTestsConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _hospitalrunTestsConfigEnvironment['default'].podModulePrefix,\n    Resolver: _hospitalrunTestsResolver['default']\n  });\n\n  (0, _emberLoadInitializers['default'])(App, _hospitalrunTestsConfigEnvironment['default'].modulePrefix);\n\n  exports['default'] = App;\n});","define('hospitalrun/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: 'Delete Appointment',\n\n    afterDeleteAction: (function () {\n      var deleteFromPatient = this.get('model.deleteFromPatient');\n      if (deleteFromPatient) {\n        return 'appointmentDeleted';\n      } else {\n        return 'closeModal';\n      }\n    }).property('model.deleteFromPatient')\n  });\n});","define('hospitalrun/tests/appointments/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/appointment-statuses', 'ember', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsAppointmentStatuses, _ember, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsAppointmentStatuses['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsVisitTypes['default'], {\n    appointmentsController: _ember['default'].inject.controller('appointments'),\n    endHour: null,\n    endMinute: null,\n    findPatientVisits: false,\n    startHour: null,\n    startMinute: null,\n\n    hourList: (function () {\n      var hour = undefined;\n      var hourList = [];\n      for (hour = 0; hour < 24; hour++) {\n        var hourText = hour % 12 + (hour < 12 ? ' AM' : ' PM');\n        if (hourText === '0 AM') {\n          hourText = 'Midnight';\n        } else if (hourText === '0 PM') {\n          hourText = 'Noon';\n        }\n        hourList.push({\n          name: hourText,\n          value: hour\n        });\n      }\n      return hourList;\n    }).property(),\n\n    locationList: _ember['default'].computed.alias('appointmentsController.locationList'),\n\n    lookupListsToUpdate: [{\n      name: 'physicianList',\n      property: 'model.provider',\n      id: 'physician_list'\n    }, {\n      name: 'locationList',\n      property: 'model.location',\n      id: 'visit_location_list'\n    }],\n\n    minuteList: (function () {\n      var minute = undefined;\n      var minuteList = [];\n      for (minute = 0; minute < 60; minute++) {\n        minuteList.push(String('00' + minute).slice(-2));\n      }\n      return minuteList;\n    }).property(),\n\n    physicianList: _ember['default'].computed.alias('appointmentsController.physicianList'),\n    showTime: (function () {\n      var allDay = this.get('model.allDay');\n      var isAdmissionAppointment = this.get('isAdmissionAppointment');\n      return !allDay && isAdmissionAppointment;\n    }).property('model.allDay', 'isAdmissionAppointment'),\n    visitTypesList: _ember['default'].computed.alias('appointmentsController.visitTypesList'),\n\n    cancelAction: (function () {\n      var returnTo = this.get('model.returnTo');\n      if (_ember['default'].isEmpty(returnTo)) {\n        return this._super();\n      } else {\n        return 'returnTo';\n      }\n    }).property('model.returnTo'),\n\n    isAdmissionAppointment: (function () {\n      var model = this.get('model');\n      var appointmentType = model.get('appointmentType');\n      var isAdmissionAppointment = appointmentType === 'Admission';\n      if (!isAdmissionAppointment) {\n        model.set('allDay', true);\n      }\n      return isAdmissionAppointment;\n    }).property('model.appointmentType'),\n\n    updateCapability: 'add_appointment',\n\n    afterUpdate: function afterUpdate() {\n      this.send(this.get('cancelAction'));\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      this._updateAppointmentDates();\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    endHourChanged: (function () {\n      this._updateDate('endHour', 'endDate');\n    }).observes('endHour'),\n\n    endMinuteChanged: (function () {\n      this._updateDate('endMinute', 'endDate');\n    }).observes('endMinute'),\n\n    endTimeHasError: (function () {\n      var endDateError = this.get('model.errors.endDate');\n      return endDateError.length > 0;\n    }).property('model.isValid'),\n\n    isAllDay: (function () {\n      var allDay = this.get('model.allDay');\n      var isAdmissionAppointment = this.get('isAdmissionAppointment');\n      if (allDay) {\n        var endDate = this.get('model.endDate');\n        var startDate = this.get('model.startDate');\n        this.set('model.startDate', moment(startDate).startOf('day').toDate());\n        this.set('startHour', 0);\n        this.set('startMinute', '00');\n        this.set('model.endDate', moment(endDate).endOf('day').toDate());\n        this.set('endHour', 23);\n        this.set('endMinute', '59');\n      } else {\n        if (isAdmissionAppointment) {\n          this._updateAllTimes();\n        }\n      }\n      return allDay;\n    }).property('model.allDay'),\n\n    startHourChanged: (function () {\n      this._updateDate('startHour', 'startDate');\n    }).observes('startHour'),\n\n    startMinuteChanged: (function () {\n      this._updateDate('startMinute', 'startDate');\n    }).observes('startMinute'),\n\n    _updateAllTimes: function _updateAllTimes() {\n      this.endHourChanged();\n      this.endMinuteChanged();\n      this.startMinuteChanged();\n      this.startHourChanged();\n    },\n\n    _updateAppointmentDates: function _updateAppointmentDates() {\n      var allDay = this.get('model.allDay');\n      var isAdmissionAppointment = this.get('isAdmissionAppointment');\n      var appointmentDate = this.get('model.appointmentDate');\n      if (!isAdmissionAppointment) {\n        this.set('model.endDate', appointmentDate);\n        this.set('model.startDate', appointmentDate);\n        if (!allDay) {\n          this._updateAllTimes();\n        }\n      }\n    },\n\n    _updateDate: function _updateDate(fieldName, dateFieldName) {\n      var model = this.get('model');\n      var fieldValue = this.get(fieldName);\n      var dateToChange = model.get(dateFieldName);\n      if (!_ember['default'].isEmpty(dateToChange)) {\n        dateToChange = moment(dateToChange);\n        if (fieldName.indexOf('Hour') > -1) {\n          dateToChange.hour(fieldValue);\n        } else {\n          dateToChange.minute(fieldValue);\n        }\n        model.set(dateFieldName, dateToChange.toDate());\n        _ember['default'].run.once(this, function () {\n          model.validate()['catch'](_ember['default'].K);\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/appointments/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/patient-list-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _hospitalrunMixinsPatientListRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsPatientListRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('appointments.editTitle'),\n    modelName: 'appointment',\n    newTitle: (0, _emberI18n.translationMacro)('appointments.newTitle'),\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        appointmentType: 'Admission',\n        allDay: true,\n        selectPatient: true,\n        startDate: new Date()\n      });\n    }\n  });\n});","define('hospitalrun/tests/appointments/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    canAddVisit: (function () {\n      return this.currentUserCan('add_visit');\n    }).property(),\n\n    canEdit: (function () {\n      // Add and edit are the same capability\n      return this.currentUserCan('add_appointment');\n    }).property(),\n\n    canDelete: (function () {\n      return this.currentUserCan('delete_appointment');\n    }).property(),\n\n    sortProperties: ['startDate', 'endDate'],\n    sortAscending: true\n  });\n});","define('hospitalrun/tests/appointments/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    editReturn: 'appointments.index',\n    modelName: 'appointment',\n    pageTitle: (0, _emberI18n.translationMacro)('appointments.thisWeek'),\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var endDate = item.get('endDate');\n      var id = this._getPouchIdFromItem(item);\n      var startDate = item.get('startDate');\n      if (endDate && endDate !== '') {\n        endDate = new Date(endDate);\n        if (endDate.getTime) {\n          endDate = endDate.getTime();\n        }\n      }\n      if (startDate && startDate !== '') {\n        startDate = new Date(startDate);\n        if (startDate.getTime) {\n          startDate = startDate.getTime();\n        }\n      }\n\n      return [startDate, endDate, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var endOfWeek = moment().endOf('week').toDate().getTime();\n      var startOfWeek = moment().startOf('week').toDate().getTime();\n      var maxId = this._getMaxPouchId();\n      return {\n        options: {\n          startkey: [startOfWeek, null, null],\n          endkey: [endOfWeek, endOfWeek, maxId]\n        },\n        mapReduce: 'appointments_by_date'\n      };\n    },\n\n    actions: {\n      editAppointment: function editAppointment(appointment) {\n        appointment.set('returnTo', this.get('editReturn'));\n        this.send('editItem', appointment);\n      }\n    }\n  });\n});","define('hospitalrun/tests/appointments/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/missed/controller', ['exports', 'hospitalrun/appointments/index/controller'], function (exports, _hospitalrunAppointmentsIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunAppointmentsIndexController['default'].extend({\n    startKey: []\n  });\n});","define('hospitalrun/tests/appointments/missed/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/missed/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/missed/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/missed/route', ['exports', 'hospitalrun/appointments/index/route', 'ember-i18n'], function (exports, _hospitalrunAppointmentsIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunAppointmentsIndexRoute['default'].extend({\n    editReturn: 'appointments.missed',\n    modelName: 'appointment',\n    pageTitle: (0, _emberI18n.translationMacro)('appointments.missed'),\n\n    _modelQueryParams: function _modelQueryParams() {\n      var queryParams = this._super.apply(this, arguments);\n      queryParams.filterBy = [{\n        name: 'status',\n        value: 'Missed'\n      }];\n      return queryParams;\n    }\n  });\n});","define('hospitalrun/tests/appointments/missed/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/missed/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/missed/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    addCapability: 'add_appointment',\n    allowSearch: false,\n    currentScreenTitle: (0, _emberI18n.translationMacro)('appointments.currentScreenTitle'),\n    editTitle: (0, _emberI18n.translationMacro)('appointments.editTitle'),\n    newTitle: (0, _emberI18n.translationMacro)('appointments.newTitle'),\n    moduleName: 'appointments',\n    newButtonText: (0, _emberI18n.translationMacro)('appointments.buttons.newButton'),\n    sectionTitle: (0, _emberI18n.translationMacro)('appointments.sectionTitle'),\n\n    actions: {\n      createVisit: function createVisit(appointment) {\n        var visitProps = appointment.getProperties('startDate', 'endDate', 'location', 'patient');\n        visitProps.visitType = appointment.get('appointmentType');\n        visitProps.examiner = appointment.get('provider');\n        this.transitionTo('visits.edit', 'new').then((function (newRoute) {\n          newRoute.currentModel.setProperties(visitProps);\n        }).bind(this));\n      }\n    },\n\n    additionalModels: [{\n      name: 'physicianList',\n      findArgs: ['lookup', 'physician_list']\n    }, {\n      name: 'locationList',\n      findArgs: ['lookup', 'visit_location_list']\n    }, {\n      name: 'visitTypesList',\n      findArgs: ['lookup', 'visit_types']\n    }]\n  });\n});","define('hospitalrun/tests/appointments/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/search/controller', ['exports', 'hospitalrun/appointments/index/controller', 'hospitalrun/mixins/appointment-statuses', 'ember', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunAppointmentsIndexController, _hospitalrunMixinsAppointmentStatuses, _ember, _hospitalrunUtilsSelectValues, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  exports['default'] = _hospitalrunAppointmentsIndexController['default'].extend(_hospitalrunMixinsAppointmentStatuses['default'], _hospitalrunMixinsVisitTypes['default'], {\n    appointmentsController: _ember['default'].inject.controller('appointments'),\n    appointmentType: null,\n    physicians: _ember['default'].computed.alias('appointmentsController.physicianList.value'),\n    physicianList: (function () {\n      return _hospitalrunUtilsSelectValues['default'].selectValues(this.get('physicians'), true);\n    }).property('physicians'),\n\n    provider: null,\n    queryParams: ['appointmentType', 'provider', 'status', 'startKey', 'startDate'],\n    selectedProvider: null,\n    selectedStatus: null,\n    sortProperties: null,\n    startDate: null,\n    startKey: [],\n    status: null,\n    visitTypesList: _ember['default'].computed.alias('appointmentsController.visitTypesList'),\n\n    actions: {\n      search: function search() {\n        var appointmentType = this.get('model.selectedAppointmentType');\n        var fieldsToSet = {\n          startKey: [],\n          previousStartKey: null,\n          previousStartKeys: []\n        };\n        var provider = this.get('model.selectedProvider');\n        var status = this.get('model.selectedStatus');\n        var startDate = this.get('model.selectedStartingDate');\n\n        if (_ember['default'].isEmpty(appointmentType)) {\n          fieldsToSet.appointmentType = null;\n        } else {\n          fieldsToSet.appointmentType = appointmentType;\n        }\n        if (_ember['default'].isEmpty(provider)) {\n          fieldsToSet.provider = null;\n        } else {\n          fieldsToSet.provider = provider;\n        }\n        if (_ember['default'].isEmpty(status)) {\n          fieldsToSet.status = null;\n        } else {\n          fieldsToSet.status = status;\n        }\n        if (!_ember['default'].isEmpty(startDate)) {\n          fieldsToSet.startDate = startDate.getTime();\n        }\n        if (!_ember['default'].isEmpty(fieldsToSet)) {\n          this.setProperties(fieldsToSet);\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/appointments/search/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/search/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/search/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/search/route', ['exports', 'hospitalrun/appointments/index/route', 'hospitalrun/mixins/date-format', 'ember', 'ember-i18n'], function (exports, _hospitalrunAppointmentsIndexRoute, _hospitalrunMixinsDateFormat, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunAppointmentsIndexRoute['default'].extend(_hospitalrunMixinsDateFormat['default'], {\n    editReturn: 'appointments.search',\n    filterParams: ['appointmentType', 'provider', 'status'],\n    modelName: 'appointment',\n    pageTitle: (0, _emberI18n.translationMacro)('appointments.searchTitle'),\n\n    queryParams: {\n      appointmentType: { refreshModel: true },\n      provider: { refreshModel: true },\n      status: { refreshModel: true },\n      startDate: { refreshModel: true },\n      startKey: { refreshModel: true }\n    },\n\n    _modelQueryParams: function _modelQueryParams(params) {\n      var startDate = params.startDate;\n      var maxValue = this.get('maxValue');\n      if (_ember['default'].isEmpty(startDate)) {\n        startDate = moment();\n      } else {\n        startDate = moment(parseInt(startDate));\n      }\n      var startOfDay = startDate.startOf('day').toDate().getTime();\n      var searchOptions = {\n        startkey: [startOfDay, null, 'appointment_'],\n        endkey: [maxValue, maxValue, 'appointment_' + maxValue]\n      };\n      return {\n        options: searchOptions,\n        mapReduce: 'appointments_by_date'\n      };\n    },\n\n    model: function model(params) {\n      return this._super(params).then((function (model) {\n        model.setProperties({\n          selectedAppointmentType: params.appointmentType,\n          selectedProvider: params.provider,\n          selectedStatus: params.status\n        });\n        var startDate = params.startDate;\n        startDate = new Date();\n        if (!_ember['default'].isEmpty(params.startDate)) {\n          startDate.setTime(params.startDate);\n        }\n        model.set('selectedStartingDate', startDate);\n        model.set('display_selectedStartingDate', this._dateFormat(startDate));\n        return model;\n      }).bind(this));\n    }\n\n  });\n});","define('hospitalrun/tests/appointments/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/today/controller', ['exports', 'hospitalrun/appointments/index/controller'], function (exports, _hospitalrunAppointmentsIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunAppointmentsIndexController['default'].extend({\n    startKey: []\n  });\n});","define('hospitalrun/tests/appointments/today/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/today/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/today/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/appointments/today/route', ['exports', 'hospitalrun/appointments/index/route', 'ember-i18n'], function (exports, _hospitalrunAppointmentsIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunAppointmentsIndexRoute['default'].extend({\n    editReturn: 'appointments.today',\n    modelName: 'appointment',\n    pageTitle: (0, _emberI18n.translationMacro)('appointments.todayTitle'),\n\n    _modelQueryParams: function _modelQueryParams() {\n      var endOfDay = moment().endOf('day').toDate().getTime();\n      var maxValue = this.get('maxValue');\n      var startOfDay = moment().startOf('day').toDate().getTime();\n      return {\n        options: {\n          startkey: [startOfDay, null, 'appointment_'],\n          endkey: [endOfDay, endOfDay, 'appointment_' + maxValue]\n        },\n        mapReduce: 'appointments_by_date'\n      };\n    }\n  });\n});","define('hospitalrun/tests/appointments/today/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - appointments/today/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'appointments/today/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/authenticators/custom', ['exports', 'ember', 'ember-simple-auth/authenticators/base'], function (exports, _ember, _emberSimpleAuthAuthenticatorsBase) {\n  'use strict';\n\n  exports['default'] = _emberSimpleAuthAuthenticatorsBase['default'].extend({\n    config: _ember['default'].inject.service(),\n    database: _ember['default'].inject.service(),\n    serverEndpoint: '/db/_session',\n    useGoogleAuth: false,\n\n    /**\n      @method absolutizeExpirationTime\n      @private\n    */\n    _absolutizeExpirationTime: function _absolutizeExpirationTime(expiresIn) {\n      if (!_ember['default'].isEmpty(expiresIn)) {\n        return new Date(new Date().getTime() + (expiresIn - 5) * 1000).getTime();\n      }\n    },\n\n    _checkUser: function _checkUser(user) {\n      var _this = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        _this._makeRequest('POST', { name: user.name }, '/chkuser').then(function (response) {\n          if (response.error) {\n            reject(response);\n          }\n          user.displayName = response.displayName;\n          user.role = response.role;\n          user.prefix = response.prefix;\n          resolve(user);\n        }, function () {\n          // If chkuser fails, user is probably offline; resolve with currently stored credentials\n          resolve(user);\n        });\n      });\n    },\n\n    _getPromise: function _getPromise(type, data) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this._makeRequest(type, data).then(function (response) {\n          _ember['default'].run(function () {\n            resolve(response);\n          });\n        }, function (xhr) {\n          _ember['default'].run(function () {\n            reject(xhr.responseJSON || xhr.responseText);\n          });\n        });\n      }).bind(this));\n    },\n\n    _makeRequest: function _makeRequest(type, data, url) {\n      if (!url) {\n        url = this.serverEndpoint;\n      }\n      return _ember['default'].$.ajax({\n        url: url,\n        type: type,\n        data: data,\n        dataType: 'json',\n        contentType: 'application/x-www-form-urlencoded',\n        xhrFields: {\n          withCredentials: true\n        }\n      });\n    },\n\n    /**\n     Authenticate using google auth credentials or credentials from couch db.\n     @method authenticate\n     @param {Object} credentials The credentials to authenticate the session with\n     @return {Ember.RSVP.Promise} A promise that resolves when an access token is successfully acquired from the server and rejects otherwise\n     */\n    authenticate: function authenticate(credentials) {\n      var _this2 = this;\n\n      if (credentials.google_auth) {\n        var _ret = (function () {\n          _this2.useGoogleAuth = true;\n          var sessionCredentials = {\n            google_auth: true,\n            consumer_key: credentials.params.k,\n            consumer_secret: credentials.params.s1,\n            token: credentials.params.t,\n            token_secret: credentials.params.s2,\n            name: credentials.params.i\n          };\n          return {\n            v: new _ember['default'].RSVP.Promise(function (resolve, reject) {\n              _this2._checkUser(sessionCredentials).then(function (user) {\n                resolve(user);\n                _this2.get('config').setCurrentUser(user.name);\n              }, reject);\n            })\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var data = { name: credentials.identification, password: credentials.password };\n        _this2._makeRequest('POST', data).then(function (response) {\n          response.name = data.name;\n          response.expires_at = _this2._absolutizeExpirationTime(600);\n          _this2._checkUser(response).then(function (user) {\n            _this2.get('config').setCurrentUser(user.name);\n            var database = _this2.get('database');\n            database.setup({}).then(function () {\n              resolve(user);\n            }, reject);\n          }, reject);\n        }, function (xhr) {\n          reject(xhr.responseJSON || xhr.responseText);\n        });\n      });\n    },\n\n    invalidate: function invalidate() {\n      if (this.useGoogleAuth) {\n        return new _ember['default'].RSVP.resolve();\n      } else {\n        return this._getPromise('DELETE');\n      }\n    },\n\n    restore: function restore(data) {\n      var _this3 = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var now = new Date().getTime();\n        if (!_ember['default'].isEmpty(data.expires_at) && data.expires_at < now) {\n          reject();\n        } else {\n          if (data.google_auth) {\n            _this3.useGoogleAuth = true;\n          }\n          _this3._checkUser(data).then(resolve, reject);\n        }\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/authenticators/custom.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - authenticators/custom.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/custom.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/action-checkbox', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    // From http://emberjs.jsbin.com/rwjblue/58/edit?html,css,js,output\n    attributeBindings: ['type', 'value'],\n    tagName: 'input',\n    type: 'checkbox',\n    checked: false,\n\n    _updateElementValue: (function () {\n      this.set('checked', this.$().prop('checked'));\n    }).on('didInsertElement'),\n\n    change: function change() {\n      this._updateElementValue();\n      this.sendAction('action', this.get('value'), this.get('checked'));\n    }\n  });\n});","define('hospitalrun/tests/components/action-checkbox.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/action-checkbox.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/action-checkbox.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/array-display', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    isArray: (function () {\n      var content = this.get('content');\n      return _ember['default'].isArray(content);\n    }).property('content')\n  });\n});","define('hospitalrun/tests/components/array-display.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/array-display.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/array-display.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/charge-quantity', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    i18n: _ember['default'].inject.service(),\n    classNames: ['col-xs-2', 'form-group'],\n    classNameBindings: ['hasError'],\n    tagName: 'td',\n    pricingItem: null,\n\n    didReceiveAttrs: function didReceiveAttrs() /* attrs */{\n      this._super.apply(this, arguments);\n      this.quantitySelected = _ember['default'].computed.alias('model.' + this.get('pricingItem.id'));\n    },\n\n    hasError: (function () {\n      var quantitySelected = this.get('quantitySelected');\n      return !_ember['default'].isEmpty(quantitySelected) && isNaN(quantitySelected);\n    }).property('quantitySelected'),\n\n    quantityHelp: (function () {\n      if (this.get('hasError')) {\n        return this.get('i18n').t('errors.invalidNumber');\n      }\n    }).property('hasError')\n\n  });\n});","define('hospitalrun/tests/components/charge-quantity.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/charge-quantity.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/charge-quantity.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/charges-by-type-tab', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    attributeBindings: ['role'],\n    classNameBindings: ['active'],\n    index: null,\n    pricingList: null,\n    role: 'presentation',\n    tagName: 'li',\n\n    active: (function () {\n      var index = this.get('index');\n      return index === 0;\n    }).property(),\n\n    tabId: (function () {\n      return this.get('pricingType').toLowerCase().dasherize();\n    }).property('pricingType'),\n\n    tabHref: (function () {\n      var tabId = this.get('tabId');\n      return '#' + tabId;\n    }).property('tabId')\n  });\n});","define('hospitalrun/tests/components/charges-by-type-tab.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/charges-by-type-tab.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/charges-by-type-tab.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/checkbox-or-typeahead', ['exports', 'ember', 'hospitalrun/components/select-or-typeahead'], function (exports, _ember, _hospitalrunComponentsSelectOrTypeahead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsSelectOrTypeahead['default'].extend({\n    checkboxesPerRow: 5,\n    model: null,\n\n    _getLabelFromContent: function _getLabelFromContent(object) {\n      var optionLabelPath = this.get('optionLabelPath');\n      return _ember['default'].get(object, optionLabelPath);\n    },\n\n    _getValueFromContent: function _getValueFromContent(object) {\n      var optionValuePath = this.get('optionValuePath');\n      return _ember['default'].get(object, optionValuePath);\n    },\n\n    _mapCheckboxValues: function _mapCheckboxValues(value) {\n      return {\n        label: this._getLabelFromContent(value),\n        value: this._getValueFromContent(value)\n      };\n    },\n\n    _setup: (function () {\n      var property = this.get('property');\n      _ember['default'].defineProperty(this, 'errors', _ember['default'].computed('model.errors.' + property, function () {\n        var property = this.get('property');\n        var errors = this.get('model.errors.' + property);\n        if (!_ember['default'].isEmpty(errors)) {\n          return errors[0];\n        }\n      }));\n    }).on('init'),\n\n    checkboxRows: (function () {\n      var checkboxRows = [];\n      var checkboxesPerRow = this.get('checkboxesPerRow');\n      var content = this.get('content');\n      var allValues = content.copy();\n      while (allValues.length > 0) {\n        var checkBoxRowValues = allValues.splice(0, checkboxesPerRow).map(this._mapCheckboxValues.bind(this));\n        checkboxRows.push(checkBoxRowValues);\n      }\n      return checkboxRows;\n    }).property('content', 'checkboxesPerRow'),\n\n    actions: {\n      checkboxChanged: function checkboxChanged(value, checked) {\n        var property = this.get('property');\n        var propertyName = 'model.' + property;\n        var selectedValues = this.get(propertyName);\n        if (!_ember['default'].isArray(selectedValues)) {\n          selectedValues = [];\n        }\n        if (checked && !selectedValues.includes(value)) {\n          selectedValues.addObject(value);\n        } else if (!checked && selectedValues.includes(value)) {\n          selectedValues.removeObject(value);\n        }\n        this.set(propertyName, selectedValues);\n        this.set('selection', selectedValues);\n        this.get('model').validate()['catch'](_ember['default'].K);\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/components/checkbox-or-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/checkbox-or-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/checkbox-or-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/custom-form', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunUtilsSelectValues['default'], {\n    classNames: 'detail-section-content',\n    fieldsByRow: (function () {\n      var _this = this;\n\n      var rows = [];\n      var form = this.get('form');\n      if (!_ember['default'].isEmpty(form)) {\n        (function () {\n          var fields = form.fields;\n          var numberOfColumns = _this.getWithDefault('form.columns', 1);\n          var currentRow = [];\n\n          var colCount = 0;\n          var colWidth = 12 / numberOfColumns;\n          fields.forEach(function (field) {\n            if (!field.classNames) {\n              field.classNames = '';\n            }\n            var colSpan = field.colSpan || 1;\n            if (colCount === numberOfColumns || colCount + colSpan > numberOfColumns) {\n              rows.push(currentRow.slice());\n              currentRow = [];\n              colCount = 0;\n            }\n            field.classNames += ' col-sm-' + colWidth * colSpan;\n            if (field.type === 'select') {\n              field.mappedValues = field.values.map(_this.selectValuesMap);\n            }\n            currentRow.push(field);\n            colCount += colSpan;\n          });\n          if (colCount > 0) {\n            rows.push(currentRow);\n          }\n        })();\n      }\n      return rows;\n    }).property('form')\n  });\n});","define('hospitalrun/tests/components/custom-form.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/custom-form.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/custom-form.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/date-input', ['exports', 'ember', 'ember-rapid-forms/components/html-input'], function (exports, _ember, _emberRapidFormsComponentsHtmlInput) {\n  'use strict';\n\n  exports['default'] = _emberRapidFormsComponentsHtmlInput['default'].extend({\n    _picker: null,\n\n    _shouldSetDate: function _shouldSetDate(currentDate, picker) {\n      return picker && (_ember['default'].isEmpty(currentDate) || _ember['default'].isEmpty(picker.getDate()) || currentDate.getTime && picker.getDate().getTime() !== currentDate.getTime());\n    },\n\n    currentDateChangedValue: function currentDateChangedValue() {\n      var currentDate = this.get('currentDate');\n      var picker = this.get('_picker');\n      if (!_ember['default'].isEmpty(currentDate) && this._shouldSetDate(currentDate, picker)) {\n        picker.setDate(currentDate);\n      }\n    },\n\n    format: (function () {\n      var showTime = this.get('showTime');\n      if (showTime) {\n        return 'l h:mm A';\n      } else {\n        return 'l';\n      }\n    }).property('mainComponent.showTime'),\n\n    showTimeChanged: (function () {\n      var picker = this.get('_picker');\n      if (picker) {\n        picker.destroy();\n        this.didInsertElement();\n      }\n    }).observes('mainComponent.showTime'),\n\n    dateSet: function dateSet() {\n      var currentDate = this.get('currentDate');\n      var picker = this.get('_picker');\n      if (this._shouldSetDate(currentDate, picker)) {\n        this.set('currentDate', picker.getDate());\n      }\n    },\n\n    didInsertElement: function didInsertElement() {\n      var currentDate = this.get('currentDate');\n      var $input = this.$('input');\n      var picker = null;\n      var props = this.getProperties('format', 'yearRange', 'showTime');\n\n      props.onSelect = this.dateSet.bind(this);\n\n      if (!_ember['default'].isEmpty(this.get('minDate'))) {\n        props.minDate = this.get('minDate');\n        if (props.minDate === 'now') {\n          props.minDate = new Date();\n        }\n      }\n      if (!_ember['default'].isEmpty(this.get('maxDate'))) {\n        props.maxDate = this.get('maxDate');\n        if (props.maxDate === 'now') {\n          props.maxDate = new Date();\n        }\n      }\n      props.field = $input[0];\n      picker = new Pikaday(props);\n      _ember['default'].run.next(this, function () {\n        picker.setDate(currentDate);\n      });\n      this.set('_picker', picker);\n    },\n\n    didReceiveAttrs: function didReceiveAttrs() /* attrs */{\n      this._super.apply(this, arguments);\n      var dateProperty = this.get('mainComponent.property');\n      var displayPropertyName = 'display_' + dateProperty;\n      this.set('mainComponent.property', displayPropertyName);\n      this.currentDate = _ember['default'].computed.alias('mainComponent.model.' + dateProperty);\n      this.selectedValue = _ember['default'].computed.alias('mainComponent.model.' + displayPropertyName);\n      this.minDate = _ember['default'].computed.alias('mainComponent.minDate');\n      this.maxDate = _ember['default'].computed.alias('mainComponent.maxDate');\n      this.showTime = _ember['default'].computed.alias('mainComponent.showTime');\n      this.yearRange = _ember['default'].computed.alias('mainComponent.yearRange');\n      this.addObserver('mainComponent.model.' + dateProperty, this, this.currentDateChangedValue);\n      _ember['default'].Binding.from('mainComponent.model.errors.' + dateProperty).to('mainComponent.model.errors.' + displayPropertyName).connect(this);\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      var picker = this.get('_picker');\n      if (picker) {\n        picker.destroy();\n      }\n      this.set('_picker', null);\n    }\n\n  });\n});","define('hospitalrun/tests/components/date-input.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/date-input.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/date-input.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/date-picker', ['exports', 'ember-rapid-forms/components/em-input'], function (exports, _emberRapidFormsComponentsEmInput) {\n  // Dervied from http://spin.atomicobject.com/2013/10/29/ember-js-date-picker/\n  'use strict';\n\n  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend({\n    htmlComponent: 'date-input',\n    minDate: null,\n    maxDate: null,\n    showTime: false,\n    yearRange: 10\n  });\n});","define('hospitalrun/tests/components/date-picker.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/date-picker.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/date-picker.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/edit-panel', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    editPanelProps: null,\n    cancelAction: 'cancel',\n\n    actions: {\n      cancel: function cancel() {\n        this.sendAction('cancelAction');\n      },\n      disabledAction: function disabledAction() {\n        this.sendAction('editPanelProps.disabledAction');\n      },\n      fireButtonAction: function fireButtonAction(buttonAction) {\n        this.set(buttonAction, buttonAction);\n        this.sendAction(buttonAction);\n      },\n      updateButtonAction: function updateButtonAction() {\n        this.sendAction('editPanelProps.updateButtonAction');\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/edit-panel.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/edit-panel.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/edit-panel.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/erf-html-input', ['exports', 'ember-rapid-forms/components/html-input', 'hospitalrun/tests/templates/components/html-input'], function (exports, _emberRapidFormsComponentsHtmlInput, _hospitalrunTestsTemplatesComponentsHtmlInput) {\n  'use strict';\n\n  exports['default'] = _emberRapidFormsComponentsHtmlInput['default'].extend({\n    layout: _hospitalrunTestsTemplatesComponentsHtmlInput['default'],\n    actions: {\n      update: function update(value) {\n        var sanitize = this.get('mainComponent.sanitize');\n        if (sanitize && sanitize.call) {\n          value = sanitize(value);\n        }\n        this.set('selectedValue', value);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/erf-html-input.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/erf-html-input.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/erf-html-input.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/ext-radio', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    includeOtherOption: false,\n    otherOptionLabel: null,\n    showInline: false,\n\n    haveLabel: (function () {\n      var firstRadio = this.get('content.firstObject');\n      return !_ember['default'].isEmpty(firstRadio.label);\n    }).property('content'),\n\n    radioClass: (function () {\n      if (this.get('showInline')) {\n        return 'radio-inline';\n      } else {\n        return 'radio';\n      }\n    }).property('showInline')\n  });\n});","define('hospitalrun/tests/components/ext-radio.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/ext-radio.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/ext-radio.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/file-upload', ['exports', 'hospitalrun/components/image-upload'], function (exports, _hospitalrunComponentsImageUpload) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsImageUpload['default'].extend({\n    resizeFile: false\n  });\n});","define('hospitalrun/tests/components/file-upload.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/file-upload.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/file-upload.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/icd10-pcs-typeahead', ['exports', 'hospitalrun/components/icd10-typeahead'], function (exports, _hospitalrunComponentsIcd10Typeahead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsIcd10Typeahead['default'].extend();\n});","define('hospitalrun/tests/components/icd10-pcs-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/icd10-pcs-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/icd10-pcs-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/icd10-typeahead', ['exports', 'hospitalrun/components/type-ahead'], function (exports, _hospitalrunComponentsTypeAhead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend({\n    'class': 'scrollable-typeahead',\n    minlength: 2,\n    selectionKey: 'id',\n    setOnBlur: true,\n    templates: {\n      header: '<div class=\"alert alert-success well-sm query-results\" role=\"alert\"></div>'\n    },\n\n    _sourceQuery: function _sourceQuery(query, cb) {\n      // Custom source function\n      // Get the data from the Blodhound engine and process it.\n      this.bloodhound.get(query, (function (suggestions) {\n        cb(suggestions);\n        // Set the headers content.\n        var $header = this.$('.query-results');\n        $header.html('<strong><em>' + query + '</em></strong> returned <strong>' + suggestions.length + '</strong> results');\n      }).bind(this));\n    },\n\n    _getSource: function _getSource() {\n      return this._sourceQuery.bind(this);\n    }\n  });\n});","define('hospitalrun/tests/components/icd10-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/icd10-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/icd10-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/image-upload', ['exports', 'ember-rapid-forms/components/em-input'], function (exports, _emberRapidFormsComponentsEmInput) {\n  'use strict';\n\n  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend({\n    fileInputEl: null,\n    resizeFile: true,\n    selectedFile: null,\n    type: 'file',\n\n    _fileChanged: function _fileChanged() {\n      var _this = this;\n\n      var inputEl = this.get('fileInputEl');\n      var resize = this.get('resizeFile');\n\n      if (resize) {\n        (function () {\n          // Derived from https://github.com/josefrichter/resize/blob/master/public/preprocess.js\n          window.URL = window.URL || window.webkitURL;\n          var blobURL = window.URL.createObjectURL(inputEl.files[0]); // and get it's URL\n          // helper Image object\n          var image = new Image();\n          image.src = blobURL;\n          image.onload = (function () {\n            window.URL.revokeObjectURL(blobURL);\n            // have to wait till it's loaded\n            this.set('selectedFile', this._resizeImage(image)); // send it to canvas\n          }).bind(_this);\n        })();\n      } else {\n        this.set('selectedFile', inputEl.files[0]);\n      }\n    },\n\n    /**\n     * Resize the image to no larger than 1024px so that file sizes\n     * are not too large.\n     */\n    _resizeImage: function _resizeImage(img) {\n      // Derived from https://github.com/josefrichter/resize/blob/master/public/preprocess.js\n      var canvas = document.createElement('canvas');\n      var height = img.height;\n      var width = img.width;\n      var maxHeight = 1024;\n      var maxWidth = 1024;\n\n      // calculate the width and height, constraining the proportions\n      if (width > height) {\n        if (width > maxWidth) {\n          // height *= max_width / width;\n          height = Math.round(height *= maxWidth / width);\n          width = maxWidth;\n        }\n      } else {\n        if (height > maxHeight) {\n          // width *= max_height / height;\n          width = Math.round(width *= maxHeight / height);\n          height = maxHeight;\n        }\n      }\n\n      // resize the canvas and draw the image data into it\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, width, height);\n\n      var dataURI = canvas.toDataURL('image/png');\n      var binary = atob(dataURI.split(',')[1]);\n      var array = [];\n      for (var i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n      }\n      return new Blob([new Uint8Array(array)], { type: 'image/png' });\n    },\n\n    didInsertElement: function didInsertElement() {\n      var $input = this.$('input');\n      this.set('fileInputEl', $input[0]);\n      $input.on('change', this._fileChanged.bind(this));\n    }\n\n  });\n});","define('hospitalrun/tests/components/image-upload.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/image-upload.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/image-upload.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/inventory-location-picker', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    calculatedLocationPickers: null,\n    doingSetup: false,\n    label: null,\n    locationList: null,\n    quantityRequested: null,\n\n    locationChange: function locationChange() {\n      var doingSetup = this.get('doingSetup');\n      var locationList = this.get('locationList');\n      var locationPickers = this.get('calculatedLocationPickers');\n      var quantityRequested = this.get('quantityRequested');\n      var quantitySatisfiedIdx = -1;\n      var selectedLocations = [];\n      if (!doingSetup) {\n        locationPickers.reduce(function (previousValue, item, index) {\n          var selectedLocation = item.get('selectedLocation');\n          var returnValue = undefined;\n          if (_ember['default'].isEmpty(selectedLocation)) {\n            returnValue = previousValue;\n          } else {\n            returnValue = previousValue + selectedLocation.get('quantity');\n          }\n          if (quantitySatisfiedIdx === -1 && returnValue >= quantityRequested) {\n            quantitySatisfiedIdx = index;\n          }\n          return returnValue;\n        }, 0);\n        if (quantitySatisfiedIdx > -1) {\n          if (locationPickers.get('length') > quantitySatisfiedIdx + 1) {\n            locationPickers = locationPickers.slice(0, quantitySatisfiedIdx + 1);\n            this.set('calculatedLocationPickers', locationPickers);\n          }\n        } else {\n          locationPickers.addObject(_ember['default'].Object.create());\n        }\n        this._setupLocationPickers(locationPickers, locationList);\n      }\n      locationPickers.forEach(function (locationPicker) {\n        selectedLocations.addObject(locationPicker.get('selectedLocation'));\n      });\n      this.set('componentSelectedLocations', selectedLocations);\n    },\n\n    _setup: (function () {\n      _ember['default'].Binding.from('selectedLocations').to('componentSelectedLocations').connect(this);\n    }).on('init'),\n\n    _setupLocationPickers: function _setupLocationPickers(locationPickers, locationList, setInitialLocation) {\n      locationPickers.reduce(function (previousValue, item) {\n        var selectedLocation = item.get('selectedLocation');\n        item.set('subLocationList', previousValue.map(_hospitalrunUtilsSelectValues['default'].selectObjectMap));\n        if (!previousValue.includes(selectedLocation) || setInitialLocation) {\n          item.set('selectedLocation', previousValue.get('firstObject'));\n        }\n        item.set('label', 'And');\n        return previousValue.filter(function (location) {\n          return item.get('selectedLocation.id') !== location.get('id');\n        });\n      }, locationList);\n      var firstPicker = locationPickers.get('firstObject');\n      if (!_ember['default'].isEmpty(firstPicker)) {\n        firstPicker.set('label', this.get('label'));\n      }\n      this.set('calculatedLocationPickers', locationPickers);\n    },\n\n    locationPickers: (function () {\n      var locationList = this.get('locationList');\n      var locationPickers = [];\n      var quantityRequested = this.get('quantityRequested');\n      if (_ember['default'].isEmpty(locationList) || _ember['default'].isEmpty(quantityRequested)) {\n        // We need both a locationList and a quantityRequested\n        return;\n      }\n      this.set('doingSetup', true);\n      locationList.reduce(function (previousValue, location) {\n        if (previousValue < quantityRequested) {\n          locationPickers.addObject(_ember['default'].Object.create());\n        }\n        return previousValue + location.get('quantity');\n      }, 0);\n      this._setupLocationPickers(locationPickers, locationList, true);\n      this.locationChange();\n      this.set('doingSetup', false);\n      return this.get('calculatedLocationPickers');\n    }).property('calculatedLocationPickers', 'locationList', 'quantityRequested')\n  });\n});","define('hospitalrun/tests/components/inventory-location-picker.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/inventory-location-picker.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/inventory-location-picker.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/inventory-typeahead', ['exports', 'ember', 'hospitalrun/components/type-ahead'], function (exports, _ember, _hospitalrunComponentsTypeAhead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend({\n    classNameBindings: ['haveInventoryItems'],\n    displayKey: 'name',\n    showQuantity: true,\n    _mapInventoryItems: function _mapInventoryItems(item) {\n      var returnObj = {};\n      if (this.get('showQuantity') && item.quantity) {\n        returnObj.name = item.name + ' - ' + item.friendlyId + ' (' + item.quantity + ' available)';\n      } else {\n        returnObj.name = item.name + ' - ' + item.friendlyId;\n      }\n      returnObj[this.get('selectionKey')] = item;\n      return returnObj;\n    },\n\n    haveInventoryItems: (function () {\n      var content = this.get('content');\n      if (!_ember['default'].isEmpty(content) && content.length > 0) {\n        return 'have-inventory-items';\n      }\n    }).property('content'),\n\n    mappedContent: (function () {\n      var content = this.get('content');\n      var mapped = [];\n      if (content) {\n        mapped = content.map(this._mapInventoryItems.bind(this));\n      }\n      return mapped;\n    }).property('content'),\n\n    contentChanged: (function () {\n      var bloodhound = this.get('bloodhound');\n      var content = this.get('content');\n      if (bloodhound) {\n        bloodhound.clear();\n        bloodhound.add(content.map(this._mapInventoryItems.bind(this)));\n      }\n    }).observes('content.[]')\n  });\n});","define('hospitalrun/tests/components/inventory-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/inventory-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/inventory-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/item-listing', ['exports', 'ember', 'hospitalrun/mixins/paging-actions'], function (exports, _ember, _hospitalrunMixinsPagingActions) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsPagingActions['default'], {\n    classNames: ['panel', 'panel-primary']\n  });\n});","define('hospitalrun/tests/components/item-listing.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/item-listing.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/item-listing.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/loading-message', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'span',\n    showLoadingMessages: false,\n    loadingMessages: [(0, _emberI18n.translationMacro)('loading.messages.0'), (0, _emberI18n.translationMacro)('loading.messages.1'), (0, _emberI18n.translationMacro)('loading.messages.2'), (0, _emberI18n.translationMacro)('loading.messages.3'), (0, _emberI18n.translationMacro)('loading.messages.4'), (0, _emberI18n.translationMacro)('loading.messages.5'), (0, _emberI18n.translationMacro)('loading.messages.6'), (0, _emberI18n.translationMacro)('loading.messages.7'), (0, _emberI18n.translationMacro)('loading.messages.8'), (0, _emberI18n.translationMacro)('loading.messages.9'), (0, _emberI18n.translationMacro)('loading.messages.10'), (0, _emberI18n.translationMacro)('loading.messages.11')],\n\n    _setRandomMessage: function _setRandomMessage() {\n      var loadingMessages = this.get('loadingMessages');\n      var idx = Math.floor(Math.random() * loadingMessages.length);\n      this.set('message', loadingMessages[idx]);\n      this.set('timer', _ember['default'].run.later(this, this._setRandomMessage, 1000));\n    },\n\n    didInsertElement: function didInsertElement() {\n      this._setRandomMessage();\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      var timer = this.get('timer');\n      if (!_ember['default'].isEmpty(timer)) {\n        _ember['default'].run.cancel(timer);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/loading-message.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/loading-message.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/loading-message.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/location-select', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    locationPicker: null,\n\n    _setup: (function () {\n      this.locationChange = this.currentLocationChanged.bind(this);\n    }).on('init'),\n\n    currentLocationChanged: function currentLocationChanged(newLocation) {\n      this.get('locationPicker').set('selectedLocation', newLocation);\n      _ember['default'].run.once(this, function () {\n        this.get('parentView').locationChange();\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/components/location-select.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/location-select.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/location-select.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/modal-dialog', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    i18n: _ember['default'].inject.service(),\n    cancelAction: 'cancel',\n    closeModalAction: 'closeModal',\n    hideCancelButton: false,\n    hideUpdateButton: false,\n    isUpdateDisabled: false,\n    title: '',\n    updateButtonAction: '',\n    updateButtonClass: '',\n    updateButtonText: '',\n    cancelButtonText: '',\n    cancelBtnText: (function () {\n      var cancelText = this.get('cancelButtonText');\n      if (_ember['default'].isEmpty(cancelText)) {\n        return this.get('i18n').t('buttons.cancel');\n      } else {\n        return cancelText;\n      }\n    }).property('cancelButtonText'),\n    actions: {\n      cancelAction: function cancelAction() {\n        this.sendAction('cancelAction');\n      },\n      updateAction: function updateAction() {\n        this.sendAction('updateButtonAction');\n      }\n    },\n\n    didInsertElement: function didInsertElement() {\n      var $modal = this.$('.modal').modal();\n\n      $modal.on('hidden.bs.modal', (function () {\n        this.sendAction('closeModalAction');\n      }).bind(this));\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      var $modal = this.$('.modal');\n      $modal.off('hidden.bs.modal');\n      $modal.modal('hide');\n      // jquery fixes\n      $('body').removeClass('modal-open');\n      $('.modal-backdrop').remove();\n    }\n  });\n});","define('hospitalrun/tests/components/modal-dialog.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/modal-dialog.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/modal-dialog.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/nav-menu', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsUserSession['default'], {\n    tagName: 'div',\n    classNames: ['primary-nav-item'],\n    nav: null,\n\n    show: (function () {\n      this._setupSubNav();\n      return this.currentUserCan(this.get('nav').capability);\n    }).property('nav', 'session.data.authenticated.userCaps'),\n\n    isShowing: false,\n\n    _setup: (function () {\n      var nav = this.get('nav');\n      nav.closeSubnav = (function () {\n        this.set('isShowing', false);\n      }).bind(this);\n      this._setupSubNav();\n    }).on('init'),\n\n    _setupSubNav: function _setupSubNav() {\n      var _this = this;\n\n      var nav = this.get('nav');\n      nav.subnav.forEach(function (item) {\n        item.show = _this.currentUserCan(item.capability);\n      });\n    },\n\n    callNavAction: 'navAction',\n    callCloseSettings: 'closeSettings',\n\n    actions: {\n      toggleContent: function toggleContent() {\n        this.set('isShowing', !this.get('isShowing'));\n        this.sendAction('callNavAction', this.nav);\n      },\n\n      resetNav: function resetNav() {\n        this.sendAction('callCloseSettings');\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/nav-menu.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/nav-menu.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-menu.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/nav-paging', ['exports', 'ember', 'hospitalrun/mixins/paging-actions'], function (exports, _ember, _hospitalrunMixinsPagingActions) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsPagingActions['default'], {\n    classNames: ['paging-buttons'],\n    paginationProps: null\n  });\n});","define('hospitalrun/tests/components/nav-paging.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/nav-paging.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/nav-paging.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/number-input', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    sanitizeFunction: function sanitizeFunction(value) {\n      return value.replace(new RegExp(/([^0-9|.]+)/g), '');\n    },\n    tagName: '',\n    actions: {\n      sanitize: function sanitize(value) {\n        return this.get('sanitizeFunction')(value);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/number-input.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/number-input.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/number-input.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/patient-summary', ['exports', 'ember', 'hospitalrun/mixins/patient-diagnosis'], function (exports, _ember, _hospitalrunMixinsPatientDiagnosis) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsPatientDiagnosis['default'], {\n    classNames: ['patient-summary'],\n    disablePatientLink: false,\n    editProcedureAction: 'editProcedure',\n    patient: null,\n    patientProcedures: null,\n    showPatientAction: 'showPatient',\n    visits: null,\n\n    havePrimaryDiagnoses: (function () {\n      var primaryDiagnosesLength = this.get('primaryDiagnoses.length');\n      return primaryDiagnosesLength > 0;\n    }).property('primaryDiagnoses.length'),\n\n    haveProcedures: (function () {\n      var proceduresLength = this.get('patientProcedures.length');\n      return proceduresLength > 0;\n    }).property('patientProcedures.length'),\n\n    haveSecondaryDiagnoses: (function () {\n      var secondaryDiagnosesLength = this.get('secondaryDiagnoses.length');\n      return secondaryDiagnosesLength > 0;\n    }).property('secondaryDiagnoses.length'),\n\n    primaryDiagnoses: (function () {\n      var visits = this.get('visits');\n      return this.getPrimaryDiagnoses(visits);\n    }).property('visits.[]'),\n\n    secondaryDiagnoses: (function () {\n      var visits = this.get('visits');\n      return this.getSecondaryDiagnoses(visits);\n    }).property('visits.[]'),\n\n    shouldLinkToPatient: (function () {\n      var disablePatientLink = this.get('disablePatientLink');\n      return !disablePatientLink;\n    }).property('disablePatientLink'),\n\n    actions: {\n      linkToPatient: function linkToPatient() {\n        var shouldLink = this.get('shouldLinkToPatient');\n        if (shouldLink) {\n          var patient = this.get('patient');\n          var returnTo = this.get('returnTo');\n          var returnToContext = this.get('returnToContext');\n          patient.set('returnTo', returnTo);\n          patient.set('returnToContext', returnToContext);\n          this.sendAction('showPatientAction', this.get('patient'));\n        }\n      },\n      editProcedure: function editProcedure(procedure) {\n        procedure.set('returnToVisit', false);\n        procedure.set('returnToPatient', true);\n        procedure.set('patient', this.get('patient'));\n        this.sendAction('editProcedureAction', procedure);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/patient-summary.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/patient-summary.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/patient-summary.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/patient-typeahead', ['exports', 'ember', 'hospitalrun/mixins/patient-name', 'hospitalrun/components/type-ahead'], function (exports, _ember, _hospitalrunMixinsPatientName, _hospitalrunComponentsTypeAhead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend(_hospitalrunMixinsPatientName['default'], {\n    displayKey: 'name',\n    setOnBlur: true,\n\n    _mapPatient: function _mapPatient(item) {\n      var returnObj = {};\n      returnObj.name = this.getPatientDisplayName(item) + ' - ' + this.getPatientDisplayId(item);\n      returnObj[this.get('selectionKey')] = item;\n      return returnObj;\n    },\n\n    contentChanged: (function () {\n      var bloodhound = this.get('bloodhound');\n      var content = this.get('content');\n      if (bloodhound) {\n        bloodhound.clear();\n        if (!_ember['default'].isEmpty(content)) {\n          bloodhound.add(content.map(this._mapPatient.bind(this)));\n        }\n      }\n    }).observes('content.[]'),\n\n    mappedContent: (function () {\n      var content = this.get('content');\n      var mapped = [];\n      if (content) {\n        mapped = content.map(this._mapPatient.bind(this));\n      }\n      return mapped;\n    }).property('content')\n\n  });\n});","define('hospitalrun/tests/components/patient-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/patient-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/patient-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/photo-display', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    computedPhotoUrl: null,\n    filesystem: _ember['default'].inject.service(),\n    isFileSystemEnabled: _ember['default'].computed.alias('filesystem.isFileSystemEnabled'),\n    fileName: _ember['default'].computed.alias('photo.fileName'),\n    photo: null,\n    url: _ember['default'].computed.alias('photo.url'),\n\n    photoUrl: (function () {\n      var computedPhotoUrl = this.get('computedPhotoUrl');\n      var fileName = this.get('fileName');\n      var filesystem = this.get('filesystem');\n      var isFileSystemEnabled = this.get('isFileSystemEnabled');\n      var url = this.get('url');\n      if (!_ember['default'].isEmpty(computedPhotoUrl)) {\n        return computedPhotoUrl;\n      } else if (isFileSystemEnabled) {\n        filesystem.pathToFileSystemURL(fileName).then((function (photoUrl) {\n          if (!_ember['default'].isEmpty(photoUrl)) {\n            this.set('computedPhotoUrl', photoUrl);\n          }\n        }).bind(this));\n      }\n      return url;\n    }).property('computedPhotoUrl', 'fileName', 'url')\n  });\n});","define('hospitalrun/tests/components/photo-display.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/photo-display.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/photo-display.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/price-list', ['exports', 'ember', 'hospitalrun/mixins/charge-actions'], function (exports, _ember, _hospitalrunMixinsChargeActions) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend(_hospitalrunMixinsChargeActions['default'], {\n    attributeBindings: ['tabId:id', 'role'],\n    charges: _ember['default'].computed.alias('model.charges'),\n    classNameBindings: ['active'],\n    classNames: ['tab-pane'],\n    index: null,\n    model: null,\n    pricingList: null,\n    pricingType: null,\n    role: 'tab',\n    setChargeQuantityAction: 'setChargeQuantity',\n\n    active: (function () {\n      var index = this.get('index');\n      return index === 0;\n    }).property(),\n\n    pricingListByType: (function () {\n      var pricingList = this.get('pricingList');\n      var pricingType = this.get('pricingType');\n      var rows = [];\n      if (!_ember['default'].isEmpty(pricingList)) {\n        pricingList = pricingList.filterBy('pricingType', pricingType);\n        pricingList = pricingList.map((function (pricingItem) {\n          var chargesForItem = this.findChargeForPricingItem(pricingItem, this.get('charges'));\n          if (chargesForItem) {\n            this.sendAction('setChargeQuantityAction', pricingItem.id, chargesForItem.get('quantity'));\n          }\n          return pricingItem;\n        }).bind(this));\n        var offset = 0;\n        var _length = pricingList.length;\n        while (offset < _length) {\n          rows.push(pricingList.slice(offset, offset + 6));\n          offset += 6;\n        }\n      }\n      return rows;\n    }).property('pricingType', 'pricingList'),\n\n    tabId: (function () {\n      return this.get('pricingType').toLowerCase().dasherize();\n    }).property('pricingType')\n\n  });\n});","define('hospitalrun/tests/components/price-list.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/price-list.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/price-list.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/pricing-typeahead', ['exports', 'ember', 'hospitalrun/components/type-ahead'], function (exports, _ember, _hospitalrunComponentsTypeAhead) {\n  'use strict';\n\n  exports['default'] = _hospitalrunComponentsTypeAhead['default'].extend({\n    displayKey: 'name',\n    setOnBlur: true,\n\n    _mapContentItems: function _mapContentItems() {\n      var content = this.get('content');\n      if (content) {\n        var mapped = content.filter(function (item) {\n          return !_ember['default'].isEmpty(item);\n        });\n        mapped = mapped.map((function (item) {\n          var returnObj = {};\n          returnObj.name = item.name;\n          returnObj[this.get('selectionKey')] = item;\n          return returnObj;\n        }).bind(this));\n        return mapped;\n      } else {\n        return [];\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/pricing-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/pricing-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pricing-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/print-this', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    didInsertElement: function didInsertElement() {\n      _ember['default'].run.scheduleOnce('afterRender', this, function () {\n        window.print();\n      });\n    }\n  });\n});","define('hospitalrun/tests/components/print-this.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/print-this.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/print-this.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/quantity-calc', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    quantityGroups: null,\n    calculated: null,\n    currentUnit: null,\n    targetUnit: null,\n    unitList: null,\n\n    showTotal: (function () {\n      var calculated = this.get('calculated');\n      var quantityGroups = this.get('quantityGroups');\n      if (quantityGroups.length > 1 && !_ember['default'].isEmpty(calculated) && !isNaN(calculated)) {\n        return true;\n      }\n      return false;\n    }).property('calculated'),\n\n    currentQuantityGroups: (function () {\n      var calculated = this.get('calculated');\n      var firstQuantityObject = undefined;\n      var quantityGroups = this.get('quantityGroups');\n      var targetUnit = this.get('targetUnit');\n      if (_ember['default'].isEmpty(quantityGroups)) {\n        quantityGroups = new Array({\n          index: 0,\n          unit: targetUnit,\n          firstQuantity: true,\n          quantity: calculated\n        });\n        this.set('quantityGroups', quantityGroups);\n      }\n      firstQuantityObject = quantityGroups.get('firstObject');\n      if (!_ember['default'].isEmpty(firstQuantityObject)) {\n        var selectedUnit = firstQuantityObject.unit;\n        if (_ember['default'].isEmpty(selectedUnit)) {\n          this.set('quantityGroups.firstObject.unit', targetUnit);\n        } else {\n          this.updateCurrentUnit(selectedUnit, 0);\n        }\n      }\n      return quantityGroups;\n    }).property('quantityGroups', 'targetUnit'),\n\n    calculateTotal: function calculateTotal() {\n      var quantityGroups = this.get('quantityGroups');\n      var haveQuantities = false;\n      var lastObject = quantityGroups.get('lastObject');\n      var targetUnit = this.get('targetUnit');\n      haveQuantities = quantityGroups.every(function (item) {\n        var quantity = item.quantity;\n        var unit = item.unit;\n        return !_ember['default'].isEmpty(quantity) && !_ember['default'].isEmpty(unit) && !isNaN(quantity);\n      });\n      if (haveQuantities && lastObject.unit === targetUnit) {\n        var newValue = quantityGroups.reduce(function (previousValue, item) {\n          return previousValue * parseInt(item.quantity);\n        }, 1);\n        this.set('calculated', newValue);\n      } else {\n        this.set('calculated');\n      }\n    },\n\n    updateCurrentUnit: function updateCurrentUnit(selectedUnit, index) {\n      var targetUnit = this.get('targetUnit');\n      var quantityGroups = this.get('quantityGroups');\n      var groupLength = quantityGroups.length;\n      if (!_ember['default'].isEmpty(targetUnit)) {\n        if (selectedUnit === targetUnit) {\n          // Done\n          if (index < groupLength - 1) {\n            quantityGroups.removeAt(index + 1, groupLength - 1 - index);\n          }\n        } else {\n          if (index === groupLength - 1) {\n            quantityGroups.addObject({\n              unitName: selectedUnit,\n              unit: targetUnit,\n              index: quantityGroups.length\n            });\n          } else {\n            _ember['default'].set(quantityGroups.objectAt(index + 1), 'unitName', selectedUnit);\n          }\n        }\n        _ember['default'].run.once(this, this.calculateTotal);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/quantity-calc.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/quantity-calc.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/quantity-calc.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/quantity-conv', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    firstQuantity: false,\n    quantity: null,\n    quantityHelp: null,\n    unitName: null,\n    unit: null,\n    resetUnitName: false,\n    targetUnit: _ember['default'].computed.alias('parentView.targetUnit'),\n    unitList: null,\n\n    unitClass: (function () {\n      var selectedUnit = this.get('unit');\n      var targetUnit = this.get('targetUnit');\n      var unitClass = 'has-success';\n      if (!_ember['default'].isEmpty(targetUnit) && _ember['default'].isEmpty(selectedUnit)) {\n        this.set('unitHelp', 'please select a unit');\n        unitClass = 'has-error';\n      } else {\n        if (_ember['default'].isEmpty(targetUnit)) {\n          unitClass = '';\n        }\n        this.set('unitHelp');\n      }\n      this.get('parentView').updateCurrentUnit(selectedUnit, this.get('index'));\n      return unitClass;\n    }).property('targetUnit', 'unit'),\n\n    quantityClass: (function () {\n      var quantity = this.get('quantity');\n      var quantityClass = 'has-success';\n      var targetUnit = this.get('targetUnit');\n      if (!_ember['default'].isEmpty(targetUnit) && (_ember['default'].isEmpty(quantity) || isNaN(quantity))) {\n        this.set('quantityHelp', 'not a valid number');\n        quantityClass = 'has-error';\n      } else {\n        if (_ember['default'].isEmpty(targetUnit)) {\n          quantityClass = '';\n        }\n        this.set('quantityHelp');\n      }\n      _ember['default'].run.once(this, function () {\n        this.get('parentView').calculateTotal();\n      });\n      return quantityClass;\n    }).property('quantity', 'targetUnit')\n  });\n});","define('hospitalrun/tests/components/quantity-conv.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/quantity-conv.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/quantity-conv.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/role-select', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    // possible passed-in values with their defaults:\n    content: null,\n    prompt: null,\n    optionValuePath: 'roles',\n    optionLabelPath: 'name',\n    action: _ember['default'].K, // action to fire on change\n\n    // shadow the passed-in `selection` to avoid\n    // leaking changes to it via a 2-way binding\n    _selection: _ember['default'].computed.reads('selection'),\n\n    init: function init() {\n      this._super.apply(this, arguments);\n      if (!this.get('content')) {\n        this.set('content', []);\n      }\n    },\n\n    actions: {\n      change: function change() {\n        var selectEl = this.$('select')[0];\n        var selectedIndex = selectEl.selectedIndex;\n        var content = this.get('content');\n\n        // decrement index by 1 if we have a prompt\n        var hasPrompt = !!this.get('prompt');\n        var contentIndex = hasPrompt ? selectedIndex - 1 : selectedIndex;\n\n        var selection = content[contentIndex].roles;\n\n        // set the local, shadowed selection to avoid leaking\n        // changes to `selection` out via 2-way binding\n        this.set('_selection', selection);\n\n        var changeCallback = this.get('action');\n        changeCallback(selection);\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/role-select.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/role-select.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/role-select.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/search-listing', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    action: 'allItems',\n    actions: {\n      allItems: function allItems() {\n        this.sendAction();\n      }\n    }\n  });\n});","define('hospitalrun/tests/components/search-listing.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/search-listing.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/search-listing.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/select-or-typeahead', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    name: 'select-or-typeahead',\n    className: null,\n    hint: true,\n    label: null,\n    list: null,\n    optionLabelPath: 'value',\n    optionValuePath: 'id',\n    property: null,\n    prompt: ' ',\n    selection: null,\n    setOnBlur: true,\n    typeAheadType: null,\n\n    content: (function () {\n      var list = this.get('list');\n      var optionLabelPath = this.get('optionLabelPath');\n      var optionValuePath = this.get('optionValuePath');\n      var userCanAdd = this.get('userCanAdd');\n\n      if (!_ember['default'].isEmpty(list) && list.get) {\n        var contentList = list.get('value');\n        if (_ember['default'].isEmpty(contentList)) {\n          return [];\n        }\n\n        if (!userCanAdd && optionLabelPath === 'value' && optionValuePath === 'id') {\n          return contentList.map(_hospitalrunUtilsSelectValues['default'].selectValuesMap);\n        } else {\n          return contentList;\n        }\n      }\n    }).property('list'),\n\n    usePricingTypeAhead: (function () {\n      return this.get('typeAheadType') === 'pricing';\n    }).property('typeAheadType'),\n\n    userCanAdd: (function () {\n      var list = this.get('list');\n      if (!_ember['default'].isEmpty(list) && list.get) {\n        return list.get('userCanAdd');\n      } else {\n        return true;\n      }\n    }).property('list')\n  });\n});","define('hospitalrun/tests/components/select-or-typeahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/select-or-typeahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/select-or-typeahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/smart-prescription', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].TextArea.extend(_ember['default'].TargetActionSupport, {\n    valueDidChange: _ember['default'].observer('value', function () {\n      this.triggerAction({\n        action: 'search'\n      });\n    })\n  });\n});","define('hospitalrun/tests/components/smart-prescription.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/smart-prescription.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/smart-prescription.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/sortable-column', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    classNames: ['sortable-column'],\n    tagName: 'th',\n    action: 'sortByKey',\n    sortDesc: false,\n    sortBy: null,\n    sortKey: null,\n    sorted: (function () {\n      var sortBy = this.get('sortBy');\n      var sortKey = this.get('sortKey');\n      return sortBy === sortKey;\n    }).property('sortBy', 'sortKey'),\n\n    click: function click() {\n      var sortBy = this.get('sortBy');\n      var sorted = this.get('sorted');\n      var sortDesc = false;\n      if (sorted) {\n        sortDesc = this.toggleProperty('sortDesc');\n      }\n      this.sendAction('action', sortBy, sortDesc);\n    }\n  });\n});","define('hospitalrun/tests/components/sortable-column.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/sortable-column.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sortable-column.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/take-photo', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var takeAPicture = 'Take a Picture';\n  var uploadAFile = 'Upload a File';\n\n  // Derived from https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos and\n  // https://github.com/samdutton/simpl/blob/master/getusermedia/sources/js/main.js\n  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n  exports['default'] = _ember['default'].Component.extend({\n    canvas: null,\n    video: null,\n    photo: null,\n    photoFile: null,\n    width: 200,\n    height: 0,\n    selectedCamera: null,\n    videoSources: null,\n    photoSource: null,\n    photoSources: [takeAPicture, uploadAFile],\n    setupCamera: false,\n\n    /**\n     * Setup the specified camera\n     */\n    _cameraChange: function _cameraChange(selectedCamera) {\n      this.set('selectedCamera', selectedCamera);\n      var stream = this.get('stream');\n      var video = this.get('video');\n      if (!_ember['default'].isEmpty(stream)) {\n        video.src = null;\n        this._stopStream();\n      }\n      var videoSource = this.get('selectedCamera');\n      var constraints = {\n        audio: false,\n        video: {\n          optional: [{ sourceId: videoSource }]\n        }\n      };\n      navigator.getUserMedia(constraints, this._gotStream.bind(this), this._errorCallback);\n      this._setupVideo();\n    },\n\n    _errorCallback: function _errorCallback(error) {\n      console.log('navigator.getUserMedia error: ', error);\n    },\n\n    /**\n     * Callback for MediaStreamTrack.getSources\n     */\n    _gotSources: function _gotSources(sourceInfos) {\n      var cameraCount = 0;\n      var cameraLabel = undefined;\n      var videoSources = [];\n      for (var i = 0; i !== sourceInfos.length; ++i) {\n        var sourceInfo = sourceInfos[i];\n        if (sourceInfo.kind === 'video') {\n          cameraLabel = 'Camera \\'' + ++cameraCount;\n          if (sourceInfo.label) {\n            cameraLabel += ' (' + sourceInfo.label + ')';\n          }\n          videoSources.addObject({\n            id: sourceInfo.id,\n            label: cameraLabel\n          });\n        }\n      }\n      this.set('videoSources', videoSources);\n      if (videoSources.length > 0) {\n        this.set('selectedCamera', videoSources[0].id);\n        this.cameraChange(videoSources[0].id);\n      }\n    },\n\n    /**\n     * Callback handler for getUserMedia.\n     */\n    _gotStream: function _gotStream(stream) {\n      if (this.isDestroyed) {\n        this._stopStream(stream);\n      } else {\n        var video = this.get('video');\n        this.set('stream', stream); // make stream available to object\n        video.src = window.URL.createObjectURL(stream);\n        video.play();\n      }\n    },\n\n    _photoSourceChanged: function _photoSourceChanged(photoSource) {\n      var camera = this.$('.camera');\n      var fileUpload = this.$('.fileupload');\n      var setupCamera = this.get('setupCamera');\n      this.set('photoSource', photoSource);\n      if (photoSource === uploadAFile) {\n        fileUpload.show();\n        camera.hide();\n      } else {\n        fileUpload.hide();\n        camera.show();\n        if (!setupCamera) {\n          var canvas = this.$('canvas')[0];\n          var photo = this.$('img')[0];\n          var video = this.$('video')[0];\n          this.setProperties({\n            canvas: canvas,\n            photo: photo,\n            video: video\n          });\n          if (typeof MediaStreamTrack === 'undefined' || MediaStreamTrack.getSources === 'undefined') {\n            if (navigator.getUserMedia) {\n              navigator.getUserMedia({ audio: false, video: true }, this._gotStream.bind(this), this._errorCallback);\n              this._setupCanPlayListener(video);\n            }\n          } else {\n            MediaStreamTrack.getSources(this._gotSources.bind(this));\n            this._setupCanPlayListener(video);\n          }\n          this.set('setupCamera', true);\n        }\n      }\n    },\n\n    _setupCanPlayListener: function _setupCanPlayListener(video) {\n      // Remove listener if it was already added before.\n      video.removeEventListener('canplay', this._setupVideo.bind(this), false);\n      video.addEventListener('canplay', this._setupVideo.bind(this), false);\n    },\n\n    /**\n     * Setup the dimensions for the video preview and picture elements.\n     */\n    _setupVideo: function _setupVideo() {\n      var canvas = this.get('canvas');\n      var height = this.get('height');\n      var video = this.get('video');\n      var width = this.get('width');\n      height = video.videoHeight / (video.videoWidth / width);\n      video.setAttribute('width', width);\n      video.setAttribute('height', height);\n      canvas.setAttribute('width', width);\n      canvas.setAttribute('height', height);\n      this.setProperties({\n        height: height,\n        width: width\n      });\n    },\n\n    _setup: (function () {\n      this.cameraChange = this._cameraChange.bind(this);\n      this.photoSourceChange = this._photoSourceChanged.bind(this);\n      var photoSource = takeAPicture;\n      if (!this.get('canCaptureVideo')) {\n        photoSource = uploadAFile;\n      }\n      this.set('photoSource', photoSource);\n    }).on('init'),\n\n    _stopStream: function _stopStream(stream) {\n      var streamToStop = stream || this.get('stream');\n      if (!_ember['default'].isEmpty(streamToStop)) {\n        if (typeof streamToStop.active === 'undefined') {\n          streamToStop.stop();\n        } else {\n          var track = streamToStop.getTracks()[0];\n          track.stop();\n        }\n      }\n    },\n\n    actions: {\n      takePhoto: function takePhoto() {\n        var canvas = this.get('canvas');\n        var height = this.get('height');\n        var video = this.get('video');\n        var width = this.get('width');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.getContext('2d').drawImage(video, 0, 0, width, height);\n        var data = canvas.toDataURL('image/png');\n        var binary = atob(data.split(',')[1]);\n        var array = [];\n        for (var i = 0; i < binary.length; i++) {\n          array.push(binary.charCodeAt(i));\n        }\n        this.set('photoFile', new Blob([new Uint8Array(array)], { type: 'image/png' }));\n      }\n    },\n\n    canCaptureVideo: (function () {\n      if (navigator.getUserMedia) {\n        return true;\n      } else {\n        return false;\n      }\n    }).property(),\n\n    didInsertElement: function didInsertElement() {\n      var camera = this.$('.camera');\n      var fileUpload = this.$('.fileUpload');\n      if (camera.length === 1) {\n        fileUpload.hide();\n      }\n      this.photoSourceChange(this.get('photoSource'));\n    },\n\n    showCameraSelect: (function () {\n      var photoSource = this.get('photoSource');\n      var videoSources = this.get('videoSources');\n      return photoSource === takeAPicture && videoSources && videoSources.length > 1;\n    }).property('photoSource', 'videoSources'),\n\n    willDestroyElement: function willDestroyElement() {\n      this._stopStream();\n    }\n  });\n});","define('hospitalrun/tests/components/take-photo.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/take-photo.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/take-photo.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/text-search', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].TextField.extend(_ember['default'].TargetActionSupport, {\n    change: function change() {\n      this.triggerAction({\n        action: 'search'\n      });\n    },\n    didInsertElement: function didInsertElement() {\n      this.$().focus();\n    }\n  });\n});","define('hospitalrun/tests/components/text-search.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/text-search.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/text-search.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/components/type-ahead', ['exports', 'ember', 'ember-data', 'ember-rapid-forms/components/em-input'], function (exports, _ember, _emberData, _emberRapidFormsComponentsEmInput) {\n  'use strict';\n\n  exports['default'] = _emberRapidFormsComponentsEmInput['default'].extend({\n    _mapContentItems: function _mapContentItems() {\n      var content = this.get('content');\n      if (content) {\n        var mapped = content.filter(function (item) {\n          return !_ember['default'].isEmpty(item);\n        });\n        if (content instanceof _emberData['default'].RecordArray) {\n          mapped = mapped.map((function (item) {\n            var returnObj = item.getProperties(this.get('displayKey'));\n            returnObj[this.get('selectionKey')] = item;\n            return returnObj;\n          }).bind(this));\n        } else {\n          mapped = mapped.map((function (item) {\n            var returnObj = {};\n            returnObj[this.get('displayKey')] = item;\n            return returnObj;\n          }).bind(this));\n        }\n        return mapped;\n      } else {\n        return [];\n      }\n    },\n\n    mappedContent: (function () {\n      return this._mapContentItems();\n    }).property('content'),\n\n    contentChanged: (function () {\n      var bloodhound = this.get('bloodhound');\n      if (bloodhound) {\n        bloodhound.clear();\n        bloodhound.add(this._mapContentItems());\n      }\n    }).observes('content.[]'),\n\n    bloodhound: null,\n    displayKey: 'value',\n    selectionKey: 'value',\n    hint: true,\n    highlight: true,\n    lastHint: null,\n    limit: 500,\n    minlength: 1,\n    selectedItem: false,\n    inputElement: null,\n    typeAhead: null,\n    setOnBlur: true,\n    templates: null,\n\n    _getSource: function _getSource() {\n      var typeAheadBloodhound = new Bloodhound({\n        datumTokenizer: Bloodhound.tokenizers.obj.whitespace(this.get('displayKey')),\n        queryTokenizer: Bloodhound.tokenizers.whitespace,\n        local: this.get('mappedContent')\n      });\n      typeAheadBloodhound.initialize();\n      this.set('bloodhound', typeAheadBloodhound);\n      return typeAheadBloodhound.ttAdapter();\n    },\n\n    didInsertElement: function didInsertElement() {\n      var $input = this.$('input');\n      this.set('inputElement', $input);\n      var $typeahead = $input.typeahead({\n        autoselect: true,\n        hint: this.get('hint'),\n        highlight: this.get('highlight'),\n        minLength: this.get('minlength')\n      }, {\n        displayKey: this.get('displayKey'),\n        limit: this.get('limit'),\n        source: this._getSource(),\n        templates: this.get('templates')\n      });\n      this.set('typeAhead', $typeahead);\n\n      $typeahead.on('typeahead:selected', (function (event, item) {\n        this.set('selection', item[this.get('selectionKey')]);\n        this.set('selectedItem', true);\n      }).bind(this));\n\n      $typeahead.on('typeahead:autocompleted', (function (event, item) {\n        this.set('selection', item[this.get('selectionKey')]);\n        this.set('selectedItem', true);\n      }).bind(this));\n\n      if (this.get('setOnBlur')) {\n        $input.on('keyup', (function () {\n          var $hint = this.$('.tt-hint');\n          var hintValue = $hint.val();\n          this.set('lastHint', hintValue);\n          this.set('selectedItem', false);\n        }).bind(this));\n\n        $input.on('blur', (function (event) {\n          var _this = this;\n\n          var selection = this.get('selection');\n          var targetValue = event.target.value.trim();\n          if (!_ember['default'].isEmpty(selection)) {\n            if (selection.trim) {\n              selection = selection.trim();\n            }\n            this.set('selection', selection);\n          }\n          if (!this.get('selectedItem')) {\n            (function () {\n              var lastHint = _this.get('lastHint');\n              var exactMatch = false;\n              if (_ember['default'].isEmpty(lastHint)) {\n                lastHint = targetValue;\n                exactMatch = true;\n              }\n              if (!_ember['default'].isEmpty(targetValue) && !_ember['default'].isEmpty(lastHint)) {\n                _this.get('bloodhound').search(lastHint, (function (suggestions) {\n                  if (suggestions.length > 0) {\n                    if (!exactMatch || lastHint.toLowerCase() === suggestions[0][this.get('displayKey')].toLowerCase()) {\n                      this.set('selectedItem', true);\n                      this.set('selection', suggestions[0][this.get('selectionKey')]);\n                      event.target.value = suggestions[0][this.get('displayKey')];\n                      this.get('model').set(this.get('propertyName'), event.target.value);\n                    }\n                  } else if (targetValue !== selection) {\n                    this.set('selection');\n                  }\n                }).bind(_this));\n              } else if (_ember['default'].isEmpty(targetValue)) {\n                _this.set('selection');\n              }\n            })();\n          }\n        }).bind(this));\n      }\n    },\n\n    willDestroyElement: function willDestroyElement() {\n      this.get('inputElement').typeahead('destroy');\n    }\n\n  });\n});","define('hospitalrun/tests/components/type-ahead.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - components/type-ahead.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/type-ahead.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/abstract-delete-controller', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend({\n    afterDeleteAction: 'closeModal',\n    showUpdateButton: true,\n    updateButtonText: 'Delete',\n    updateButtonAction: 'delete',\n\n    isUpdateDisabled: false,\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      'delete': function _delete() {\n        var recordToDelete = this.get('model');\n        recordToDelete.set('archived', true);\n        recordToDelete.save().then((function () {\n          recordToDelete.unloadRecord();\n          this.send(this.get('afterDeleteAction'), recordToDelete);\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/controllers/abstract-delete-controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/abstract-delete-controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/abstract-delete-controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/abstract-edit-controller', ['exports', 'ember', 'hospitalrun/mixins/edit-panel-props', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsEditPanelProps, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunMixinsModalHelper, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsEditPanelProps['default'], _hospitalrunMixinsIsUpdateDisabled['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsUserSession['default'], {\n    cancelAction: 'allItems',\n\n    cancelButtonText: (function () {\n      var i18n = this.get('i18n');\n      var hasDirtyAttributes = this.get('model.hasDirtyAttributes');\n      if (hasDirtyAttributes) {\n        return i18n.t('buttons.cancel');\n      } else {\n        return i18n.t('buttons.returnButton');\n      }\n    }).property('model.hasDirtyAttributes'),\n\n    disabledAction: (function () {\n      var isValid = this.get('model.isValid');\n      if (!isValid) {\n        return 'showDisabledDialog';\n      }\n    }).property('model.isValid'),\n\n    isNewOrDeleted: (function () {\n      return this.get('model.isNew') || this.get('model.isDeleted');\n    }).property('model.isNew', 'model.isDeleted'),\n\n    /**\n     *  Lookup lists that should be updated when the model has a new value to add to the lookup list.\n     *  lookupListsToUpdate: [{\n     *      name: 'countryList', //Name of property containing lookup list\n     *      property: 'country', //Corresponding property on model that potentially contains a new value to add to the list\n     *      id: 'country_list' //Id of the lookup list to update\n     *  }\n     */\n    lookupListsToUpdate: null,\n\n    showUpdateButton: (function () {\n      var updateButtonCapability = this.get('updateCapability');\n      return this.currentUserCan(updateButtonCapability);\n    }).property('updateCapability'),\n\n    updateButtonAction: 'update',\n    updateButtonText: (function () {\n      var i18n = this.get('i18n');\n      if (this.get('model.isNew')) {\n        return i18n.t('buttons.add');\n      } else {\n        return i18n.t('buttons.update');\n      }\n    }).property('model.isNew'),\n    updateCapability: null,\n\n    /**\n     * Add the specified value to the lookup list if it doesn't already exist in the list.\n     * @param lookupList array the lookup list to add to.\n     * @param value string the value to add.\n     * @param listsToUpdate array the lookup lists that need to be saved.\n     * @param listsName string name of the list to add the value to.\n     */\n    _addValueToLookupList: function _addValueToLookupList(lookupList, value, listsToUpdate, listName) {\n      var lookupListValues = lookupList.get('value');\n      if (!_ember['default'].isArray(lookupListValues)) {\n        lookupListValues = [];\n      }\n      if (!lookupListValues.includes(value)) {\n        lookupListValues.push(value);\n        lookupListValues.sort();\n        lookupList.set('value', lookupListValues);\n        if (!listsToUpdate.includes(lookupList)) {\n          listsToUpdate.push(lookupList);\n        }\n        this.set(listName, lookupList);\n      }\n    },\n\n    _cancelUpdate: function _cancelUpdate() {\n      var cancelledItem = this.get('model');\n      cancelledItem.rollbackAttributes();\n    },\n\n    actions: {\n      cancel: function cancel() {\n        this._cancelUpdate();\n        this.send(this.get('cancelAction'));\n      },\n\n      returnTo: function returnTo() {\n        this._cancelUpdate();\n        var returnTo = this.get('model.returnTo');\n        var returnToContext = this.get('model.returnToContext');\n        if (_ember['default'].isEmpty(returnToContext)) {\n          this.transitionToRoute(returnTo);\n        } else {\n          this.transitionToRoute(returnTo, returnToContext);\n        }\n      },\n\n      showDisabledDialog: function showDisabledDialog() {\n        this.displayAlert('Warning!!!!', 'Please fill in required fields (marked with *) and correct the errors before saving.');\n      },\n\n      /**\n       * Update the model and perform the before update and after update\n       * @param skipAfterUpdate boolean (optional) indicating whether or not\n       * to skip the afterUpdate call.\n       */\n      update: function update(skipAfterUpdate) {\n        var _this = this;\n\n        try {\n          this.beforeUpdate().then(function () {\n            _this.saveModel(skipAfterUpdate);\n          })['catch'](function (err) {\n            if (!err.ignore) {\n              _this.displayAlert('Error!!!!', 'An error occurred while attempting to save: ' + JSON.stringify(err));\n            }\n          });\n        } catch (ex) {\n          this.displayAlert('Error!!!!', 'An error occurred while attempting to save: ' + ex);\n        }\n      }\n    },\n\n    /**\n     * Override this function to perform logic after record update\n     * @param record the record that was just updated.\n     */\n    afterUpdate: function afterUpdate() {},\n\n    /**\n     * Override this function to perform logic before record update.\n     * @returns {Promise} Promise that resolves after before update is done.\n     */\n    beforeUpdate: function beforeUpdate() {\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    /**\n     * Save the model and then (optionally) run the after update.\n     * @param skipAfterUpdate boolean (optional) indicating whether or not\n     * to skip the afterUpdate call.\n     */\n    saveModel: function saveModel(skipAfterUpdate) {\n      this.get('model').save().then((function (record) {\n        this.updateLookupLists();\n        if (!skipAfterUpdate) {\n          this.afterUpdate(record);\n        }\n      }).bind(this));\n    },\n\n    /**\n     * Update any new values added to a lookup list\n     */\n    updateLookupLists: function updateLookupLists() {\n      var lookupLists = this.get('lookupListsToUpdate');\n      var listsToUpdate = _ember['default'].A();\n      if (!_ember['default'].isEmpty(lookupLists)) {\n        lookupLists.forEach((function (list) {\n          var propertyValue = this.get(list.property);\n          var lookupList = this.get(list.name);\n          var store = this.get('store');\n          if (!_ember['default'].isEmpty(propertyValue)) {\n            if (!lookupList) {\n              lookupList = store.push(store.normalize('lookup', {\n                id: list.id,\n                value: [],\n                userCanAdd: true\n              }));\n            }\n            if (_ember['default'].isArray(propertyValue)) {\n              propertyValue.forEach((function (value) {\n                this._addValueToLookupList(lookupList, value, listsToUpdate, list.name);\n              }).bind(this));\n            } else {\n              this._addValueToLookupList(lookupList, propertyValue, listsToUpdate, list.name);\n            }\n          }\n        }).bind(this));\n        listsToUpdate.forEach(function (list) {\n          list.save();\n        });\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/controllers/abstract-edit-controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/abstract-edit-controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/abstract-edit-controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/abstract-paged-controller', ['exports', 'ember', 'hospitalrun/mixins/pagination-props', 'hospitalrun/mixins/progress-dialog', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsPaginationProps, _hospitalrunMixinsProgressDialog, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsPaginationProps['default'], _hospitalrunMixinsProgressDialog['default'], _hospitalrunMixinsUserSession['default'], {\n    addPermission: null,\n    deletePermission: null,\n    nextStartKey: null,\n    previousStartKey: null,\n    previousStartKeys: [],\n    progressMessage: 'Loading Records.  Please wait...',\n    progressTitle: 'Loading',\n    queryParams: ['startKey', 'sortKey', 'sortDesc'],\n    sortDesc: false,\n    sortKey: null,\n\n    canAdd: (function () {\n      return this.currentUserCan(this.get('addPermission'));\n    }).property(),\n\n    canDelete: (function () {\n      return this.currentUserCan(this.get('deletePermission'));\n    }).property(),\n\n    canEdit: (function () {\n      // Default to using add permission\n      return this.currentUserCan(this.get('addPermission'));\n    }).property(),\n\n    showActions: (function () {\n      return this.get('canAdd') || this.get('canEdit') || this.get('canDelete');\n    }).property('canAdd', 'canEdit', 'canDelete'),\n\n    disablePreviousPage: (function () {\n      return _ember['default'].isEmpty(this.get('previousStartKey'));\n    }).property('previousStartKey'),\n\n    disableNextPage: (function () {\n      return _ember['default'].isEmpty(this.get('nextStartKey'));\n    }).property('nextStartKey'),\n\n    showPagination: (function () {\n      return !_ember['default'].isEmpty(this.get('previousStartKey')) || !_ember['default'].isEmpty(this.get('nextStartKey'));\n    }).property('nextStartKey', 'previousStartKey'),\n\n    hasRecords: _ember['default'].computed('model.length', {\n      get: function get() {\n        var model = this.get('model');\n        if (!_ember['default'].isEmpty(model)) {\n          return model.get('length') > 0;\n        } else {\n          return false;\n        }\n      }\n    }),\n\n    actions: {\n      nextPage: function nextPage() {\n        var key = this.get('nextStartKey');\n        var previousStartKeys = this.get('previousStartKeys');\n        var firstKey = this.get('firstKey');\n        this.set('previousStartKey', firstKey);\n        previousStartKeys.push(firstKey);\n        this.set('startKey', key);\n        this.showProgressModal();\n      },\n      previousPage: function previousPage() {\n        var key = this.get('previousStartKey');\n        var previousStartKeys = this.get('previousStartKeys');\n        previousStartKeys.pop();\n        this.set('startKey', key);\n        this.set('previousStartKey', previousStartKeys.pop());\n        this.set('previousStartKeys', previousStartKeys);\n        this.showProgressModal();\n      },\n      sortByKey: function sortByKey(sortKey, sortDesc) {\n        this.setProperties({\n          previousStartKey: null,\n          previousStartKeys: [],\n          sortDesc: sortDesc,\n          sortKey: sortKey,\n          startKey: null\n        });\n        this.showProgressModal();\n      }\n    }\n  });\n});","define('hospitalrun/tests/controllers/abstract-paged-controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/abstract-paged-controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/abstract-paged-controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/abstract-report-controller', ['exports', 'ember', 'hospitalrun/mixins/date-format', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/pagination-props', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog'], function (exports, _ember, _hospitalrunMixinsDateFormat, _hospitalrunMixinsModalHelper, _hospitalrunMixinsNumberFormat, _hospitalrunMixinsPaginationProps, _hospitalrunMixinsPouchdb, _hospitalrunMixinsProgressDialog) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsNumberFormat['default'], _hospitalrunMixinsPaginationProps['default'], _hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsProgressDialog['default'], {\n    defaultErrorMessage: 'An error was encountered while generating the requested report.  Please let your system administrator know that you have encountered an error.',\n    offset: 0,\n    limit: 25,\n    progressMessage: 'Please wait while your report is generated.',\n    progressTitle: 'Generating Report',\n    reportColumns: null,\n    reportHeaders: null,\n    reportRows: [],\n    reportTitle: null,\n    reportType: null,\n    reportTypes: null,\n    showFirstPageButton: true,\n    showLastPageButton: true,\n    showReportResults: false,\n\n    /**\n     * Add a row to the report using the selected columns to add the row.\n     * @param {Array} row the row to add\n     * @param {boolean} skipFormatting true if formatting should be skipped.\n     * @param reportColumns {Object} the columns to display on the report;\n     * optional, if not set, the property reportColumns on the controller\n     * will be used.\n     * @param reportAction {Object} action to fire on row when row is clicked.\n     */\n    _addReportRow: function _addReportRow(row, skipFormatting, reportColumns, rowAction) {\n      var columnValue = undefined;\n      var reportRows = this.get('reportRows');\n      var reportRow = [];\n      if (_ember['default'].isEmpty(reportColumns)) {\n        reportColumns = this.get('reportColumns');\n      }\n      for (var column in reportColumns) {\n        if (reportColumns[column].include) {\n          columnValue = _ember['default'].get(row, reportColumns[column].property);\n          if (_ember['default'].isEmpty(columnValue)) {\n            reportRow.push('');\n          } else if (reportColumns[column].format === '_numberFormat') {\n            if (skipFormatting) {\n              reportRow.push(columnValue);\n            } else {\n              reportRow.push(this._numberFormat(columnValue));\n            }\n          } else if (!skipFormatting && reportColumns[column].format) {\n            reportRow.push(this[reportColumns[column].format](columnValue));\n          } else {\n            reportRow.push(columnValue);\n          }\n        }\n      }\n      if (rowAction) {\n        reportRows.addObject({\n          rowAction: rowAction,\n          row: reportRow\n        });\n      } else {\n        reportRows.addObject(reportRow);\n      }\n    },\n\n    /**\n     * Finish up the report by setting headers, titles and export.\n     * @param reportColumns {Object} the columns to display on the report;\n     * optional, if not set, the property reportColumns on the controller\n     * will be used.\n     */\n    _finishReport: function _finishReport(reportColumns) {\n      this.set('showReportResults', true);\n      this.set('offset', 0);\n      this._setReportHeaders(reportColumns);\n      this._setReportTitle();\n      this._generateExport();\n      this.closeProgressModal();\n    },\n\n    _generateExport: function _generateExport() {\n      var csvRows = [];\n      var reportHeaders = this.get('reportHeaders');\n      var dataArray = [reportHeaders];\n      dataArray.addObjects(this.get('reportRows'));\n      dataArray.forEach(function (reportRow) {\n        var rowToAdd = undefined;\n        if (reportRow.row) {\n          rowToAdd = reportRow.row;\n        } else {\n          rowToAdd = reportRow;\n        }\n        rowToAdd = rowToAdd.map(function (column) {\n          if (!column) {\n            return '';\n          } else if (column.replace) {\n            return column.replace('\"', '\"\"');\n          } else {\n            return column;\n          }\n        });\n        csvRows.push('\"' + rowToAdd.join('\",\"') + '\"');\n      });\n      var csvString = csvRows.join('\\r\\n');\n      var uriContent = 'data:application/csv;charset=utf-8,' + encodeURIComponent(csvString);\n      this.set('csvExport', uriContent);\n    },\n\n    _notifyReportError: function _notifyReportError(errorMessage) {\n      var alertMessage = 'An error was encountered while generating the requested report.  Please let your system administrator know that you have encountered an error.';\n      this.closeProgressModal();\n      this.displayAlert('Error Generating Report', alertMessage);\n      throw new Error(errorMessage);\n    },\n\n    _setReportHeaders: function _setReportHeaders(reportColumns) {\n      var reportHeaders = [];\n      if (_ember['default'].isEmpty(reportColumns)) {\n        reportColumns = this.get('reportColumns');\n      }\n      for (var column in reportColumns) {\n        if (reportColumns[column].include) {\n          reportHeaders.push(reportColumns[column].label);\n        }\n      }\n      this.set('reportHeaders', reportHeaders);\n    },\n\n    _setReportTitle: function _setReportTitle() {\n      var endDate = this.get('endDate');\n      var formattedEndDate = '';\n      var formattedStartDate = '';\n      var reportType = this.get('reportType');\n      var reportTypes = this.get('reportTypes');\n      var startDate = this.get('startDate');\n      if (!_ember['default'].isEmpty(endDate)) {\n        formattedEndDate = moment(endDate).format('l');\n      }\n\n      var reportDesc = reportTypes.findBy('value', reportType);\n      if (_ember['default'].isEmpty(startDate)) {\n        this.set('reportTitle', reportDesc.name + ' Report ' + formattedEndDate);\n      } else {\n        formattedStartDate = moment(startDate).format('l');\n        this.set('reportTitle', reportDesc.name + ' Report ' + formattedStartDate + ' - ' + formattedEndDate);\n      }\n    },\n\n    actions: {\n      firstPage: function firstPage() {\n        this.set('offset', 0);\n      },\n\n      nextPage: function nextPage() {\n        var limit = this.get('limit');\n        this.incrementProperty('offset', limit);\n      },\n\n      previousPage: function previousPage() {\n        var limit = this.get('limit');\n        this.decrementProperty('offset', limit);\n      },\n\n      lastPage: function lastPage() {\n        var reportRowLength = this.get('reportRows.length');\n        var limit = this.get('limit');\n        var pages = parseInt(reportRowLength / limit);\n        this.set('offset', pages * limit);\n      }\n\n    },\n\n    currentReportRows: (function () {\n      var limit = this.get('limit');\n      var offset = this.get('offset');\n      var reportRows = this.get('reportRows');\n      return reportRows.slice(offset, offset + limit);\n    }).property('reportRows.[]', 'offset', 'limit'),\n\n    disablePreviousPage: (function () {\n      return this.get('offset') === 0;\n    }).property('offset'),\n\n    disableNextPage: (function () {\n      var limit = this.get('limit');\n      var length = this.get('reportRows.length');\n      var offset = this.get('offset');\n      return offset + limit >= length;\n    }).property('offset', 'limit', 'reportRows.length'),\n\n    showPagination: (function () {\n      var length = this.get('reportRows.length');\n      var limit = this.get('limit');\n      return length > limit;\n    }).property('reportRows.length')\n\n  });\n});","define('hospitalrun/tests/controllers/abstract-report-controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/abstract-report-controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/abstract-report-controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/application', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend({\n    filesystem: _ember['default'].inject.service(),\n    session: _ember['default'].inject.service(),\n    _setup: (function () {\n      var fileSystem = this.get('filesystem');\n      fileSystem.setup();\n    }).on('init')\n  });\n});","define('hospitalrun/tests/controllers/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/index', ['exports', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsUserSession['default'], {\n    indexLinks: ['Appointments', 'Labs', 'Imaging', 'Inventory', 'Medication', 'Patients', 'Users'],\n\n    setupPermissions: (function () {\n      var permissions = this.get('defaultCapabilities');\n      for (var capability in permissions) {\n        if (this.currentUserCan(capability)) {\n          this.set('userCan_' + capability, true);\n        }\n      }\n    }).on('init'),\n\n    activeLinks: (function () {\n      var activeLinks = [];\n      var indexLinks = this.get('indexLinks');\n      indexLinks.forEach((function (link) {\n        var action = link.toLowerCase();\n        if (this.currentUserCan(action)) {\n          activeLinks.push({\n            action: action,\n            text: link\n          });\n        }\n      }).bind(this));\n      return activeLinks;\n    }).property('indexLinks')\n\n  });\n});","define('hospitalrun/tests/controllers/index.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/index.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/login', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var LoginController = _ember['default'].Controller.extend({\n    session: _ember['default'].inject.service(),\n    errorMessage: null,\n    identification: null,\n    password: null,\n\n    actions: {\n      authenticate: function authenticate() {\n        var _this = this;\n\n        var _getProperties = this.getProperties('identification', 'password');\n\n        var identification = _getProperties.identification;\n        var password = _getProperties.password;\n\n        this.get('session').authenticate('authenticator:custom', {\n          identification: identification,\n          password: password\n        })['catch'](function (error) {\n          _this.set('errorMessage', error.reason);\n        });\n      }\n    }\n  });\n\n  exports['default'] = LoginController;\n});","define('hospitalrun/tests/controllers/login.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/login.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/controllers/navigation', ['exports', 'ember', 'hospitalrun/mixins/hospitalrun-version', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/progress-dialog', 'hospitalrun/mixins/user-session', 'hospitalrun/mixins/navigation'], function (exports, _ember, _hospitalrunMixinsHospitalrunVersion, _hospitalrunMixinsModalHelper, _hospitalrunMixinsProgressDialog, _hospitalrunMixinsUserSession, _hospitalrunMixinsNavigation) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsHospitalrunVersion['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsProgressDialog['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsNavigation['default'], {\n    ajax: _ember['default'].inject.service(),\n    application: _ember['default'].inject.controller(),\n    allowSearch: false,\n    config: _ember['default'].inject.service(),\n    currentSearchText: null,\n    currentRouteName: _ember['default'].computed.alias('application.currentRouteName'),\n    progressTitle: 'Searching',\n    searchRoute: null,\n    session: _ember['default'].inject.service(),\n    syncStatus: '',\n    currentOpenNav: null,\n\n    actions: {\n      about: function about() {\n        var _this = this;\n\n        var version = this.get('version');\n        this.get('ajax').request('/serverinfo').then(function (siteInfo) {\n          var message = 'Version: ' + version;\n          if (!_ember['default'].isEmpty(siteInfo)) {\n            message += ' Site Info: ' + siteInfo;\n          }\n          _this.displayAlert(_this.get('i18n').t('navigation.about'), message);\n        });\n      },\n\n      invalidateSession: function invalidateSession() {\n        var session = this.get('session');\n        if (session.get('isAuthenticated')) {\n          session.invalidate();\n        }\n      },\n\n      search: function search() {\n        if (this.allowSearch && this.searchRoute) {\n          var currentRouteName = this.get('currentRouteName');\n          var currentSearchText = this.get('currentSearchText');\n          var textToFind = this.get('searchText');\n          if (currentSearchText !== textToFind || currentRouteName.indexOf('.search') === -1) {\n            this.set('searchText', '');\n            this.set('progressMessage', 'Searching for ' + textToFind + '. Please wait...');\n            this.showProgressModal();\n            this.transitionToRoute(this.searchRoute + '/' + textToFind);\n          }\n        }\n      },\n\n      navAction: function navAction(nav) {\n        if (this.currentOpenNav && this.currentOpenNav.route !== nav.route) {\n          this.currentOpenNav.closeSubnav();\n        }\n        this.currentOpenNav = nav;\n        this.transitionToRoute(nav.route);\n        this.set('isShowingSettings', false);\n      },\n\n      toggleSettings: function toggleSettings() {\n        this.toggleProperty('isShowingSettings');\n      },\n\n      closeSettings: function closeSettings() {\n        this.set('isShowingSettings', false);\n      }\n\n    }\n  });\n});","define('hospitalrun/tests/controllers/navigation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - controllers/navigation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/navigation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/dialog/controller', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend({\n    showUpdateButton: true,\n    isUpdateDisabled: false,\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      confirm: function confirm() {\n        var confirmAction = this.getWithDefault('model.confirmAction', 'model.confirm');\n        this.send(confirmAction, this.get('model'));\n        this.send('closeModal');\n      },\n\n      ok: function ok() {\n        var okAction = this.get('model.okAction');\n        if (!_ember['default'].isEmpty(okAction)) {\n          this.send(okAction, this.get('model'));\n        }\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/dialog/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - dialog/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'dialog/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/finishgauth/route', ['exports', 'ember', 'hospitalrun/mixins/setup-user-role'], function (exports, _ember, _hospitalrunMixinsSetupUserRole) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsSetupUserRole['default'], {\n    config: _ember['default'].inject.service(),\n    database: _ember['default'].inject.service(),\n    session: _ember['default'].inject.service(),\n    model: function model(params) {\n      var _this = this;\n\n      if (params.k && params.s1 && params.s2 && params.t) {\n        var _ret = (function () {\n          _this.get('session').authenticate('authenticator:custom', {\n            google_auth: true,\n            params: params\n          });\n          var oauthConfigs = {\n            config_consumer_key: params.k,\n            config_consumer_secret: params.s1,\n            config_oauth_token: params.t,\n            config_token_secret: params.s2\n          };\n          return {\n            v: _this.get('config').saveOauthConfigs(oauthConfigs).then((function () {\n              var _this2 = this;\n\n              oauthConfigs.config_use_google_auth = true;\n              return this.get('database').setup(oauthConfigs).then(function () {\n                return _this2.setupUserRole();\n              });\n            }).bind(_this))\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n    }\n  });\n});","define('hospitalrun/tests/finishgauth/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - finishgauth/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'finishgauth/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/authenticate-user', ['exports', 'ember', 'hospitalrun/tests/helpers/ember-simple-auth'], function (exports, _ember, _hospitalrunTestsHelpersEmberSimpleAuth) {\n  'use strict';\n\n  var merge = _ember['default'].merge;\n\n  _ember['default'].Test.registerHelper('authenticateUser', function (app) {\n    var attrs = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    var expiresAt = new Date().getTime() + 600000;\n    (0, _hospitalrunTestsHelpersEmberSimpleAuth.authenticateSession)(app, merge({\n      name: 'hradmin',\n      roles: ['System Administrator', 'admin', 'user'],\n      expires_at: expiresAt,\n      role: 'System Administrator',\n      prefix: 'p1'\n    }, attrs));\n  });\n\n  _ember['default'].Test.registerHelper('invalidateSession', function (app) {\n    (0, _hospitalrunTestsHelpersEmberSimpleAuth.invalidateSession)(app);\n  });\n});","define('hospitalrun/tests/helpers/authenticate-user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/authenticate-user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/authenticate-user.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/date-format', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Helper.helper(function (params, hash) {\n    if (!_ember['default'].isEmpty(params[0])) {\n      var dateFormat = 'l';\n      var date = params[0];\n      if (hash && hash.format) {\n        dateFormat = hash.format;\n      }\n      return moment(date).format(dateFormat);\n    }\n  });\n});","define('hospitalrun/tests/helpers/date-format.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/date-format.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/date-format.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('hospitalrun/tests/helpers/destroy-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/destroy-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof ok === 'function') {\n      return function (element, key, text) {\n        ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('hospitalrun/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember', 'ember-keyboard'], function (exports, _ember, _emberKeyboard) {\n\n  var keyEvent = function keyEvent(app, attributes, type) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (['ctrl', 'meta', 'alt', 'shift'].indexOf(attribute) > -1) {\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(document, type, event);\n  };\n\n  exports['default'] = function () {\n    _ember['default'].Test.registerAsyncHelper('keyDown', function (app, attributes) {\n      return keyEvent(app, attributes, 'keydown');\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyUp', function (app, attributes) {\n      return keyEvent(app, attributes, 'keyup');\n    });\n\n    _ember['default'].Test.registerAsyncHelper('keyPress', function (app, attributes) {\n      return keyEvent(app, attributes, 'keypress');\n    });\n  };\n});","define('hospitalrun/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('hospitalrun/tests/helpers/html-line-break', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1);\n\n    var text = _ref2[0];\n\n    if (text !== null && typeof text !== 'undefined') {\n      return _ember['default'].String.htmlSafe(text.replace(/\\n/g, '<br>'));\n    } else {\n      return null;\n    }\n  });\n});","define('hospitalrun/tests/helpers/html-line-break.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/html-line-break.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/html-line-break.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/is-equal-array', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var lhs = _ref2[0];\n    var rhs = _ref2[1];\n\n    if (!_ember['default'].isArray(lhs) || !_ember['default'].isArray(rhs) || lhs.get('length') !== rhs.get('length')) {\n      return false;\n    }\n    return lhs.every(function (item) {\n      return rhs.includes(item);\n    });\n  });\n});","define('hospitalrun/tests/helpers/is-equal-array.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/is-equal-array.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-equal-array.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/is-equal', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var lhs = _ref2[0];\n    var rhs = _ref2[1];\n\n    return lhs === rhs;\n  });\n});","define('hospitalrun/tests/helpers/is-equal.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/is-equal.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-equal.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/is-not', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1);\n\n    var value = _ref2[0];\n\n    return !value;\n  });\n});","define('hospitalrun/tests/helpers/is-not.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/is-not.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-not.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'hospitalrun/tests/helpers/start-app', 'hospitalrun/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _hospitalrunTestsHelpersStartApp, _hospitalrunTestsHelpersDestroyApp) {\n  'use strict';\n\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _hospitalrunTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _hospitalrunTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('hospitalrun/tests/helpers/module-for-acceptance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/number-format', ['exports', 'ember', 'hospitalrun/mixins/number-format'], function (exports, _ember, _hospitalrunMixinsNumberFormat) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  var NumberHandler = _ember['default'].Object.extend(_hospitalrunMixinsNumberFormat['default']);\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1);\n\n    var number = _ref2[0];\n\n    var numberHandler = new NumberHandler();\n    return numberHandler._numberFormat(number);\n  });\n});","define('hospitalrun/tests/helpers/number-format.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/number-format.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/number-format.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/read-path', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  exports['default'] = _ember['default'].Helper.helper(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var object = _ref2[0];\n    var path = _ref2[1];\n\n    if (_ember['default'].isEmpty(path)) {\n      return object;\n    } else {\n      return _ember['default'].get(object, path);\n    }\n  });\n});","define('hospitalrun/tests/helpers/read-path.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/read-path.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/read-path.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/resolver', ['exports', 'hospitalrun/resolver', 'hospitalrun/config/environment'], function (exports, _hospitalrunResolver, _hospitalrunConfigEnvironment) {\n  'use strict';\n\n  var resolver = _hospitalrunResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _hospitalrunConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _hospitalrunConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('hospitalrun/tests/helpers/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/run-with-pouch-dump', ['exports', 'hospitalrun/utils/pouch-views', 'ember', 'pouchdb', 'hospitalrun/services/database', 'hospitalrun/services/config'], function (exports, _hospitalrunUtilsPouchViews, _ember, _pouchdb, _hospitalrunServicesDatabase, _hospitalrunServicesConfig) {\n  /* jshint ignore:start */\n  'use strict';\n\n  function cleanupDatabases(dbs) {\n    return wait().then(function () {\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        if (dbs.main.changesListener) {\n          dbs.main.changesListener.cancel();\n          dbs.main.changesListener.on('complete', function () {\n            destroyDatabases(dbs).then(resolve, reject);\n          });\n        } else {\n          destroyDatabases(dbs).then(resolve, reject);\n        }\n      });\n    });\n  }\n\n  function destroyDatabases(dbs) {\n    var destroyQueue = [];\n    destroyQueue.push(dbs.config.info().then(function () {\n      return dbs.config.destroy();\n    }));\n    destroyQueue.push(dbs.main.info().then(function () {\n      return dbs.main.destroy();\n    }));\n    return _ember['default'].RSVP.all(destroyQueue);\n  }\n\n  function runWithPouchDumpAsyncHelper(app, dumpName, functionToRun) {\n\n    var db = new _pouchdb['default']('hospitalrun-test-database', {\n      adapter: 'memory'\n    });\n    var configDB = new _pouchdb['default']('hospitalrun-test-config-database', {\n      adapter: 'memory'\n    });\n    var dump = require('hospitalrun/tests/fixtures/' + dumpName)['default'];\n    var promise = db.load(dump);\n\n    var InMemoryDatabaseService = _hospitalrunServicesDatabase['default'].extend({\n      createDB: function createDB() {\n        return promise.then(function () {\n          return db;\n        });\n      }\n    });\n\n    var InMemoryConfigService = _hospitalrunServicesConfig['default'].extend({\n      createDB: function createDB() {\n        return configDB;\n      },\n      replicateConfigDB: function replicateConfigDB() {\n        return configDB.get('config_disable_offline_sync').then(function (doc) {\n          if (doc.value !== true) {\n            doc.value = true;\n            return configDB.put(doc);\n          }\n        })['catch'](function () {\n          return configDB.put({\n            _id: 'config_disable_offline_sync',\n            value: true\n          });\n        });\n      }\n    });\n\n    app.__deprecatedInstance__.register('service:config', InMemoryConfigService);\n    app.__deprecatedInstance__.register('service:database', InMemoryDatabaseService);\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      promise.then(function () {\n        (0, _hospitalrunUtilsPouchViews['default'])(db, true, dumpName).then(function () {\n          functionToRun();\n          andThen(function () {\n            cleanupDatabases({\n              config: configDB,\n              main: db\n            }).then(resolve, function (err) {\n              console.log('error cleaning up dbs:', JSON.stringify(err, null, 2));\n            });\n          });\n        });\n      }, function (err) {\n        console.log('error loading db', JSON.stringify(err, null, 2));\n      });\n    });\n  }\n\n  _ember['default'].Test.registerAsyncHelper('runWithPouchDump', runWithPouchDumpAsyncHelper);\n  /* jshint ignore:end */\n});","define('hospitalrun/tests/helpers/run-with-pouch-dump.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/run-with-pouch-dump.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/run-with-pouch-dump.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/select-date', ['exports', 'ember'], function (exports, _ember) {\n  // Derived from https://raw.githubusercontent.com/edgycircle/ember-pikaday/master/addon/helpers/pikaday.js\n  'use strict';\n\n  function triggerNativeEvent(element, eventName) {\n    if (document.createEvent) {\n      var _event = document.createEvent('Events');\n      _event.initEvent(eventName, true, false);\n      element.dispatchEvent(_event);\n    } else {\n      element.fireEvent('on' + eventName);\n    }\n  }\n\n  _ember['default'].Test.registerAsyncHelper('selectDate', function (app, selector, date) {\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      click(selector);\n      waitToAppear('.pika-single:not(.is-hidden)').then(function () {\n        fillIn(selector, moment(date).format('l'));\n        andThen(function () {\n          triggerNativeEvent(app.$(selector)[0], 'change');\n          resolve();\n        });\n      });\n    });\n  });\n});","define('hospitalrun/tests/helpers/select-date.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/select-date.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/select-date.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/select', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  _ember['default'].Test.registerAsyncHelper('select', function (app, selector) {\n    for (var _len = arguments.length, texts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      texts[_key - 2] = arguments[_key];\n    }\n\n    var $options = app.testHelpers.findWithAssert(selector + ' option');\n\n    $options.each(function () {\n      var _this = this;\n\n      var $option = _ember['default'].$(this);\n\n      _ember['default'].run(function () {\n        _this.selected = texts.some(function (text) {\n          return $option.is(':contains(\\'' + text + '\\')');\n        });\n        if (_this.selected) {\n          $option.trigger('change');\n        }\n      });\n    });\n\n    return app.testHelpers.wait();\n  });\n});","define('hospitalrun/tests/helpers/select.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/select.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/select.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/start-app', ['exports', 'ember', 'hospitalrun/app', 'hospitalrun/config/environment', 'hospitalrun/tests/helpers/run-with-pouch-dump', 'hospitalrun/tests/helpers/authenticate-user', 'hospitalrun/tests/helpers/select', 'hospitalrun/tests/helpers/select-date', 'hospitalrun/tests/helpers/typeahead-fillin', 'hospitalrun/tests/helpers/wait-to-appear'], function (exports, _ember, _hospitalrunApp, _hospitalrunConfigEnvironment, _hospitalrunTestsHelpersRunWithPouchDump, _hospitalrunTestsHelpersAuthenticateUser, _hospitalrunTestsHelpersSelect, _hospitalrunTestsHelpersSelectDate, _hospitalrunTestsHelpersTypeaheadFillin, _hospitalrunTestsHelpersWaitToAppear) {\n  'use strict';\n\n  exports['default'] = startApp;\n\n  function createTranslationWrapper(original, context) {\n    function t(str, data) {\n      var result = original.call(context, str, data);\n      if (result.indexOf && result.indexOf('Missing translation') > -1) {\n        throw new Error(result);\n      }\n\n      return result.string || result;\n    }\n\n    return t;\n  }\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _hospitalrunConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _hospitalrunApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    var translationService = application.__container__.lookup('service:i18n');\n    application.__container__.lookup('service:i18n').t = createTranslationWrapper(translationService.t, translationService);\n\n    return application;\n  }\n});","define('hospitalrun/tests/helpers/start-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/start-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/typeahead-fillin', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  _ember['default'].Test.registerAsyncHelper('typeAheadFillIn', function (app, selector, value) {\n    var typeAheadSelector = selector + ' .tt-input';\n    fillIn(typeAheadSelector, value);\n    triggerEvent(typeAheadSelector, 'input');\n    triggerEvent(typeAheadSelector, 'blur');\n    return app.testHelpers.wait();\n  });\n});","define('hospitalrun/tests/helpers/typeahead-fillin.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/typeahead-fillin.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/typeahead-fillin.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/helpers/validate-properties', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n  var run = _ember['default'].run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('hospitalrun/tests/helpers/wait-to-appear', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  function isVisible(selector) {\n    return $(selector).length > 0;\n  }\n\n  function checkVisibility(selector, interval, resolve, visibility) {\n    if (isVisible(selector) === visibility) {\n      resolve($(selector));\n    } else {\n      _ember['default'].run.later(null, function () {\n        checkVisibility(selector, interval, resolve, visibility);\n      }, interval);\n    }\n  }\n\n  function waitToAppear(app, selector) {\n    var interval = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      checkVisibility(selector, interval, resolve, true);\n    });\n  }\n\n  function waitToDisappear(app, selector) {\n    var interval = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];\n\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      checkVisibility(selector, interval, resolve, false);\n    });\n  }\n  _ember['default'].Test.registerAsyncHelper('waitToAppear', waitToAppear);\n  _ember['default'].Test.registerAsyncHelper('waitToDisappear', waitToDisappear);\n});","define('hospitalrun/tests/helpers/wait-to-appear.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/wait-to-appear.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/wait-to-appear.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/address/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/address/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/address/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/loaddb/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/loaddb/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/loaddb/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/lookup/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/lookup/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/lookup/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/lookup/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/lookup/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/lookup/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/query/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/query/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/query/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/roles/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/roles/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/roles/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/admin/workflow/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/admin/workflow/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/admin/workflow/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/missed/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/missed/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/missed/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/appointments/today/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/appointments/today/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/appointments/today/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/dialog/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/dialog/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/dialog/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/charge/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/charge/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/charge/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/completed/completed-list-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/completed/completed-list-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/completed/completed-list-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/completed/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/completed/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/completed/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/index/imaging-edit-button/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/index/imaging-edit-button/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/index/imaging-edit-button/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/index/requested-list-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/index/requested-list-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/index/requested-list-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/imaging/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/imaging/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/imaging/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/adjust/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/adjust/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/adjust/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/barcode/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/barcode/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/barcode/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/batch/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/batch/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/batch/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/listing/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/listing/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/listing/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/purchase/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/purchase/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/purchase/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/quick-add/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/quick-add/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/quick-add/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/rank-select/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/rank-select/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/rank-select/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/reports/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/reports/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/reports/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/request/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/request/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/request/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/inventory/transfer/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/inventory/transfer/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/inventory/transfer/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/add-line-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/add-line-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/add-line-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/payment/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/payment/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/payment/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/invoices/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/invoices/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/invoices/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/charge/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/charge/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/charge/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/completed/labs-completed-list-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/completed/labs-completed-list-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/completed/labs-completed-list-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/completed/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/completed/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/completed/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/index/labs-edit-button/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/index/labs-edit-button/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/index/labs-edit-button/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/index/labs-list-item/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/index/labs-list-item/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/index/labs-list-item/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/labs/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/labs/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/labs/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/completed/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/completed/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/completed/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/return/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/return/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/return/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/medication/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/medication/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/medication/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/add-contact/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/add-contact/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/add-contact/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/admitted/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/admitted/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/admitted/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/imaging/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/imaging/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/imaging/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/labs/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/labs/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/labs/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/medication/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/medication/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/medication/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/notes/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/notes/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/notes/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/photo/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/photo/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/photo/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/quick-add/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/quick-add/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/quick-add/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/reports/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/reports/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/reports/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/socialwork/expense/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/socialwork/expense/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/socialwork/expense/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/patients/socialwork/family-info/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/patients/socialwork/family-info/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/patients/socialwork/family-info/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/imaging/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/imaging/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/imaging/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/lab/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/lab/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/lab/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/override/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/override/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/override/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/procedure/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/procedure/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/procedure/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/profiles/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/profiles/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/profiles/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/profiles/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/profiles/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/profiles/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/search/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/search/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/search/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/pricing/ward/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/pricing/ward/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/pricing/ward/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/print/invoice/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/print/invoice/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/print/invoice/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/procedures/charge/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/procedures/charge/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/procedures/charge/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/procedures/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/procedures/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/procedures/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/procedures/medication/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/procedures/medication/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/procedures/medication/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/application.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/application.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/application.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/charges-by-type.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/charges-by-type.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/charges-by-type.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/array-display.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/array-display.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/array-display.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/charge-quantity.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/charge-quantity.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/charge-quantity.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/charges-by-type-tab.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/charges-by-type-tab.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/charges-by-type-tab.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/checkbox-or-typeahead.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/checkbox-or-typeahead.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/checkbox-or-typeahead.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/cross-icon-svg.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/cross-icon-svg.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/cross-icon-svg.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/custom-form.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/custom-form.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/custom-form.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/edit-panel.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/edit-panel.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/edit-panel.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/ext-radio.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/ext-radio.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/ext-radio.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/html-input.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/html-input.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/html-input.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/inventory-location-picker.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/inventory-location-picker.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/inventory-location-picker.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/item-listing.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/item-listing.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/item-listing.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/location-select.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/location-select.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/location-select.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/logo-dark-svg.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/logo-dark-svg.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/logo-dark-svg.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/logo-svg.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/logo-svg.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/logo-svg.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/menu-svg.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/menu-svg.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/menu-svg.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/modal-dialog.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/modal-dialog.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/modal-dialog.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/nav-menu.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/nav-menu.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/nav-menu.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/nav-paging.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/nav-paging.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/nav-paging.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/number-input.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/number-input.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/number-input.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/patient-summary.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/patient-summary.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/patient-summary.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/photo-display.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/photo-display.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/photo-display.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/price-list.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/price-list.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/price-list.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/quantity-calc.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/quantity-calc.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/quantity-calc.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/quantity-conv.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/quantity-conv.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/quantity-conv.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/render-typeahead.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/render-typeahead.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/render-typeahead.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/role-select.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/role-select.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/role-select.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/search-listing.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/search-listing.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/search-listing.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/select-or-typeahead.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/select-or-typeahead.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/select-or-typeahead.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/sortable-column.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/sortable-column.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/sortable-column.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/static-text.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/static-text.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/static-text.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/components/take-photo.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/components/take-photo.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/components/take-photo.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/error.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/error.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/error.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/index.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/index.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/index.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/inv-purchase.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/inv-purchase.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/inv-purchase.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/inventory-basic.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/inventory-basic.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/inventory-basic.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/item-charges.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/item-charges.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/item-charges.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/loading.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/loading.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/loading.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/login.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/login.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/login.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/navigation.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/navigation.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/navigation.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/report-rows.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/report-rows.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/report-rows.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/section.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/section.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/section.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/sidebar_nav/header.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/sidebar_nav/header.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/sidebar_nav/header.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/sidebar_nav/message.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/sidebar_nav/message.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/sidebar_nav/message.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/sidebar_nav/primary_nav.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/sidebar_nav/primary_nav.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/sidebar_nav/primary_nav.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/templates/sidebar_nav/search.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/templates/sidebar_nav/search.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/templates/sidebar_nav/search.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/users/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/users/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/users/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/users/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/users/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/users/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/users/index/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/users/index/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/users/index/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/add-diagnosis/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/add-diagnosis/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/add-diagnosis/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/charge/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/charge/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/charge/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/procedures/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/procedures/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/procedures/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/vitals/delete/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/vitals/delete/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/vitals/delete/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/hospitalrun/visits/vitals/edit/template.template-lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('TemplateLint - hospitalrun/visits/vitals/edit/template.hbs');\n  QUnit.test('should pass TemplateLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'hospitalrun/visits/vitals/edit/template.hbs should pass TemplateLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, _hospitalrunProceduresChargeController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunProceduresChargeController['default'].extend({\n    cancelAction: 'closeModal',\n    newPricingItem: false,\n    requestingController: _ember['default'].inject.controllers('imaging/edit'),\n    pricingList: _ember['default'].computed.alias('requestingController.chargesPricingList')\n  });\n});","define('hospitalrun/tests/imaging/charge/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/charge/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/charge/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/completed/completed-list-item/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'tr'\n  });\n});","define('hospitalrun/tests/imaging/completed/completed-list-item/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/completed/completed-list-item/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/completed/completed-list-item/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    startKey: [],\n    showActions: false\n  });\n});","define('hospitalrun/tests/imaging/completed/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/completed/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/completed/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/completed/route', ['exports', 'ember-i18n', 'hospitalrun/imaging/index/route'], function (exports, _emberI18n, _hospitalrunImagingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunImagingIndexRoute['default'].extend({\n    pageTitle: (0, _emberI18n.translationMacro)('imaging.titles.completedImaging'),\n    searchStatus: 'Completed'\n  });\n});","define('hospitalrun/tests/imaging/completed/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/completed/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/completed/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {\n    title: 'Delete Request',\n\n    actions: {\n      'delete': function _delete() {\n        this.deleteChildFromVisit('imaging');\n      }\n    }\n  });\n});","define('hospitalrun/tests/imaging/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], {\n    imagingController: _ember['default'].inject.controller('imaging'),\n\n    chargePricingCategory: 'Imaging',\n    chargeRoute: 'imaging.charge',\n    selectedImagingType: null,\n\n    canComplete: (function () {\n      var isNew = this.get('model.isNew');\n      var imagingTypeName = this.get('model.imagingTypeName');\n      var selectedImagingType = this.get('selectedImagingType');\n      if (isNew && (_ember['default'].isEmpty(imagingTypeName) || _ember['default'].isArray(selectedImagingType) && selectedImagingType.length > 1)) {\n        return false;\n      } else {\n        return this.currentUserCan('complete_imaging');\n      }\n    }).property('selectedImagingType.[]', 'model.imagingTypeName'),\n\n    actions: {\n      completeImaging: function completeImaging() {\n        this.set('model.status', 'Completed');\n        this.get('model').validate().then((function () {\n          if (this.get('model.isValid')) {\n            this.set('model.imagingDate', new Date());\n            this.send('update');\n          }\n        }).bind(this))['catch'](_ember['default'].K);\n      },\n\n      /**\n       * Save the imaging request(s), creating multiples when user selects multiple imaging tests.\n       */\n      update: function update() {\n        var _this = this;\n\n        if (this.get('model.isNew')) {\n          (function () {\n            var newImaging = _this.get('model');\n            var selectedImagingType = _this.get('selectedImagingType');\n            if (_ember['default'].isEmpty(_this.get('model.status'))) {\n              _this.set('model.status', 'Requested');\n            }\n            _this.set('model.requestedBy', newImaging.getUserName());\n            _this.set('model.requestedDate', new Date());\n            if (_ember['default'].isEmpty(selectedImagingType)) {\n              _this.saveNewPricing(_this.get('model.imagingTypeName'), 'Imaging', 'model.imagingType').then((function () {\n                this.addChildToVisit(newImaging, 'imaging', 'Imaging').then((function () {\n                  this.saveModel();\n                }).bind(this));\n              }).bind(_this));\n            } else {\n              _this.getSelectedPricing('selectedImagingType').then((function (pricingRecords) {\n                if (_ember['default'].isArray(pricingRecords)) {\n                  this.createMultipleRequests(pricingRecords, 'imagingType', 'imaging', 'Imaging');\n                } else {\n                  this.set('model.imagingType', pricingRecords);\n                  this.addChildToVisit(newImaging, 'imaging', 'Imaging').then((function () {\n                    this.saveModel();\n                  }).bind(this));\n                }\n              }).bind(_this));\n            }\n          })();\n        } else {\n          this.saveModel();\n        }\n      }\n    },\n\n    additionalButtons: (function () {\n      var i18n = this.get('i18n');\n      var canComplete = this.get('canComplete');\n      var isValid = this.get('model.isValid');\n      if (isValid && canComplete) {\n        return [{\n          buttonAction: 'completeImaging',\n          buttonIcon: 'glyphicon glyphicon-ok',\n          'class': 'btn btn-primary on-white',\n          buttonText: i18n.t('buttons.complete')\n        }];\n      }\n    }).property('canComplete', 'model.isValid'),\n\n    lookupListsToUpdate: [{\n      name: 'radiologistList',\n      property: 'model.radiologist',\n      id: 'radiologists'\n    }],\n\n    pricingTypeForObjectType: 'Imaging Procedure',\n    pricingTypes: _ember['default'].computed.alias('imagingController.imagingPricingTypes'),\n\n    pricingList: null, // This gets filled in by the route\n\n    radiologistList: _ember['default'].computed.alias('imagingController.radiologistList'),\n\n    updateCapability: 'add_imaging',\n\n    afterUpdate: function afterUpdate(saveResponse, multipleRecords) {\n      var i18n = this.get('i18n');\n      this.updateLookupLists();\n      var afterDialogAction = undefined,\n          alertTitle = undefined,\n          alertMessage = undefined;\n      if (this.get('model.status') === 'Completed') {\n        alertTitle = i18n.t('imaging.alerts.completedTitle');\n        alertMessage = i18n.t('imaging.alerts.completedMessage');\n      } else {\n        alertTitle = i18n.t('imaging.alerts.savedTitle');\n        alertMessage = i18n.t('imaging.alerts.savedMessage');\n      }\n      if (multipleRecords) {\n        afterDialogAction = this.get('cancelAction');\n      }\n      this.saveVisitIfNeeded(alertTitle, alertMessage, afterDialogAction);\n      this.set('model.selectPatient', false);\n    }\n\n  });\n});","define('hospitalrun/tests/imaging/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/edit/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'ember', 'hospitalrun/mixins/patient-list-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsChargeRoute, _ember, _hospitalrunMixinsPatientListRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsChargeRoute['default'], _hospitalrunMixinsPatientListRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('imaging.titles.editTitle'),\n    modelName: 'imaging',\n    newTitle: (0, _emberI18n.translationMacro)('imaging.titles.editTitle'),\n    pricingCategory: 'Imaging',\n\n    actions: {\n      returnToAllItems: function returnToAllItems() {\n        this.controller.send('returnToAllItems');\n      }\n    },\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        selectPatient: true,\n        requestDate: moment().startOf('day').toDate()\n      });\n    }\n  });\n});","define('hospitalrun/tests/imaging/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    addPermission: 'add_imaging'\n  });\n});","define('hospitalrun/tests/imaging/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/index/imaging-edit-button/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'button',\n    classNames: ['btn', 'btn-default', 'neutral']\n  });\n});","define('hospitalrun/tests/imaging/index/imaging-edit-button/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/index/imaging-edit-button/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/index/imaging-edit-button/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/index/requested-list-item/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'tr',\n    classNames: ['clickable'],\n\n    click: function click() {\n      this.sendAction('action', this.imaging);\n    }\n  });\n});","define('hospitalrun/tests/imaging/index/requested-list-item/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/index/requested-list-item/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/index/requested-list-item/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/index/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-index-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'imaging',\n    pageTitle: (0, _emberI18n.translationMacro)('imaging.pageTitle'),\n    searchStatus: 'Requested',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var imagingDateAsTime = item.get('imagingDateAsTime');\n      var id = this._getPouchIdFromItem(item);\n      var requestedDateAsTime = item.get('requestedDateAsTime');\n      var searchStatus = this.get('searchStatus');\n      return [searchStatus, requestedDateAsTime, imagingDateAsTime, id];\n    },\n    _modelQueryParams: function _modelQueryParams() {\n      var maxId = this._getMaxPouchId();\n      var maxValue = this.get('maxValue');\n      var minId = this._getMinPouchId();\n      var searchStatus = this.get('searchStatus');\n      return {\n        options: {\n          startkey: [searchStatus, null, null, minId],\n          endkey: [searchStatus, maxValue, maxValue, maxId]\n        },\n        mapReduce: 'imaging_by_status'\n      };\n    }\n  });\n});","define('hospitalrun/tests/imaging/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/imaging/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-module-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractModuleRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_imaging',\n    additionalModels: [{\n      name: 'imagingPricingTypes',\n      findArgs: ['lookup', 'imaging_pricing_types']\n    }, {\n      name: 'radiologistList',\n      findArgs: ['lookup', 'radiologists']\n    }],\n    allowSearch: false,\n    moduleName: 'imaging',\n    newButtonText: (0, _emberI18n.translationMacro)('imaging.buttons.newButton'),\n    sectionTitle: (0, _emberI18n.translationMacro)('imaging.sectionTitle')\n  });\n});","define('hospitalrun/tests/imaging/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - imaging/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'imaging/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/initializers/i18n', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    name: 'i18n',\n\n    after: 'ember-i18n',\n\n    initialize: function initialize(app) {\n      app.inject('route', 'i18n', 'service:i18n');\n      app.inject('controller', 'i18n', 'service:i18n');\n      app.inject('mixin', 'i18n', 'service:i18n');\n      app.inject('model', 'i18n', 'service:i18n');\n    }\n  };\n});","define('hospitalrun/tests/initializers/i18n.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - initializers/i18n.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/i18n.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/integration/components/inventory/rank-select-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('inventory/rank-select', 'Integration | Component | inventory/rank select', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders correctly', function (assert) {\n    this.set('value', null);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 4,\n              'column': 4\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'inventory/rank-select', [], ['property', 'value', 'prompt', 'n/a'], ['loc', [null, [1, 0], [4, 4]]], 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // options\n    var $options = this.$('option');\n    assert.equal($options.length, 4, 'Should render 4 options');\n    assert.equal($options[0].value, '', 'First option value is empty (prompt)');\n    assert.equal($options[0].innerHTML.trim(), 'n/a', 'First option label is prompt');\n    assert.equal($options[1].value, 'A', 'Second option is \"A\"');\n    assert.equal($options[2].value, $options[2].innerHTML.trim(), 'Values are similar as labels');\n  });\n});","define('hospitalrun/tests/integration/components/inventory/rank-select-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/inventory/rank-select-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/inventory/rank-select-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/integration/components/number-input-test', ['exports', 'ember-qunit', 'ember'], function (exports, _emberQunit, _ember) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('number-input', 'Integration | Component | number input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('the number-input renders', function (assert) {\n    assert.expect(2);\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['inline', 'number-input', [], ['property', 'petType', 'label', 'Pet Type', 'class', 'test-number-input'], ['loc', [null, [3, 6], [3, 84]]], 0, 0]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'em-form', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [2, 21], [2, 26]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ['loc', [null, [2, 4], [4, 16]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$('label').text().trim(), 'Pet Type', 'it renders the label');\n    assert.ok(_ember['default'].isPresent(this.$('.test-number-input')), 'it renders the input field');\n  });\n\n  (0, _emberQunit.test)('the number input sanitizes the data', function (assert) {\n    assert.expect(1);\n\n    this.set('model', _ember['default'].Object.create({ petType: 'cats' }));\n\n    this.set('sanitizeFunction', function (value) {\n      assert.equal(value, 'dragons', 'it passes the value to the sanitize function');\n    });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 8,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createTextNode('\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            return morphs;\n          },\n          statements: [['inline', 'number-input', [], ['property', 'petType', 'sanitizeFunction', ['subexpr', '@mut', [['get', 'sanitizeFunction', ['loc', [null, [5, 25], [5, 41]]], 0, 0, 0, 0]], [], [], 0, 0], 'label', 'Pet Type', 'class', 'test-number-input'], ['loc', [null, [3, 6], [7, 35]]], 0, 0]],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 9,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'em-form', [], ['model', ['subexpr', '@mut', [['get', 'model', ['loc', [null, [2, 21], [2, 26]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ['loc', [null, [2, 4], [8, 16]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    this.$('input').eq(0).val('dragons');\n    this.$('input').trigger('input');\n    this.$('input').trigger('change');\n  });\n});","define('hospitalrun/tests/integration/components/number-input-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/components/number-input-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/number-input-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/adjust/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-adjustment-types', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsInventoryAdjustmentTypes, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventoryAdjustmentTypes['default'], {\n    inventoryController: _ember['default'].inject.controller('inventory'),\n\n    expenseAccountList: _ember['default'].computed.alias('inventoryController.expenseAccountList'),\n\n    title: (0, _emberI18n.translationMacro)('inventory.titles.adjustment'),\n\n    transactionTypeChanged: (function () {\n      _ember['default'].run.once(this, function () {\n        this.get('model').validate()['catch'](_ember['default'].K);\n      });\n    }).observes('transactionType'),\n\n    updateButtonText: (function () {\n      return this.get('model.transactionType');\n    }).property('model.transactionType'),\n\n    updateButtonAction: 'adjust',\n\n    updateCapability: 'adjust_inventory_location',\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      adjust: function adjust() {\n        this.send('adjustItems', this.get('model'), true);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/adjust/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/adjust/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/adjust/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/barcode/controller', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend({\n    selectedPrinter: null,\n\n    barcodeUri: (function () {\n      var id = this.get('model.id');\n      var name = this.get('model.name');\n      return _ember['default'].$(document).JsBarcode(id, {\n        width: 1,\n        height: 20,\n        fontSize: 10,\n        displayValue: name,\n        returnUri: true\n      });\n    }).property('model.id', 'model.name'),\n\n    printers: (function () {\n      return dymo.label.framework.getTapePrinters();\n    }).property(),\n\n    havePrinters: (function () {\n      var printers = this.get('printers');\n      if (printers.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }).property('printers'),\n\n    singlePrinter: (function () {\n      var printers = this.get('printers');\n      if (printers.length === 1) {\n        return true;\n      } else {\n        return false;\n      }\n    }).property('printers'),\n\n    actions: {\n      print: function print() {\n        var barcodeUri = this.get('barcodeUri');\n        var selectedPrinter = this.get('selectedPrinter');\n        if (!selectedPrinter) {\n          selectedPrinter = this.get('printers')[0].name;\n        }\n        _ember['default'].$.get('/dymo/BarcodeAsImage.label', function (labelXml) {\n          var barcodeAsImageLabel = dymo.label.framework.openLabelXml(labelXml);\n          var pngBase64 = barcodeUri.substr('data:image/png;base64,'.length);\n          barcodeAsImageLabel.setObjectText('Image', pngBase64);\n          barcodeAsImageLabel.print(selectedPrinter);\n        }, 'text');\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/inventory/barcode/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/barcode/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/barcode/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/barcode/route', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend({\n    model: function model(params) {\n      return this.store.find('inventory', params.inventory_id);\n    }\n\n  });\n});","define('hospitalrun/tests/inventory/barcode/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/barcode/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/barcode/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/batch/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-id', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsInventoryId, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventorySelection, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventoryId['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsInventorySelection['default'], {\n    doingUpdate: false,\n    inventoryController: _ember['default'].inject.controller('inventory'),\n    inventoryItems: null,\n    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),\n    vendorList: _ember['default'].computed.alias('inventoryController.vendorList'),\n    purchaseAttributes: ['expirationDate', 'inventoryItem', 'lotNumber', 'purchaseCost', 'quantity', 'vendorItemNo'],\n\n    inventoryList: (function () {\n      var inventoryItems = this.get('inventoryItems');\n      if (!_ember['default'].isEmpty(inventoryItems)) {\n        var mappedItems = inventoryItems.map(function (item) {\n          return item.doc;\n        });\n        return mappedItems;\n      }\n    }).property('inventoryItems.[]'),\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'vendorList', // Name of property containing lookup list\n      property: 'model.vendor', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'vendor_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    showDistributionUnit: (function () {\n      return this._haveValidInventoryItem();\n    }).property('model.inventoryItemTypeAhead', 'model.inventoryItem'),\n\n    showInvoiceItems: (function () {\n      var invoiceItems = this.get('model.invoiceItems');\n      return !_ember['default'].isEmpty(invoiceItems);\n    }).property('model.invoiceItems.[]'),\n\n    totalReceived: (function () {\n      var invoiceItems = this.get('model.invoiceItems');\n      var total = 0;\n      if (!_ember['default'].isEmpty('invoiceItems')) {\n        total = invoiceItems.reduce(function (previousValue, item) {\n          return previousValue + Number(item.get('purchaseCost'));\n        }, total);\n      }\n      var purchaseCost = this.get('model.purchaseCost');\n      if (this.get('model.isValid') && !_ember['default'].isEmpty(purchaseCost)) {\n        total += Number(purchaseCost);\n      }\n      return total;\n    }).property('model.invoiceItems.[].purchaseCost', 'model.isValid', 'model.purchaseCost'),\n\n    updateButtonText: (0, _emberI18n.translationMacro)('inventory.labels.save'),\n\n    updateCapability: 'add_inventory_item',\n\n    _addNewInventoryItem: function _addNewInventoryItem() {\n      this.generateId().then((function (inventoryId) {\n        var inventoryItem = this.store.createRecord('inventory', {\n          id: inventoryId,\n          name: this.get('model.inventoryItemTypeAhead'),\n          quantity: 0, // Needed for validation purposes\n          skipSavePurchase: true\n        });\n        this.send('openModal', 'inventory.quick-add', inventoryItem);\n      }).bind(this));\n    },\n\n    _addInventoryItem: function _addInventoryItem() {\n      var model = this.get('model');\n      var inventoryItemTypeAhead = this.get('model.inventoryItemTypeAhead');\n      var purchaseCost = this.get('model.purchaseCost');\n      var quantity = this.get('model.quantity');\n      return model.validate().then((function () {\n        if (this.get('model.isValid') && !_ember['default'].isEmpty(inventoryItemTypeAhead) && !_ember['default'].isEmpty(quantity) && !_ember['default'].isEmpty(purchaseCost)) {\n          if (this._haveValidInventoryItem()) {\n            this._addInvoiceItem();\n          } else {\n            this._addNewInventoryItem();\n            return true;\n          }\n        } else {\n          throw Error('invalid');\n        }\n      }).bind(this))['catch']((function () {\n        this.displayAlert(this.get('i18n').t('inventory.titles.warning'), this.get('i18n').t('inventory.messages.warning'));\n      }).bind(this));\n    },\n\n    _addInvoiceItem: function _addInvoiceItem() {\n      var model = this.get('model');\n      var invoiceItems = model.get('invoiceItems');\n      var itemProperties = model.getProperties(this.get('purchaseAttributes'));\n      var invoiceItem = _ember['default'].Object.create(itemProperties);\n      invoiceItems.addObject(invoiceItem);\n      model.set('expirationDate');\n      model.set('inventoryItem');\n      model.set('inventoryItemTypeAhead');\n      model.set('lotNumber');\n      model.set('purchaseCost');\n      model.set('quantity');\n      model.set('selectedInventoryItem');\n      model.set('vendorItemNo');\n    },\n\n    _findInventoryItem: function _findInventoryItem(purchase) {\n      var invoiceItems = this.get('model.invoiceItems');\n      var inventoryId = purchase.get('inventoryItem');\n      if (!_ember['default'].isEmpty(inventoryId)) {\n        var invoiceItem = invoiceItems.find(function (item) {\n          return item.get('inventoryItem.id') === inventoryId;\n        }, this);\n        if (!_ember['default'].isEmpty(invoiceItem)) {\n          return invoiceItem.get('inventoryItem');\n        }\n      }\n    },\n\n    _haveValidInventoryItem: function _haveValidInventoryItem() {\n      var inventoryItemTypeAhead = this.get('model.inventoryItemTypeAhead');\n      var inventoryItem = this.get('model.inventoryItem');\n      if (_ember['default'].isEmpty(inventoryItemTypeAhead) || _ember['default'].isEmpty(inventoryItem)) {\n        return false;\n      } else {\n        var inventoryItemName = inventoryItem.get('name');\n        var typeAheadName = inventoryItemTypeAhead.substr(0, inventoryItemName.length);\n        if (typeAheadName !== inventoryItemName) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n    },\n\n    _savePurchases: function _savePurchases() {\n      var model = this.get('model');\n      var purchaseDefaults = model.getProperties(['dateReceived', 'vendor', 'invoiceNo', 'location', 'aisleLocation', 'giftInKind']);\n      var invoiceItems = model.get('invoiceItems');\n      var inventoryPurchase = undefined;\n      var savePromises = [];\n      invoiceItems.forEach((function (invoiceItem) {\n        var inventoryItem = invoiceItem.get('inventoryItem');\n        var quantity = invoiceItem.get('quantity');\n        inventoryPurchase = this.store.createRecord('inv-purchase', purchaseDefaults);\n        inventoryPurchase.setProperties(invoiceItem.getProperties(this.get('purchaseAttributes')));\n        inventoryPurchase.setProperties({\n          distributionUnit: inventoryItem.get('distributionUnit'),\n          currentQuantity: quantity,\n          originalQuantity: quantity,\n          inventoryItem: inventoryItem.get('id')\n        });\n        savePromises.push(inventoryPurchase.save());\n      }).bind(this));\n      _ember['default'].RSVP.all(savePromises).then((function (results) {\n        var inventorySaves = [];\n        var purchasesAdded = [];\n        results.forEach((function (newPurchase) {\n          var inventoryItem = this._findInventoryItem(newPurchase);\n          var purchases = inventoryItem.get('purchases');\n          purchases.addObject(newPurchase);\n          purchasesAdded.push(this.newPurchaseAdded(inventoryItem, newPurchase));\n        }).bind(this));\n\n        _ember['default'].RSVP.all(inventorySaves).then((function () {\n          results.forEach((function (newPurchase) {\n            var inventoryItem = this._findInventoryItem(newPurchase);\n            inventoryItem.updateQuantity();\n            inventorySaves.push(inventoryItem.save());\n          }).bind(this));\n          _ember['default'].RSVP.all(inventorySaves).then((function () {\n            this.updateLookupLists();\n            this.displayAlert(this.get('i18n').t('inventory.titles.purchaseSaved'), this.get('i18n').t('inventory.messages.purchaseSaved'), 'allItems');\n          }).bind(this));\n        }).bind(this));\n      }).bind(this));\n    },\n\n    actions: {\n      addInventoryItem: function addInventoryItem() {\n        this._addInventoryItem();\n      },\n\n      addedNewInventoryItem: function addedNewInventoryItem(inventoryItem) {\n        this.set('model.inventoryItem', inventoryItem);\n        this._addInvoiceItem();\n        this.send('closeModal');\n        if (this.get('doingUpdate')) {\n          this._savePurchases();\n        }\n      },\n\n      removeItem: function removeItem(removeInfo) {\n        var invoiceItems = this.get('model.invoiceItems');\n        var item = removeInfo.itemToRemove;\n        invoiceItems.removeObject(item);\n        this.send('closeModal');\n      },\n\n      showRemoveItem: function showRemoveItem(item) {\n        var message = this.get('i18n').t('inventory.messages.removeItem');\n        var model = _ember['default'].Object.create({\n          itemToRemove: item\n        });\n        var title = this.get('i18n').t('inventory.titles.removeItem');\n        this.displayConfirm(title, message, 'removeItem', model);\n      },\n\n      /**\n       * Update the model\n       */\n      update: function update() {\n        this.set('doingUpdate', true);\n        this._addInventoryItem().then((function (addingNewInventory) {\n          if (!addingNewInventory) {\n            this._savePurchases();\n          }\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/batch/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/batch/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/batch/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/batch/route', ['exports', 'hospitalrun/inventory/request/route', 'ember', 'ember-i18n'], function (exports, _hospitalrunInventoryRequestRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunInventoryRequestRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('navigation.subnav.inventoryReceived'),\n    modelName: 'inventory-batch',\n    newTitle: (0, _emberI18n.translationMacro)('navigation.subnav.inventoryReceived'),\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        invoiceItems: [],\n        dateReceived: new Date()\n      });\n    },\n\n    actions: {\n      addedNewInventoryItem: function addedNewInventoryItem(model) {\n        this.controller.send('addedNewInventoryItem', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/batch/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/batch/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/batch/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/delete/controller', ['exports', 'ember-i18n', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _emberI18n, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: (0, _emberI18n.translationMacro)('inventory.labels.deleteItem')\n  });\n});","define('hospitalrun/tests/inventory/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-type-list', 'hospitalrun/mixins/return-to', 'hospitalrun/mixins/unit-types', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventoryTypeList, _hospitalrunMixinsReturnTo, _hospitalrunMixinsUnitTypes, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsInventoryTypeList['default'], _hospitalrunMixinsReturnTo['default'], _hospitalrunMixinsUnitTypes['default'], _hospitalrunMixinsUserSession['default'], {\n    inventory: _ember['default'].inject.controller(),\n    savingNewItem: false,\n\n    canAddPurchase: (function () {\n      return this.currentUserCan('add_inventory_purchase');\n    }).property(),\n\n    canAdjustLocation: function canAdjustLocation() {\n      return this.currentUserCan('adjust_inventory_location');\n    },\n\n    warehouseList: _ember['default'].computed.alias('inventory.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventory.aisleLocationList'),\n    inventoryTypeList: _ember['default'].computed.alias('inventory.inventoryTypeList.value'),\n    inventoryUnitList: _ember['default'].computed.alias('inventory.inventoryUnitList.value'),\n    vendorList: _ember['default'].computed.alias('inventory.vendorList'),\n    database: _ember['default'].inject.service(),\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'vendorList', // Name of property containing lookup list\n      property: 'model.vendor', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'vendor_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    canEditQuantity: (function () {\n      return this.get('model.isNew');\n    }).property('model.isNew'),\n\n    haveTransactions: (function () {\n      var transactions = this.get('transactions');\n      return transactions !== null;\n    }).property('transactions.[]'),\n\n    locationQuantityTotal: (function () {\n      var locations = this.get('model.locations');\n      var total = locations.reduce(function (previousValue, location) {\n        return previousValue + parseInt(location.get('quantity'));\n      }, 0);\n      return total;\n    }).property('model.locations'),\n\n    /**\n     * Check to see if the total quantity by location matches the quantity calculated on the item\n     * @return {boolean} true if there is a discrepency;otherwise false.\n     */\n    quantityDiscrepency: (function () {\n      var locationQuantityTotal = this.get('locationQuantityTotal');\n      var quantity = this.get('model.quantity');\n      return !_ember['default'].isEmpty(locationQuantityTotal) && !_ember['default'].isEmpty(quantity) && locationQuantityTotal !== quantity;\n    }).property('locationQuantityTotal', 'model.quantity'),\n\n    /**\n     * Get the difference in quantity between the total quantity by location and the quantity on the item.\n     * @return {int} the difference.\n     */\n    quantityDifferential: (function () {\n      var locationQuantityTotal = this.get('locationQuantityTotal');\n      var quantity = this.get('model.quantity');\n      return Math.abs(locationQuantityTotal - quantity);\n    }).property('locationQuantityTotal', 'model.quantity'),\n\n    originalQuantityUpdated: (function () {\n      var isNew = this.get('model.isNew');\n      var quantity = this.get('model.originalQuantity');\n      if (isNew && !_ember['default'].isEmpty(quantity)) {\n        this.set('model.quantity', quantity);\n      }\n    }).observes('model.isNew', 'model.originalQuantity'),\n\n    showTransactions: (function () {\n      var transactions = this.get('transactions');\n      return !_ember['default'].isEmpty(transactions);\n    }).property('transactions.[]'),\n\n    transactions: null,\n\n    updateCapability: 'add_inventory_item',\n\n    actions: {\n      adjustItems: function adjustItems(inventoryLocation) {\n        var adjustmentQuantity = parseInt(inventoryLocation.get('adjustmentQuantity'));\n        var inventoryItem = this.get('model');\n        var transactionType = inventoryLocation.get('transactionType');\n        var request = this.get('store').createRecord('inv-request', {\n          adjustPurchases: true,\n          dateCompleted: inventoryLocation.get('dateCompleted'),\n          expenseAccount: inventoryLocation.get('expenseAccount'),\n          inventoryItem: inventoryItem,\n          quantity: adjustmentQuantity,\n          transactionType: transactionType,\n          reason: inventoryLocation.get('reason'),\n          deliveryAisle: inventoryLocation.get('aisleLocation'),\n          deliveryLocation: inventoryLocation.get('location')\n        });\n        request.set('inventoryLocations', [inventoryLocation]);\n        var increment = false;\n        if (transactionType === 'Adjustment (Add)' || transactionType === 'Return') {\n          increment = true;\n        }\n        request.set('markAsConsumed', true);\n        // Make sure inventory item is resolved first.\n        request.get('inventoryItem').then((function () {\n          this.send('fulfillRequest', request, true, increment, true);\n        }).bind(this));\n      },\n\n      editNewItem: function editNewItem() {\n        this.send('editItem', this.get('model.id'));\n      },\n\n      showAdjustment: function showAdjustment(inventoryLocation) {\n        inventoryLocation.setProperties({\n          dateCompleted: new Date(),\n          adjustmentItem: this.get('model'),\n          adjustmentQuantity: '',\n          reason: '',\n          transferItem: null,\n          transactionType: 'Adjustment (Add)'\n        });\n        this.send('openModal', 'inventory.adjust', inventoryLocation);\n      },\n\n      showTransfer: function showTransfer(inventoryLocation) {\n        inventoryLocation.set('adjustmentQuantity');\n        inventoryLocation.set('transferItem', this.get('model'));\n        inventoryLocation.set('dateCompleted', new Date());\n        this.send('openModal', 'inventory.transfer', inventoryLocation);\n      },\n\n      transferItems: function transferItems(inventoryLocation) {\n        var inventoryItem = this.get('model');\n        var request = this.get('store').createRecord('inv-request', {\n          adjustPurchases: false,\n          dateCompleted: inventoryLocation.get('dateCompleted'),\n          inventoryItem: inventoryItem,\n          quantity: inventoryLocation.get('adjustmentQuantity'),\n          deliveryAisle: inventoryLocation.get('transferAisleLocation'),\n          deliveryLocation: inventoryLocation.get('transferLocation'),\n          transactionType: 'Transfer'\n        });\n        this.transferToLocation(inventoryItem, inventoryLocation).then((function () {\n          inventoryLocation.setProperties({\n            transferItem: null,\n            transferLocation: null,\n            transferAisleLocation: null,\n            adjustmentQuantity: null\n          });\n          request.set('locationsAffected', [{\n            name: inventoryLocation.get('locationName'),\n            quantity: request.get('quantity')\n          }]);\n          request.get('inventoryItem').then((function () {\n            // Make sure relationships are resolved before saving\n            this._saveRequest(request);\n          }).bind(this));\n        }).bind(this));\n      },\n\n      updatePurchase: function updatePurchase(purchase, updateQuantity) {\n        if (updateQuantity) {\n          this.get('model').updateQuantity();\n          this.send('update', true);\n        }\n        this.send('closeModal');\n      }\n    },\n\n    _completeBeforeUpdate: function _completeBeforeUpdate(sequence, resolve, reject) {\n      var sequenceValue = null;\n      var friendlyId = sequence.get('prefix');\n      var promises = [];\n      var model = this.get('model');\n      var newPurchase = model.getProperties('aisleLocation', 'dateReceived', 'purchaseCost', 'lotNumber', 'expirationDate', 'giftInKind', 'invoiceNo', 'location', 'originalQuantity', 'quantityGroups', 'vendor', 'vendorItemNo');\n      var quantity = this.get('model.originalQuantity');\n      if (!_ember['default'].isEmpty(quantity)) {\n        newPurchase.currentQuantity = quantity;\n        newPurchase.inventoryItem = this.get('model.id');\n        var purchase = this.get('store').createRecord('inv-purchase', newPurchase);\n        promises.push(purchase.save());\n        this.get('model.purchases').addObject(purchase);\n        promises.push(this.newPurchaseAdded(this.get('model'), purchase));\n      }\n      sequence.incrementProperty('value', 1);\n      sequenceValue = sequence.get('value');\n      if (sequenceValue < 100000) {\n        friendlyId += String('00000' + sequenceValue).slice(-5);\n      } else {\n        friendlyId += sequenceValue;\n      }\n      model.set('friendlyId', friendlyId);\n      promises.push(sequence.save());\n      _ember['default'].RSVP.all(promises, 'All before update done for inventory item').then(function () {\n        resolve();\n      }, function (error) {\n        reject(error);\n      });\n    },\n\n    _findSequence: function _findSequence(inventoryType, resolve, reject) {\n      var sequenceFinder = new _ember['default'].RSVP.Promise((function (resolve) {\n        this._checkNextSequence(resolve, inventoryType, 0);\n      }).bind(this));\n      sequenceFinder.then((function (prefixChars) {\n        var store = this.get('store');\n        var newSequence = store.push(store.normalize('sequence', {\n          id: 'inventory_' + inventoryType,\n          prefix: inventoryType.toLowerCase().substr(0, prefixChars),\n          value: 0\n        }));\n        this._completeBeforeUpdate(newSequence, resolve, reject);\n      }).bind(this));\n    },\n\n    _findSequenceByPrefix: function _findSequenceByPrefix(inventoryType, prefixChars) {\n      var database = this.get('database');\n      var sequenceQuery = {\n        key: inventoryType.toLowerCase().substr(0, prefixChars)\n      };\n      return database.queryMainDB(sequenceQuery, 'sequence_by_prefix');\n    },\n\n    _checkNextSequence: function _checkNextSequence(resolve, inventoryType, prefixChars) {\n      prefixChars++;\n      this._findSequenceByPrefix(inventoryType, prefixChars).then((function (records) {\n        if (_ember['default'].isEmpty(records.rows)) {\n          resolve(prefixChars);\n        } else {\n          this._checkNextSequence(resolve, inventoryType, prefixChars);\n        }\n      }).bind(this), function () {\n        resolve(prefixChars);\n      });\n    },\n\n    /**\n     * Saves the specified request, then updates the inventory item and closes the modal.\n     */\n    _saveRequest: function _saveRequest(request) {\n      request.set('status', 'Completed');\n      request.set('completedBy', request.getUserName());\n      request.save().then((function () {\n        this.send('update', true);\n        this.send('closeModal');\n        this.getTransactions();\n      }).bind(this));\n    },\n\n    getTransactions: function getTransactions() {\n      var inventoryId = this.get('model.id');\n      this.set('transactions', null);\n      this.store.query('inv-request', {\n        options: {\n          endkey: [inventoryId, 'Completed', 0],\n          startkey: [inventoryId, 'Completed', 9999999999999],\n          descending: true\n        },\n        mapReduce: 'inventory_request_by_item'\n      }).then((function (transactions) {\n        this.set('transactions', transactions);\n      }).bind(this));\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var _this = this;\n\n      if (this.get('model.isNew')) {\n        var _ret = (function () {\n          var model = _this.get('model');\n          var inventoryType = model.get('inventoryType');\n          return {\n            v: new _ember['default'].RSVP.Promise((function (resolve, reject) {\n              model.validate().then((function () {\n                if (model.get('isValid')) {\n                  this.set('savingNewItem', true);\n                  this.store.find('sequence', 'inventory_' + inventoryType).then((function (sequence) {\n                    this._completeBeforeUpdate(sequence, resolve, reject);\n                  }).bind(this), (function () {\n                    this._findSequence(inventoryType, resolve, reject);\n                  }).bind(this));\n                } else {\n                  this.send('showDisabledDialog');\n                  reject('invalid model');\n                }\n              }).bind(this))['catch']((function () {\n                this.send('showDisabledDialog');\n              }).bind(this));\n            }).bind(_this))\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      } else {\n        return _ember['default'].RSVP.Promise.resolve();\n      }\n    },\n\n    afterUpdate: function afterUpdate() {\n      var afterUpdateAction = null;\n      if (this.get('savingNewItem')) {\n        afterUpdateAction = 'editNewItem';\n        this.set('savingNewItem', false);\n      }\n      this.displayAlert('Inventory Item Saved', 'The inventory item has been saved.', afterUpdateAction);\n    }\n  });\n});","define('hospitalrun/tests/inventory/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n', 'hospitalrun/mixins/inventory-id'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n, _hospitalrunMixinsInventoryId) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsInventoryId['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('inventory.labels.editItem'),\n    modelName: 'inventory',\n    newTitle: (0, _emberI18n.translationMacro)('inventory.labels.newItem'),\n\n    actions: {\n      adjustItems: function adjustItems(inventoryLocation) {\n        this.controller.send('adjustItems', inventoryLocation);\n      },\n\n      doneFulfillRequest: function doneFulfillRequest() {\n        this.controller.getTransactions();\n      },\n\n      editNewItem: function editNewItem() {\n        this.controller.send('editNewItem');\n      },\n\n      transferItems: function transferItems(inventoryLocation) {\n        this.controller.send('transferItems', inventoryLocation);\n      },\n\n      updatePurchase: function updatePurchase(purchase, updateQuantity) {\n        this.controller.send('updatePurchase', purchase, updateQuantity);\n      }\n    },\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        dateReceived: new Date()\n      });\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      controller.getTransactions();\n    }\n  });\n});","define('hospitalrun/tests/inventory/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    canAdd: (function () {\n      return this.currentUserCan('add_inventory_request');\n    }).property(),\n\n    canFulfill: (function () {\n      return this.currentUserCan('fulfill_inventory');\n    }).property()\n  });\n});","define('hospitalrun/tests/inventory/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    modelName: 'inv-request',\n    newButtonAction: (function () {\n      if (this.currentUserCan('add_inventory_request')) {\n        return 'newRequest';\n      } else {\n        return null;\n      }\n    }).property(),\n    newButtonText: (0, _emberI18n.translationMacro)('buttons.newRequestPlus'),\n    pageTitle: (0, _emberI18n.translationMacro)('navigation.subnav.requests'),\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var itemId = this._getPouchIdFromItem(item);\n      return ['Requested', null, itemId];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var maxValue = this.get('maxValue');\n      return {\n        options: {\n          startkey: ['Requested', null, null],\n          endkey: ['Requested', maxValue, maxValue]\n        },\n        mapReduce: 'inventory_request_by_status'\n      };\n    },\n\n    actions: {\n      fulfill: function fulfill(item) {\n        item.set('dateCompleted', new Date());\n        this.transitionTo('inventory.request', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/listing/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    canAddItem: (function () {\n      return this.currentUserCan('add_inventory_item');\n    }).property(),\n\n    canAddPurchase: (function () {\n      return this.currentUserCan('add_inventory_purchase');\n    }).property(),\n\n    canDeleteItem: (function () {\n      return this.currentUserCan('delete_inventory_item');\n    }).property(),\n\n    startKey: []\n  });\n});","define('hospitalrun/tests/inventory/listing/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/listing/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/listing/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/listing/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    modelName: 'inventory',\n    newButtonAction: (function () {\n      if (this.currentUserCan('add_inventory_item')) {\n        return 'newItem';\n      } else {\n        return null;\n      }\n    }).property(),\n    newButtonText: (0, _emberI18n.translationMacro)('buttons.newItem'),\n    pageTitle: (0, _emberI18n.translationMacro)('inventory.labels.items'),\n\n    _modelQueryParams: function _modelQueryParams() {\n      return {\n        mapReduce: 'inventory_by_name'\n      };\n    },\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var inventoryId = this._getPouchIdFromItem(item);\n      return [item.get('name'), inventoryId];\n    }\n\n  });\n});","define('hospitalrun/tests/inventory/listing/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/listing/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/listing/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/purchase/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/unit-types'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsUnitTypes) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsUnitTypes['default'], {\n    inventoryController: _ember['default'].inject.controller('inventory'),\n    cancelAction: 'closeModal',\n\n    canEditQuantity: (function () {\n      var originalQuantity = this.get('model.originalQuantity');\n      var currentQuantity = this.get('model.currentQuantity');\n      if (currentQuantity < originalQuantity) {\n        return false;\n      }\n      return true;\n    }).property('model.currentQuantity', 'model.originalQuantity'),\n\n    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),\n    inventoryUnitList: _ember['default'].computed.alias('inventoryController.inventoryUnitList.value'),\n    vendorList: _ember['default'].computed.alias('inventoryController.vendorList'),\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'vendorList', // Name of property containing lookup list\n      property: 'model.vendor', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'vendor_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    newPurchase: false,\n\n    updateQuantity: false,\n\n    updateCapability: 'add_inventory_purchase',\n\n    title: (function () {\n      var i18n = this.get('i18n');\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return i18n.t('inventory.titles.addPurchase');\n      }\n      return i18n.t('inventory.titles.editPurchase');\n    }).property('model.isNew'),\n\n    beforeUpdate: function beforeUpdate() {\n      var isNew = this.get('model.isNew');\n      var changedAttributes = this.get('model').changedAttributes();\n      if (changedAttributes.originalQuantity) {\n        this.set('model.currentQuantity', this.get('model.originalQuantity'));\n        if (!isNew) {\n          this.set('updateQuantity', true);\n        }\n      }\n      if (isNew) {\n        this.set('newPurchase', true);\n      }\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      if (this.get('newPurchase')) {\n        this.send('addPurchase', record);\n      } else {\n        this.send('updatePurchase', record, true);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/purchase/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/purchase/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/purchase/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/quick-add/controller', ['exports', 'hospitalrun/inventory/edit/controller', 'ember-i18n'], function (exports, _hospitalrunInventoryEditController, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunInventoryEditController['default'].extend({\n    title: (0, _emberI18n.translationMacro)('inventory.titles.inventoryItem'),\n\n    updateCapability: 'add_inventory_item',\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      if (this.get('model.skipSavePurchase')) {\n        this.set('model.quantity', null);\n      }\n      return this._super();\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      this.send('addedNewInventoryItem', record);\n    }\n  });\n});","define('hospitalrun/tests/inventory/quick-add/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/quick-add/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/quick-add/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/rank-select/component', ['exports', 'ember', 'hospitalrun/utils/select-values', 'ember-computed'], function (exports, _ember, _hospitalrunUtilsSelectValues, _emberComputed) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    rankOptions: [],\n    prompt: ' ',\n    'class': 'col-sm-2 test-inv-rank',\n\n    options: (0, _emberComputed['default'])('rankOptions', function () {\n      return _hospitalrunUtilsSelectValues['default'].selectValues(this.get('rankOptions'));\n    }),\n\n    init: function init() {\n      this._super.apply(this, arguments);\n\n      // set available options\n      this.set('rankOptions', _ember['default'].A(['A', 'B', 'C']));\n    }\n  });\n});","define('hospitalrun/tests/inventory/rank-select/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/rank-select/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/rank-select/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/reports/controller', ['exports', 'hospitalrun/controllers/abstract-report-controller', 'ember', 'hospitalrun/mixins/inventory-adjustment-types', 'hospitalrun/mixins/location-name', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/number-format', 'hospitalrun/utils/select-values'], function (exports, _hospitalrunControllersAbstractReportController, _ember, _hospitalrunMixinsInventoryAdjustmentTypes, _hospitalrunMixinsLocationName, _hospitalrunMixinsModalHelper, _hospitalrunMixinsNumberFormat, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractReportController['default'].extend(_hospitalrunMixinsLocationName['default'], _hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsNumberFormat['default'], _hospitalrunMixinsInventoryAdjustmentTypes['default'], {\n    inventoryController: _ember['default'].inject.controller('inventory'),\n    effectiveDate: null,\n    endDate: null,\n    expenseCategories: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return [i18n.t('inventory.labels.inventoryConsumed'), i18n.t('inventory.labels.giftUsage'), i18n.t('inventory.labels.inventoryObsolence')];\n    }),\n    expenseMap: null,\n    filterLocation: null,\n    grandCost: 0,\n    grandQuantity: 0,\n    locationSummary: null,\n    reportType: 'daysLeft',\n    startDate: null,\n\n    database: _ember['default'].inject.service(),\n    warehouseList: _ember['default'].computed.map('inventoryController.warehouseList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    reportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        date: {\n          label: i18n.t('labels.date'),\n          include: true,\n          property: 'date'\n        },\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'inventoryItem.friendlyId'\n        },\n        name: {\n          label: i18n.t('inventory.labels.name'),\n          include: true,\n          property: 'inventoryItem.name'\n        },\n        transactionType: {\n          label: i18n.t('inventory.labels.adjustmentType'),\n          include: false,\n          property: 'transactionType'\n        },\n        expenseAccount: {\n          label: i18n.t('inventory.labels.expense'),\n          include: false,\n          property: 'expenseAccount'\n        },\n        description: {\n          label: i18n.t('labels.description'),\n          include: false,\n          property: 'inventoryItem.description'\n        },\n        type: {\n          label: i18n.t('labels.type'),\n          include: true,\n          property: 'inventoryItem.inventoryType'\n        },\n        xref: {\n          label: i18n.t('inventory.labels.crossReference'),\n          include: false,\n          property: 'inventoryItem.crossReference'\n        },\n        reorder: {\n          label: i18n.t('inventory.labels.reorderPoint'),\n          include: false,\n          property: 'inventoryItem.reorderPoint',\n          format: '_numberFormat'\n        },\n        price: {\n          label: i18n.t('inventory.labels.salePricePerUnit'),\n          include: false,\n          property: 'inventoryItem.price',\n          format: '_numberFormat'\n        },\n        quantity: {\n          label: i18n.t('labels.quantity'),\n          include: true,\n          property: 'quantity',\n          format: '_numberFormat'\n        },\n        consumedPerDay: {\n          label: i18n.t('inventory.labels.consumptionRate'),\n          include: false,\n          property: 'consumedPerDay'\n        },\n        daysLeft: {\n          label: i18n.t('inventory.labels.daysLeft'),\n          include: false,\n          property: 'daysLeft'\n        },\n        unit: {\n          label: i18n.t('inventory.labels.distributionUnit'),\n          include: true,\n          property: 'inventoryItem.distributionUnit'\n        },\n        unitcost: {\n          label: i18n.t('inventory.labels.unitCost'),\n          include: true,\n          property: 'unitCost',\n          format: '_numberFormat'\n        },\n        total: {\n          label: i18n.t('inventory.labels.totalCost'),\n          include: true,\n          property: 'totalCost',\n          format: '_numberFormat'\n        },\n        gift: {\n          label: i18n.t('inventory.labels.gift'),\n          include: true,\n          property: 'giftInKind'\n        },\n        locations: {\n          label: i18n.t('inventory.labels.locations'),\n          include: true,\n          property: 'locations',\n          format: '_addLocationColumn'\n        },\n        aisle: {\n          label: i18n.t('inventory.labels.aisle'),\n          include: false,\n          property: 'locations',\n          format: '_addAisleColumn'\n        },\n        vendor: {\n          label: i18n.t('inventory.labels.vendor'),\n          include: false,\n          property: 'vendors'\n        }\n      };\n    }),\n    reportTypes: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return [{\n        name: i18n.t('inventory.reports.daysSupply'),\n        value: 'daysLeft'\n      }, {\n        name: i18n.t('inventory.reports.adjustment'),\n        value: 'detailedAdjustment'\n      }, {\n        name: i18n.t('inventory.reports.purchaseDetail'),\n        value: 'detailedPurchase'\n      }, {\n        name: i18n.t('inventory.reports.stockUsageDetail'),\n        value: 'detailedUsage'\n      }, {\n        name: i18n.t('inventory.reports.stockTransferDetail'),\n        value: 'detailedTransfer'\n      }, {\n        name: i18n.t('inventory.reports.expenseDetail'),\n        value: 'detailedExpense'\n      }, {\n        name: i18n.t('inventory.reports.expiration'),\n        value: 'expiration'\n      }, {\n        name: i18n.t('inventory.reports.invLocation'),\n        value: 'byLocation'\n      }, {\n        name: i18n.t('inventory.reports.invValuation'),\n        value: 'valuation'\n      }, {\n        name: i18n.t('inventory.reports.expenseSum'),\n        value: 'summaryExpense'\n      }, {\n        name: i18n.t('inventory.reports.purchaseSum'),\n        value: 'summaryPurchase'\n      }, {\n        name: i18n.t('inventory.reports.stockUsageSum'),\n        value: 'summaryUsage'\n      }, {\n        name: i18n.t('inventory.reports.stockTransferSum'),\n        value: 'summaryTransfer'\n      }, {\n        name: i18n.t('inventory.reports.finance'),\n        value: 'summaryFinance'\n      }];\n    }),\n\n    hideLocationFilter: (function () {\n      var reportType = this.get('reportType');\n      return reportType === 'summaryFinance';\n    }).property('reportType'),\n\n    includeDate: (function () {\n      var reportType = this.get('reportType');\n      if (!_ember['default'].isEmpty(reportType) && reportType.indexOf('detailed') === 0) {\n        this.set('reportColumns.date.include', true);\n        return true;\n      } else {\n        this.set('reportColumns.date.include', false);\n        return false;\n      }\n    }).property('reportType'),\n\n    includeDaysLeft: (function () {\n      var reportType = this.get('reportType');\n      if (reportType === 'daysLeft') {\n        this.set('reportColumns.consumedPerDay.include', true);\n        this.set('reportColumns.daysLeft.include', true);\n        return true;\n      } else {\n        this.set('reportColumns.consumedPerDay.include', false);\n        this.set('reportColumns.daysLeft.include', false);\n        return false;\n      }\n    }).property('reportType'),\n\n    includeCostFields: (function () {\n      var reportType = this.get('reportType');\n      if (reportType === 'detailedTransfer' || reportType === 'summaryTransfer' || reportType === 'daysLeft') {\n        this.set('reportColumns.total.include', false);\n        this.set('reportColumns.unitcost.include', false);\n        return false;\n      } else {\n        this.set('reportColumns.total.include', true);\n        this.set('reportColumns.unitcost.include', true);\n        return true;\n      }\n    }).property('reportType'),\n\n    includeExpenseAccount: (function () {\n      var reportType = this.get('reportType');\n      switch (reportType) {\n        case 'detailedAdjustment':\n        case 'detailedTransfer':\n        case 'detailedUsage':\n          {\n            return true;\n          }\n        case 'detailedExpense':\n          {\n            this.set('reportColumns.expenseAccount.include', true);\n            return true;\n          }\n        default:\n          {\n            this.set('reportColumns.expenseAccount.include', false);\n            return false;\n          }\n      }\n    }).property('reportType'),\n\n    includeTransactionType: (function () {\n      var reportType = this.get('reportType');\n      if (reportType === 'detailedAdjustment') {\n        this.set('reportColumns.transactionType.include', true);\n        return true;\n      } else {\n        this.set('reportColumns.transactionType.include', false);\n        return false;\n      }\n    }).property('reportType'),\n\n    showEffectiveDate: (function () {\n      var reportType = this.get('reportType');\n      if (reportType === 'valuation' || reportType === 'byLocation') {\n        this.set('startDate', null);\n        if (_ember['default'].isEmpty(this.get('endDate'))) {\n          this.set('endDate', new Date());\n        }\n        return true;\n      } else {\n        if (_ember['default'].isEmpty(this.get('startDate'))) {\n          this.set('startDate', new Date());\n        }\n        return false;\n      }\n    }).property('reportType'),\n\n    useFieldPicker: (function () {\n      var reportType = this.get('reportType');\n      return reportType !== 'expiration' && reportType !== 'summaryFinance';\n    }).property('reportType'),\n\n    _addAisleColumn: function _addAisleColumn(locations) {\n      if (!_ember['default'].isEmpty(locations)) {\n        return locations.map(function (location) {\n          if (location.name.indexOf(':') > -1) {\n            return location.name.split(':')[1];\n          }\n        });\n      }\n    },\n\n    _addLocationColumn: function _addLocationColumn(locations) {\n      var _this = this;\n\n      if (!_ember['default'].isEmpty(locations)) {\n        var _ret = (function () {\n          var returnLocations = [];\n          locations.forEach((function (location) {\n            var formattedName = undefined;\n            if (location.name.indexOf('From:') === 0) {\n              formattedName = location.name;\n            } else {\n              formattedName = this._getWarehouseLocationName(location.name);\n            }\n            if (!returnLocations.includes(formattedName)) {\n              returnLocations.push(formattedName);\n            }\n          }).bind(_this));\n          return {\n            v: returnLocations\n          };\n        })();\n\n        if (typeof _ret === 'object') return _ret.v;\n      }\n    },\n\n    _addReportRow: function _addReportRow(row, skipNumberFormatting, reportColumns, rowAction) {\n      if (_ember['default'].isEmpty(rowAction) && !_ember['default'].isEmpty(row.inventoryItem) && !_ember['default'].isEmpty(row.inventoryItem.id)) {\n        rowAction = {\n          action: 'viewInventory',\n          model: row.inventoryItem.id\n        };\n      }\n      this._super(row, skipNumberFormatting, reportColumns, rowAction);\n    },\n\n    _addTotalsRow: function _addTotalsRow(label, summaryCost, summaryQuantity) {\n      if (summaryQuantity > 0) {\n        this._addReportRow({\n          totalCost: label + this._numberFormat(summaryCost),\n          quantity: label + this._numberFormat(summaryQuantity),\n          unitCost: label + this._numberFormat(summaryCost / summaryQuantity)\n        }, true);\n      }\n    },\n\n    /**\n     * Adjust the specified location by the specified quantity\n     * @param {array} locations the list of locations to adjust from\n     * @param {string} locationName the name of the location to adjust\n     * @param {integer} quantity the quantity to adjust.\n     * @param {boolean} increment boolean indicating if the adjustment is an increment; or false if decrement.\n     */\n    _adjustLocation: function _adjustLocation(locations, locationName, quantity, increment) {\n      var locationToUpdate = locations.findBy('name', locationName);\n      if (_ember['default'].isEmpty(locationToUpdate)) {\n        locationToUpdate = {\n          name: locationName,\n          quantity: 0\n        };\n        locations.push(locationToUpdate);\n      }\n      if (increment) {\n        locationToUpdate.quantity += quantity;\n      } else {\n        locationToUpdate.quantity -= quantity;\n      }\n    },\n\n    /**\n     * Adjust the specified purchase by the specified quantity.\n     * @param {array} purchases the list of purchases to adjust from.\n     * @param {string} purchaseId the id of the purchase to adjust.\n     * @param {integer} quantity the quantity to adjust.\n     * @param {boolean} increment boolean indicating if the adjustment is an increment; or false if decrement.\n     */\n    _adjustPurchase: function _adjustPurchase(purchases, purchaseId, quantity, increment) {\n      var purchaseToAdjust = purchases.findBy('id', purchaseId);\n      if (!_ember['default'].isEmpty(purchaseToAdjust)) {\n        var calculatedQuantity = purchaseToAdjust.calculatedQuantity;\n        if (increment) {\n          calculatedQuantity += quantity;\n        } else {\n          calculatedQuantity -= quantity;\n        }\n        purchaseToAdjust.calculatedQuantity = calculatedQuantity;\n      }\n    },\n\n    _calculateCosts: function _calculateCosts(inventoryPurchases, row) {\n      // Calculate quantity and cost per unit for the row\n      if (!_ember['default'].isEmpty(inventoryPurchases)) {\n        inventoryPurchases.forEach((function (purchase) {\n          var costPerUnit = this._calculateCostPerUnit(purchase);\n          var quantity = purchase.calculatedQuantity;\n          row.quantity += purchase.calculatedQuantity;\n          row.totalCost += quantity * costPerUnit;\n        }).bind(this));\n      }\n      if (row.totalCost === 0 || row.quantity === 0) {\n        row.unitCost = 0;\n      } else {\n        row.unitCost = row.totalCost / row.quantity;\n      }\n      return row;\n    },\n\n    _calculateUsage: function _calculateUsage(inventoryPurchases, row) {\n      // Calculate quantity and cost per unit for the row\n      if (!_ember['default'].isEmpty(inventoryPurchases)) {\n        inventoryPurchases.forEach((function (purchase) {\n          var costPerUnit = this._calculateCostPerUnit(purchase);\n          var quantity = purchase.calculatedQuantity;\n          row.quantity -= purchase.calculatedQuantity;\n          row.totalCost -= quantity * costPerUnit;\n        }).bind(this));\n      }\n      if (row.totalCost === 0 || row.quantity === 0) {\n        row.unitCost = 0;\n      } else {\n        row.unitCost = row.totalCost / row.quantity;\n      }\n      return row;\n    },\n\n    _calculateCostPerUnit: function _calculateCostPerUnit(purchase) {\n      var purchaseCost = purchase.purchaseCost;\n      var quantity = parseInt(purchase.originalQuantity);\n      if (_ember['default'].isEmpty(purchaseCost) || _ember['default'].isEmpty(quantity)) {\n        return 0;\n      }\n      return Number((purchaseCost / quantity).toFixed(2));\n    },\n\n    _findInventoryItems: function _findInventoryItems(queryParams, view, inventoryList, childName) {\n      if (_ember['default'].isEmpty(inventoryList)) {\n        inventoryList = {};\n      }\n      var database = this.get('database');\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        database.queryMainDB(queryParams, view).then((function (inventoryChildren) {\n          var inventoryKeys = Object.keys(inventoryList);\n          var inventoryIds = [];\n          if (!_ember['default'].isEmpty(inventoryChildren.rows)) {\n            inventoryChildren.rows.forEach(function (child) {\n              if (child.doc.inventoryItem && !inventoryKeys.includes(child.doc.inventoryItem)) {\n                inventoryIds.push(database.getPouchId(child.doc.inventoryItem, 'inventory'));\n                inventoryKeys.push(child.doc.inventoryItem);\n              }\n            });\n          }\n          this._getInventoryItems(inventoryIds, inventoryList).then(function (inventoryMap) {\n            // Link inventory children to inventory items\n            inventoryChildren.rows.forEach(function (child) {\n              var childItem = inventoryMap[child.doc.inventoryItem];\n              if (!_ember['default'].isEmpty(childItem)) {\n                if (childName !== 'purchaseObjects' || childItem.purchases.includes(child.doc.id)) {\n                  var itemChildren = childItem[childName];\n                  if (_ember['default'].isEmpty(itemChildren)) {\n                    itemChildren = [];\n                  }\n                  itemChildren.push(child.doc);\n                  childItem[childName] = itemChildren;\n                }\n              }\n            });\n            resolve(inventoryMap);\n          }, reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    _findInventoryItemsByPurchase: function _findInventoryItemsByPurchase(reportTimes, inventoryMap) {\n      return this._findInventoryItems({\n        startkey: [reportTimes.startTime, 'invPurchase_'],\n        endkey: [reportTimes.endTime, 'invPurchase_￿'],\n        include_docs: true\n      }, 'inventory_purchase_by_date_received', inventoryMap, 'purchaseObjects');\n    },\n\n    _findInventoryItemsByRequest: function _findInventoryItemsByRequest(reportTimes, inventoryMap) {\n      return this._findInventoryItems({\n        startkey: ['Completed', reportTimes.startTime, 'invRequest_'],\n        endkey: ['Completed', reportTimes.endTime, 'invRequest_￿'],\n        include_docs: true\n      }, 'inventory_request_by_status', inventoryMap, 'requestObjects');\n    },\n\n    _finishExpenseReport: function _finishExpenseReport(reportType) {\n      var expenseCategories = this.get('expenseCategories');\n      var expenseMap = this.get('expenseMap');\n      var i18n = this.get('i18n');\n      expenseCategories.forEach((function (category) {\n        var categoryTotal = 0;\n        var expenseAccountName = undefined,\n            totalLabel = undefined;\n        this._addReportRow({\n          inventoryItem: {\n            name: i18n.t('inventory.reports.rows.expensesFor') + category\n          }\n        });\n        expenseMap[category].expenseAccounts.forEach((function (expenseAccount) {\n          if (reportType === 'detailedExpense') {\n            expenseAccount.reportRows.forEach((function (row) {\n              this._addReportRow(row);\n            }).bind(this));\n          }\n          if (_ember['default'].isEmpty(expenseAccount.name)) {\n            expenseAccountName = i18n.t('inventory.reports.rows.noAccount');\n          } else {\n            expenseAccountName = expenseAccount.name;\n          }\n          totalLabel = i18n.t('inventory.reports.rows.subtotalFor', { category: category, account: expenseAccountName });\n          this._addReportRow({\n            totalCost: totalLabel + this._numberFormat(expenseAccount.total)\n          }, true);\n          categoryTotal += expenseAccount.total;\n        }).bind(this));\n        totalLabel = i18n.t('inventory.reports.rows.totalFor', { 'var': category });\n        this._addReportRow({\n          totalCost: totalLabel + this._numberFormat(categoryTotal)\n        }, true);\n        this.incrementProperty('grandCost', categoryTotal);\n      }).bind(this));\n      this._addReportRow({\n        totalCost: i18n.t('inventory.reports.rows.total') + this._numberFormat(this.get('grandCost'))\n      }, true);\n    },\n\n    _finishLocationReport: function _finishLocationReport() {\n      var currentLocation = '';\n      var locationCost = 0;\n      var locationSummary = this.get('locationSummary');\n      var parentLocation = '';\n      var parentCount = 0;\n      var i18n = this.get('i18n');\n      locationSummary = locationSummary.sortBy('name');\n      locationSummary.forEach((function (location) {\n        parentLocation = this._getWarehouseLocationName(location.name);\n        var label = i18n.t('inventory.reports.rows.totalFor', { 'var': currentLocation });\n        if (currentLocation !== parentLocation) {\n          this._addTotalsRow(label, locationCost, parentCount);\n          parentCount = 0;\n          locationCost = 0;\n          currentLocation = parentLocation;\n        }\n        if (this._includeLocation(parentLocation)) {\n          for (var id in location.items) {\n            if (location.items[id].quantity > 0) {\n              this._addReportRow({\n                giftInKind: location.items[id].giftInKind,\n                inventoryItem: location.items[id].item,\n                quantity: location.items[id].quantity,\n                locations: [{\n                  name: location.name\n                }],\n                totalCost: location.items[id].totalCost,\n                unitCost: location.items[id].unitCost\n              });\n              parentCount += this._getValidNumber(location.items[id].quantity);\n              locationCost += this._getValidNumber(location.items[id].totalCost);\n              this.incrementProperty('grandCost', this._getValidNumber(location.items[id].totalCost));\n              this.incrementProperty('grandQuantity', this._getValidNumber(location.items[id].quantity));\n            }\n          }\n        }\n      }).bind(this));\n      if (parentCount > 0) {\n        this._addTotalsRow(i18n.t('inventory.reports.rows.totalFor', { 'var': parentLocation }), locationCost, parentCount);\n      }\n    },\n\n    _generateExpirationReport: function _generateExpirationReport() {\n      var grandQuantity = 0;\n      var database = this.get('database');\n      var reportRows = this.get('reportRows');\n      var reportTimes = this._getDateQueryParams();\n      database.queryMainDB({\n        startkey: [reportTimes.startTime, 'invPurchase_'],\n        endkey: [reportTimes.endTime, 'invPurchase_￿'],\n        include_docs: true\n      }, 'inventory_purchase_by_expiration_date').then((function (inventoryPurchases) {\n        var purchaseDocs = [];\n        var inventoryIds = [];\n\n        inventoryPurchases.rows.forEach((function (purchase) {\n          if (purchase.doc.currentQuantity > 0 && !_ember['default'].isEmpty(purchase.doc.expirationDate)) {\n            purchaseDocs.push(purchase.doc);\n            inventoryIds.push(database.getPouchId(purchase.doc.inventoryItem, 'inventory'));\n          }\n        }).bind(this));\n        this._getInventoryItems(inventoryIds).then((function (inventoryMap) {\n          var i18n = this.get('i18n');\n          purchaseDocs.forEach((function (purchase) {\n            var currentQuantity = purchase.currentQuantity;\n            var expirationDate = new Date(purchase.expirationDate);\n            var inventoryItem = inventoryMap[purchase.inventoryItem];\n            if (inventoryItem && this._includeLocation(purchase.location)) {\n              reportRows.addObject([inventoryItem.friendlyId, inventoryItem.name, currentQuantity, inventoryItem.distributionUnit, moment(expirationDate).format('l'), this.formatLocationName(purchase.location, purchase.aisleLocation)]);\n              grandQuantity += currentQuantity;\n            }\n          }).bind(this));\n          reportRows.addObject(['', '', i18n.t('inventory.reports.rows.total') + grandQuantity, '', '']);\n          this.set('showReportResults', true);\n          this.set('reportHeaders', [i18n.t('labels.id'), i18n.t('labels.name'), i18n.t('inventory.labels.currentQuantity'), i18n.t('inventory.labels.distributionUnit'), i18n.t('inventory.labels.expirationDate'), i18n.t('inventory.labels.location')]);\n          this._generateExport();\n          this._setReportTitle();\n          this.closeProgressModal();\n        }).bind(this));\n      }).bind(this));\n    },\n\n    _generateFinancialSummaryReport: function _generateFinancialSummaryReport() {\n      var reportTimes = this._getDateQueryParams();\n      /*\n      step 1: find the valuation as of start date,\n      meaning that we need to exchange the end date to be the start date and then tabulate the value\n      */\n      this._calculateBeginningBalance(reportTimes).then((function (beginningBalance) {\n        this._generateSummaries(reportTimes).then((function (inventoryAdjustment) {\n          var i = this._numberFormat(beginningBalance + inventoryAdjustment);\n          var i18n = this.get('i18n');\n          if (beginningBalance + inventoryAdjustment < 0) {\n            this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balanceEnd'), '', '(' + i + ')']);\n          } else {\n            this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balanceEnd'), '', i]);\n          }\n          this.set('showReportResults', true);\n          this.set('reportHeaders', [i18n.t('inventory.reports.rows.category'), i18n.t('labels.type'), i18n.t('inventory.labels.total')]);\n          this._generateExport();\n          this._setReportTitle();\n          this.closeProgressModal();\n        }).bind(this), (function (err) {\n          this._notifyReportError(this.get('i18n').t('inventory.reports.rows.errInFinSum') + err);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    _generateSummaries: function _generateSummaries(reportTimes) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var adjustedValue = 0;\n        var i18n = this.get('i18n');\n        /*\n        cycle through each purchase and request from the beginning of time until startTime\n        to determine the total value of inventory as of that date/time.\n        */\n        this._findInventoryItemsByRequest(reportTimes, {}).then((function (inventoryMap) {\n          this._findInventoryItemsByPurchase(reportTimes, inventoryMap).then((function (inventoryMap) {\n            var purchaseSummary = {};\n            var consumed = {};\n            var gikConsumed = {};\n            var adjustments = {};\n            this.adjustmentTypes.forEach(function (adjustmentType) {\n              adjustments[adjustmentType.type] = [];\n            });\n            Object.keys(inventoryMap).forEach((function (key) {\n              if (_ember['default'].isEmpty(key) || _ember['default'].isEmpty(inventoryMap[key])) {\n                // If the inventory item has been deleted, ignore it.\n                return;\n              }\n              var item = inventoryMap[key];\n\n              if (!_ember['default'].isEmpty(item.purchaseObjects)) {\n                item.purchaseObjects.forEach((function (purchase) {\n                  purchaseSummary[item.inventoryType] = this._getValidNumber(purchaseSummary[item.inventoryType]) + this._getValidNumber(purchase.purchaseCost);\n                }).bind(this));\n              }\n              if (!_ember['default'].isEmpty(item.requestObjects)) {\n                item.requestObjects.forEach((function (request) {\n                  // we have three categories here: consumed, gik consumed, and adjustments\n                  if (request.adjustPurchases) {\n                    if (request.transactionType === 'Fulfillment') {\n                      if (request.giftInKind) {\n                        gikConsumed[item.inventoryType] = this._getValidNumber(gikConsumed[item.inventoryType]) + this._getValidNumber(request.quantity * request.costPerUnit);\n                      } else {\n                        consumed[item.inventoryType] = this._getValidNumber(consumed[item.inventoryType]) + this._getValidNumber(request.quantity * request.costPerUnit);\n                      }\n                    } else {\n                      adjustments[request.transactionType][item.inventoryType] = this._getValidNumber(adjustments[request.transactionType][item.inventoryType]) + this._getValidNumber(request.quantity * request.costPerUnit);\n                    }\n                  }\n                }).bind(this));\n              }\n            }).bind(this));\n            // write the purchase rows\n            if (Object.keys(purchaseSummary).length > 0) {\n              var purchaseTotal = 0;\n              this.get('reportRows').addObject([i18n.t('inventory.labels.purchases'), '', '']);\n              Object.keys(purchaseSummary).forEach((function (key) {\n                var i = this._getValidNumber(purchaseSummary[key]);\n                purchaseTotal += i;\n                this.get('reportRows').addObject(['', key, this._numberFormat(i)]);\n              }).bind(this));\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.totalPurchases'), '', this._numberFormat(purchaseTotal)]);\n              adjustedValue += purchaseTotal;\n            }\n            // write the consumed rows\n            if (Object.keys(consumed).length > 0 || Object.keys(gikConsumed).length > 0) {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumed'), '', '']);\n              var overallValue = 0;\n              if (Object.keys(consumed).length > 0) {\n                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedPuchases'), '', '']);\n                var consumedTotal = 0;\n                Object.keys(consumed).forEach((function (key) {\n                  var i = this._getValidNumber(consumed[key]);\n                  consumedTotal += i;\n                  this.get('reportRows').addObject(['', key, '(' + this._numberFormat(i) + ')']);\n                }).bind(this));\n                overallValue += consumedTotal;\n                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedPurchasesTotal'), '', '(' + this._numberFormat(consumedTotal) + ')']);\n              }\n              if (Object.keys(gikConsumed).length > 0) {\n                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedGik'), '', '']);\n                var gikTotal = 0;\n                Object.keys(gikConsumed).forEach((function (key) {\n                  var i = this._getValidNumber(gikConsumed[key]);\n                  gikTotal += i;\n                  this.get('reportRows').addObject(['', key, '(' + this._numberFormat(i) + ')']);\n                }).bind(this));\n                overallValue += gikTotal;\n                this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedGikTotal'), '', '(' + this._numberFormat(gikTotal) + ')']);\n              }\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.consumedTotal'), '', '(' + this._numberFormat(overallValue) + ')']);\n              adjustedValue -= overallValue;\n            }\n            // write the adjustment rows\n            var adjustmentTotal = 0;\n            this.get('reportRows').addObject([i18n.t('inventory.reports.rows.adjustments'), '', '']);\n            Object.keys(adjustments).forEach((function (adjustmentT) {\n              if (Object.keys(adjustments[adjustmentT]).length > 0) {\n                this.get('reportRows').addObject([adjustmentT, '', '']);\n                Object.keys(adjustments[adjustmentT]).forEach((function (key) {\n                  var i = this._getValidNumber(adjustments[adjustmentT][key]);\n                  if (adjustmentT === 'Adjustment (Add)' || adjustmentT === 'Return') {\n                    adjustmentTotal += i;\n                    this.get('reportRows').addObject(['', key, this._numberFormat(i)]);\n                  } else {\n                    adjustmentTotal -= i;\n                    this.get('reportRows').addObject(['', key, '(' + this._numberFormat(i) + ')']);\n                  }\n                }).bind(this));\n              }\n            }).bind(this));\n            if (adjustmentTotal < 0) {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.adjustmentsTotal'), '', '(' + this._numberFormat(adjustmentTotal) + ')']);\n            } else {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.adjustmentsTotal'), '', this._numberFormat(adjustmentTotal)]);\n            }\n\n            adjustedValue += adjustmentTotal;\n            resolve(adjustedValue);\n          }).bind(this), reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    _calculateBeginningBalance: function _calculateBeginningBalance(reportTimes) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var startingValueReportTimes = {\n          startTime: null,\n          endTime: reportTimes.startTime\n        };\n        var beginningBalance = 0;\n        var i18n = this.get('i18n');\n        /*\n        cycle through each purchase and request from the beginning of time until startTime\n        to determine the total value of inventory as of that date/time.\n        */\n        this._findInventoryItemsByRequest(startingValueReportTimes, {}).then((function (inventoryMap) {\n          this._findInventoryItemsByPurchase(startingValueReportTimes, inventoryMap).then((function (inventoryMap) {\n            Object.keys(inventoryMap).forEach((function (key) {\n              if (_ember['default'].isEmpty(key) || _ember['default'].isEmpty(inventoryMap[key])) {\n                // If the inventory item has been deleted, ignore it.\n                return;\n              }\n              var item = inventoryMap[key];\n              var inventoryPurchases = item.purchaseObjects;\n              var inventoryRequests = item.requestObjects;\n              var row = {\n                inventoryItem: item,\n                quantity: 0,\n                unitCost: 0,\n                totalCost: 0\n              };\n              if (!_ember['default'].isEmpty(inventoryPurchases)) {\n                // Setup intial locations for an inventory item\n                inventoryPurchases.forEach(function (purchase) {\n                  var purchaseQuantity = purchase.originalQuantity;\n                  purchase.calculatedQuantity = purchaseQuantity;\n                });\n              }\n              if (!_ember['default'].isEmpty(inventoryRequests)) {\n                inventoryRequests.forEach((function (request) {\n                  var adjustPurchases = request.adjustPurchases;\n                  var increment = false;\n                  var purchases = request.purchasesAffected;\n                  var transactionType = request.transactionType;\n                  increment = transactionType === 'Adjustment (Add)' || transactionType === 'Return';\n                  if (adjustPurchases) {\n                    if (!_ember['default'].isEmpty(purchases) && !_ember['default'].isEmpty(inventoryPurchases)) {\n                      // Loop through purchase(s) on request and adjust corresponding inventory purchases\n                      purchases.forEach((function (purchaseInfo) {\n                        this._adjustPurchase(inventoryPurchases, purchaseInfo.id, purchaseInfo.quantity, increment);\n                      }).bind(this));\n                    }\n                  }\n                }).bind(this));\n              }\n              if (!_ember['default'].isEmpty(inventoryPurchases)) {\n                row = this._calculateCosts(inventoryPurchases, row);\n                beginningBalance += this._getValidNumber(row.totalCost);\n              }\n            }).bind(this));\n            if (beginningBalance < 0) {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balanceBegin'), '', '(' + this._numberFormat(beginningBalance) + ')']);\n            } else {\n              this.get('reportRows').addObject([i18n.t('inventory.reports.rows.balanceBegin'), '', this._numberFormat(beginningBalance)]);\n            }\n            resolve(beginningBalance);\n          }).bind(this), reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    _generateInventoryReport: function _generateInventoryReport() {\n      this.set('grandCost', 0);\n      this.set('grandQuantity', 0);\n      this.set('locationSummary', []);\n      var dateDiff = undefined;\n      var locationSummary = this.get('locationSummary');\n      var reportType = this.get('reportType');\n      var reportTimes = this._getDateQueryParams();\n      var i18n = this.get('i18n');\n      if (reportType === 'daysLeft') {\n        var endDate = this.get('endDate');\n        var startDate = this.get('startDate');\n        if (_ember['default'].isEmpty(endDate) || _ember['default'].isEmpty(startDate)) {\n          this.closeProgressModal();\n          return;\n        } else {\n          dateDiff = moment(endDate).diff(startDate, 'days');\n        }\n      }\n      this._findInventoryItemsByRequest(reportTimes, {}).then((function (inventoryMap) {\n        this._findInventoryItemsByPurchase(reportTimes, inventoryMap).then((function (inventoryMap) {\n          // Loop through each inventory item, looking at the requests and purchases to determine\n          // state of inventory at effective date\n          Object.keys(inventoryMap).forEach((function (key) {\n            if (_ember['default'].isEmpty(inventoryMap[key])) {\n              // If the inventory item has been deleted, ignore it.\n              return;\n            }\n            var item = inventoryMap[key];\n            var inventoryPurchases = item.purchaseObjects;\n            var inventoryRequests = item.requestObjects;\n            var row = {\n              giftInKind: 'N',\n              inventoryItem: item,\n              quantity: 0,\n              unitCost: 0,\n              totalCost: 0,\n              locations: [],\n              vendors: []\n            };\n            if (!_ember['default'].isEmpty(inventoryPurchases)) {\n              // Setup intial locations for an inventory item\n              inventoryPurchases.forEach((function (purchase) {\n                var locationName = this.getDisplayLocationName(purchase.location, purchase.aisleLocation);\n                var purchaseQuantity = purchase.originalQuantity;\n                purchase.calculatedQuantity = purchaseQuantity;\n                if (purchase.giftInKind === true) {\n                  row.giftInKind = 'Y';\n                }\n                if (!_ember['default'].isEmpty(purchase.vendor)) {\n                  if (!row.vendors.includes(purchase.vendor)) {\n                    row.vendors.push(purchase.vendor);\n                  }\n                }\n                this._adjustLocation(row.locations, locationName, purchaseQuantity, true);\n              }).bind(this));\n            }\n\n            if (!_ember['default'].isEmpty(inventoryRequests)) {\n              inventoryRequests.forEach((function (request) {\n                var adjustPurchases = request.adjustPurchases;\n                var increment = false;\n                var locations = request.locationsAffected;\n                var purchases = request.purchasesAffected;\n                var transactionType = request.transactionType;\n\n                increment = transactionType === 'Adjustment (Add)' || transactionType === 'Return';\n                if (adjustPurchases) {\n                  if (!_ember['default'].isEmpty(purchases) && !_ember['default'].isEmpty(inventoryPurchases)) {\n                    // Loop through purchase(s) on request and adjust corresponding inventory purchases\n                    purchases.forEach((function (purchaseInfo) {\n                      this._adjustPurchase(inventoryPurchases, purchaseInfo.id, purchaseInfo.quantity, increment);\n                    }).bind(this));\n                  }\n                } else if (transactionType === 'Transfer') {\n                  // Increment the delivery location\n                  var locationName = this.getDisplayLocationName(request.deliveryLocation, request.deliveryAisle);\n                  this._adjustLocation(row.locations, locationName, request.quantity, true);\n                }\n                // Loop through locations to adjust location quantity\n                locations.forEach((function (locationInfo) {\n                  this._adjustLocation(row.locations, locationInfo.name, locationInfo.quantity, increment);\n                }).bind(this));\n              }).bind(this));\n            }\n\n            var summaryCost = 0;\n            var summaryQuantity = 0;\n\n            switch (reportType) {\n              case 'byLocation':\n                {\n                  row.locations.forEach((function (location) {\n                    var locationToUpdate = locationSummary.findBy('name', this._getWarehouseLocationName(location.name));\n                    if (_ember['default'].isEmpty(locationToUpdate)) {\n                      locationToUpdate = _ember['default'].copy(location);\n                      locationToUpdate.items = {};\n                      locationSummary.push(locationToUpdate);\n                    } else {\n                      locationToUpdate.quantity += this._getValidNumber(location.quantity);\n                    }\n                    var costData = this._calculateCosts(inventoryPurchases, {\n                      quantity: 0,\n                      totalCost: 0\n                    });\n                    locationToUpdate.items[item.id] = {\n                      item: item,\n                      quantity: this._getValidNumber(location.quantity),\n                      giftInKind: row.giftInKind,\n                      totalCost: this._getValidNumber(costData.unitCost) * this._getValidNumber(location.quantity),\n                      unitCost: this._getValidNumber(costData.unitCost)\n                    };\n                  }).bind(this));\n                  break;\n                }\n              case 'daysLeft':\n                {\n                  if (!_ember['default'].isEmpty(inventoryRequests) && this._hasIncludedLocation(row.locations)) {\n                    var consumedQuantity = inventoryRequests.reduce((function (previousValue, request) {\n                      if (request.transactionType === 'Fulfillment') {\n                        return previousValue += this._getValidNumber(request.quantity);\n                      } else {\n                        return previousValue;\n                      }\n                    }).bind(this), 0);\n                    row.quantity = this._getValidNumber(item.quantity);\n                    if (consumedQuantity > 0) {\n                      row.consumedPerDay = this._numberFormat(consumedQuantity / dateDiff, true);\n                      row.daysLeft = this._numberFormat(row.quantity / row.consumedPerDay);\n                    } else {\n                      if (consumedQuantity === 0) {\n                        row.consumedPerDay = '0';\n                      } else {\n                        row.consumedPerDay = '?' + consumedQuantity;\n                      }\n                      row.daysLeft = '?';\n                    }\n                    this._addReportRow(row);\n                  }\n                  break;\n                }\n              case 'detailedAdjustment':\n              case 'detailedTransfer':\n              case 'detailedUsage':\n              case 'detailedExpense':\n              case 'summaryExpense':\n                {\n                  if (!_ember['default'].isEmpty(inventoryRequests)) {\n                    inventoryRequests.forEach((function (request) {\n                      var _this2 = this;\n\n                      if (this._includeTransaction(reportType, request.transactionType) && this._hasIncludedLocation(request.locationsAffected)) {\n                        (function () {\n                          var deliveryLocation = _this2.getDisplayLocationName(request.deliveryLocation, request.deliveryAisle);\n                          var locations = [];\n                          var num = _this2._getValidNumber(request.quantity);\n                          var totalCost = _this2._getValidNumber(request.quantity) * _this2._getValidNumber(request.costPerUnit);\n                          locations = request.locationsAffected.map((function (location) {\n                            if (reportType === 'detailedTransfer') {\n                              return {\n                                name: i18n.t('inventory.reports.rows.transfer2', { source: location.name, target: deliveryLocation }).toString()\n                              };\n                            } else {\n                              return {\n                                name: i18n.t('inventory.reports.rows.transfer1', { quantity: num, location: location.name }).toString()\n                              };\n                            }\n                          }).bind(_this2));\n                          var reportRow = {\n                            date: moment(new Date(request.dateCompleted)).format('l'),\n                            expenseAccount: request.expenseAccount,\n                            giftInKind: row.giftInKind,\n                            inventoryItem: row.inventoryItem,\n                            quantity: request.quantity,\n                            transactionType: request.transactionType,\n                            locations: locations,\n                            unitCost: request.costPerUnit,\n                            totalCost: totalCost\n                          };\n                          if (reportType === 'detailedExpense' || reportType === 'summaryExpense') {\n                            _this2._updateExpenseMap(request, reportRow);\n                          } else {\n                            _this2._addReportRow(reportRow);\n                            summaryQuantity += _this2._getValidNumber(request.quantity);\n                            summaryCost += _this2._getValidNumber(totalCost);\n                          }\n                        })();\n                      }\n                    }).bind(this));\n                    if (reportType !== 'detailedExpense' && reportType !== 'summaryExpense') {\n                      this._addTotalsRow(i18n.t('inventory.reports.rows.subtotal'), summaryCost, summaryQuantity);\n                      this.incrementProperty('grandCost', summaryCost);\n                      this.incrementProperty('grandQuantity', summaryQuantity);\n                    }\n                  }\n                  break;\n                }\n              case 'summaryTransfer':\n              case 'summaryUsage':\n                {\n                  if (!_ember['default'].isEmpty(inventoryRequests) && this._hasIncludedLocation(row.locations)) {\n                    row.quantity = inventoryRequests.reduce((function (previousValue, request) {\n                      if (this._includeTransaction(reportType, request.transactionType)) {\n                        var totalCost = this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit);\n                        summaryCost += totalCost;\n                        return previousValue += this._getValidNumber(request.quantity);\n                      } else {\n                        return previousValue;\n                      }\n                    }).bind(this), 0);\n                    if (row.quantity > 0) {\n                      row.totalCost = summaryCost;\n                      row.unitCost = summaryCost / row.quantity;\n                      this._addReportRow(row);\n                      this.incrementProperty('grandCost', summaryCost);\n                      this.incrementProperty('grandQuantity', row.quantity);\n                    }\n                  }\n                  break;\n                }\n              case 'detailedPurchase':\n                {\n                  if (!_ember['default'].isEmpty(inventoryPurchases)) {\n                    inventoryPurchases.forEach((function (purchase) {\n                      if (this._includeLocation(purchase.location)) {\n                        var giftInKind = 'N';\n                        if (purchase.giftInKind === true) {\n                          giftInKind = 'Y';\n                        }\n                        this._addReportRow({\n                          date: moment(new Date(purchase.dateReceived)).format('l'),\n                          giftInKind: giftInKind,\n                          inventoryItem: row.inventoryItem,\n                          quantity: purchase.originalQuantity,\n                          unitCost: purchase.costPerUnit,\n                          totalCost: purchase.purchaseCost,\n                          locations: [{\n                            name: this.getDisplayLocationName(purchase.location, purchase.aisleLocation)\n                          }]\n                        });\n                        summaryCost += this._getValidNumber(purchase.purchaseCost);\n                        summaryQuantity += this._getValidNumber(purchase.originalQuantity);\n                      }\n                    }).bind(this));\n                    this._addTotalsRow(i18n.t('inventory.reports.rows.subtotal'), summaryCost, summaryQuantity);\n                    this.incrementProperty('grandCost', summaryCost);\n                    this.incrementProperty('grandQuantity', summaryQuantity);\n                  }\n                  break;\n                }\n              case 'summaryPurchase':\n                {\n                  if (!_ember['default'].isEmpty(inventoryPurchases)) {\n                    row.locations = [];\n                    row.quantity = inventoryPurchases.reduce((function (previousValue, purchase) {\n                      summaryCost += this._getValidNumber(purchase.purchaseCost);\n                      var locationName = this.getDisplayLocationName(purchase.location, purchase.aisleLocation);\n                      if (!row.locations.findBy('name', locationName)) {\n                        row.locations.push({\n                          name: this.getDisplayLocationName(purchase.location, purchase.aisleLocation)\n                        });\n                      }\n                      return previousValue += this._getValidNumber(purchase.originalQuantity);\n                    }).bind(this), 0);\n                    if (this._hasIncludedLocation(row.locations)) {\n                      row.unitCost = summaryCost / row.quantity;\n                      row.totalCost = summaryCost;\n                      this._addReportRow(row);\n                      this.incrementProperty('grandCost', summaryCost);\n                      this.incrementProperty('grandQuantity', row.quantity);\n                    }\n                  }\n                  break;\n                }\n              case 'valuation':\n                {\n                  if (!_ember['default'].isEmpty(inventoryPurchases) && this._hasIncludedLocation(row.locations)) {\n                    this._calculateCosts(inventoryPurchases, row);\n                    this.incrementProperty('grandCost', this._getValidNumber(row.totalCost));\n                    this.incrementProperty('grandQuantity', this._getValidNumber(row.quantity));\n                    this._addReportRow(row);\n                  }\n                  break;\n                }\n            }\n          }).bind(this));\n          switch (reportType) {\n            case 'detailedExpense':\n            case 'summaryExpense':\n              {\n                this._finishExpenseReport(reportType);\n                break;\n              }\n            case 'byLocation':\n              {\n                this._finishLocationReport();\n                this._addTotalsRow(i18n.t('inventory.reports.rows.total'), this.get('grandCost'), this.get('grandQuantity'));\n                break;\n              }\n            default:\n              {\n                this._addTotalsRow(i18n.t('inventory.reports.rows.total'), this.get('grandCost'), this.get('grandQuantity'));\n              }\n          }\n          this._finishReport();\n        }).bind(this), (function (err) {\n          this._notifyReportError(i18n.t('inventory.reports.rows.errInFindPur') + err);\n        }).bind(this));\n      }).bind(this), (function (err) {\n        this._notifyReportError(i18n.t('inventory.reports.rows.errInFindPur') + err);\n      }).bind(this));\n    },\n\n    _getDateQueryParams: function _getDateQueryParams() {\n      var endDate = this.get('endDate');\n      var endTime = this.get('maxValue');\n      var startDate = this.get('startDate');\n      var startTime = undefined;\n      if (!_ember['default'].isEmpty(endDate)) {\n        endTime = moment(endDate).endOf('day').toDate().getTime();\n      }\n      if (!_ember['default'].isEmpty(startDate)) {\n        startTime = moment(startDate).startOf('day').toDate().getTime();\n      }\n      return {\n        endTime: endTime,\n        startTime: startTime\n      };\n    },\n\n    _getInventoryItems: function _getInventoryItems(inventoryIds, inventoryMap) {\n      var database = this.get('database');\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        if (_ember['default'].isEmpty(inventoryMap)) {\n          inventoryMap = {};\n        }\n        database.queryMainDB({\n          keys: inventoryIds,\n          include_docs: true\n        }).then(function (inventoryItems) {\n          inventoryItems.rows.forEach(function (inventoryItem) {\n            if (inventoryItem.doc && inventoryItem.doc.archived !== true) {\n              inventoryMap[inventoryItem.doc.id] = inventoryItem.doc;\n            }\n          });\n          resolve(inventoryMap);\n        }, reject);\n      });\n    },\n\n    /**\n     * Pull the warehouse name out of a formatted location name that (may) include the aisle location\n     * @param {string} locationName the formatted location name.\n     * @return {string} the warehouse name.\n     */\n    _getWarehouseLocationName: function _getWarehouseLocationName(locationName) {\n      var returnLocation = '';\n      if (locationName.indexOf(':') > -1) {\n        returnLocation = locationName.split(':')[0].trim();\n      } else {\n        returnLocation = locationName;\n      }\n      return returnLocation;\n    },\n\n    /**\n     * Determines if any of the passed in location objects match the currently filtered location\n     * @param {array} locations list of location objects to check.\n     * @return {boolean} true if any of the locations match the filter; otherwise false.\n     */\n    _hasIncludedLocation: function _hasIncludedLocation(locations) {\n      var hasIncludedLocation = false;\n      locations.forEach((function (location) {\n        var locationName = this._getWarehouseLocationName(location.name);\n        if (this._includeLocation(locationName)) {\n          hasIncludedLocation = true;\n        }\n      }).bind(this));\n      return hasIncludedLocation;\n    },\n\n    /**\n     * Determine if the specified location should be included in the report\n     * @param {string} location the location to check for inclusion\n     * @return {boolean} true if the location should be included.\n     */\n    _includeLocation: function _includeLocation(location) {\n      var filterLocation = this.get('filterLocation');\n      return _ember['default'].isEmpty(filterLocation) || location === filterLocation;\n    },\n\n    /**\n     * Given a report type and a transaction type determine if the transaction should\n     * be included in the report.\n     * @param {string} reportType the report type\n     * @param {string} transactionType the transaction type\n     * @return {boolean} true if the transaction should be included.\n     */\n    _includeTransaction: function _includeTransaction(reportType, transactionType) {\n      var detailed = reportType.indexOf('detailed') === 0;\n      var includeForReportType = undefined;\n      if (reportType === 'detailedExpense' || reportType === 'summaryExpense') {\n        return true;\n      }\n      switch (transactionType) {\n        case 'Fulfillment':\n          {\n            if (detailed) {\n              includeForReportType = 'detailedUsage';\n            } else {\n              includeForReportType = 'summaryUsage';\n            }\n            break;\n          }\n        case 'Transfer':\n          {\n            if (detailed) {\n              includeForReportType = 'detailedTransfer';\n            } else {\n              includeForReportType = 'summaryTransfer';\n            }\n            break;\n          }\n        default:\n          {\n            if (detailed) {\n              includeForReportType = 'detailedAdjustment';\n            } else {\n              includeForReportType = 'summaryAdjustment';\n            }\n          }\n      }\n      return reportType === includeForReportType;\n    },\n\n    _updateExpenseMap: function _updateExpenseMap(request, reportRow) {\n      var categoryToUpdate = undefined;\n      var expenseMap = this.get('expenseMap');\n      var isGiftInKind = reportRow.giftInKind === 'Y';\n      var increment = true;\n\n      switch (request.transactionType) {\n        case 'Fulfillment':\n        case 'Return':\n          {\n            if (isGiftInKind) {\n              categoryToUpdate = expenseMap['Gift In Kind Usage'];\n            } else {\n              categoryToUpdate = expenseMap['Inventory Consumed'];\n            }\n            if (request.transactionType === 'Return') {\n              increment = false;\n            }\n            break;\n          }\n        case 'Adjustment (Add)':\n        case 'Adjustment (Remove)':\n        case 'Return To Vendor':\n        case 'Write Off':\n          {\n            categoryToUpdate = expenseMap['Inventory Obsolence'];\n            if (request.transactionType === 'Adjustment (Add)') {\n              increment = false;\n            }\n            break;\n          }\n      }\n      if (!_ember['default'].isEmpty(categoryToUpdate)) {\n        var expenseAccountToUpdate = categoryToUpdate.expenseAccounts.findBy('name', request.expenseAccount);\n        if (_ember['default'].isEmpty(expenseAccountToUpdate)) {\n          expenseAccountToUpdate = {\n            name: request.expenseAccount,\n            total: 0,\n            reportRows: []\n          };\n          categoryToUpdate.expenseAccounts.push(expenseAccountToUpdate);\n        }\n        expenseAccountToUpdate.reportRows.push(reportRow);\n        var transactionValue = this._getValidNumber(request.quantity) * this._getValidNumber(request.costPerUnit);\n        if (increment) {\n          categoryToUpdate.total += transactionValue;\n          expenseAccountToUpdate.total += transactionValue;\n        } else {\n          categoryToUpdate.total = categoryToUpdate.total - transactionValue;\n          expenseAccountToUpdate.total = expenseAccountToUpdate.total - transactionValue;\n          reportRow.totalCost = reportRow.totalCost * -1;\n        }\n      }\n    },\n\n    actions: {\n      generateReport: function generateReport() {\n        var _this3 = this;\n\n        var endDate = this.get('endDate');\n        var reportRows = this.get('reportRows');\n        var reportType = this.get('reportType');\n        var startDate = this.get('startDate');\n        if (_ember['default'].isEmpty(startDate) && _ember['default'].isEmpty(endDate)) {\n          return;\n        }\n        reportRows.clear();\n        this.showProgressModal();\n        switch (reportType) {\n          case 'expiration':\n            {\n              this._generateExpirationReport();\n              break;\n            }\n          case 'summaryFinance':\n            {\n              this._generateFinancialSummaryReport();\n              break;\n            }\n          case 'detailedExpense':\n          case 'summaryExpense':\n            {\n              var _ret3 = (function () {\n                var expenseCategories = _this3.get('expenseCategories');\n                var expenseMap = {};\n                expenseCategories.forEach(function (category) {\n                  expenseMap[category] = {\n                    total: 0,\n                    expenseAccounts: []\n                  };\n                });\n                _this3.set('expenseMap', expenseMap);\n                _this3._generateInventoryReport();\n                return 'break';\n              })();\n\n              if (_ret3 === 'break') break;\n            }\n          default:\n            {\n              this._generateInventoryReport();\n              break;\n            }\n        }\n      },\n\n      viewInventory: function viewInventory(id) {\n        this.store.find('inventory', id).then((function (item) {\n          item.set('returnTo', 'inventory.reports');\n          this.transitionToRoute('inventory.edit', item);\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/reports/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/reports/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/reports/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/reports/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    pageTitle: (0, _emberI18n.translationMacro)('inventory.titles.inventoryReport'),\n\n    // No model for reports; data gets retrieved when report is run.\n    model: function model() {\n      return _ember['default'].RSVP.resolve(_ember['default'].Object.create({}));\n    }\n\n  });\n});","define('hospitalrun/tests/inventory/reports/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/reports/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/reports/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/request/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventorySelection, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsInventorySelection['default'], {\n    inventoryController: _ember['default'].inject.controller('inventory'),\n    inventoryItems: null,\n    cancelAction: 'allRequests',\n\n    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),\n    expenseAccountList: _ember['default'].computed.alias('inventoryController.expenseAccountList'),\n\n    inventoryList: (function () {\n      var inventoryItems = this.get('inventoryItems');\n      if (!_ember['default'].isEmpty(inventoryItems)) {\n        var mappedItems = inventoryItems.map(function (item) {\n          return item.doc;\n        });\n        return mappedItems;\n      }\n    }).property('inventoryItems.[]'),\n\n    lookupListsToUpdate: [{\n      name: 'expenseAccountList', // Name of property containing lookup list\n      property: 'model.expenseAccount', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'expense_account_list' // Id of the lookup list to update\n    }, {\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.deliveryAisle', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.deliveryLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    canFulfill: (function () {\n      var requestedItems = this.get('model.requestedItems');\n      return _ember['default'].isEmpty(requestedItems) && this.currentUserCan('fulfill_inventory');\n    }).property('model.requestedItems.[]'),\n\n    isFulfilling: (function () {\n      var canFulfill = this.get('canFulfill');\n      var isRequested = this.get('isRequested');\n      var fulfillRequest = this.get('model.shouldFulfillRequest');\n      var isFulfilling = canFulfill && (isRequested || fulfillRequest);\n      if (isFulfilling) {\n        if (_ember['default'].isEmpty(this.get('model.dateCompleted'))) {\n          this.set('model.dateCompleted', new Date());\n        }\n      } else {\n        this.set('model.dateCompleted');\n      }\n      return isFulfilling;\n    }).property('isRequested', 'model.shouldFulfillRequest'),\n\n    isRequested: (function () {\n      var status = this.get('model.status');\n      return status === 'Requested';\n    }).property('model.status'),\n\n    quantityLabel: (function () {\n      var selectedInventoryItem = this.get('selectedInventoryItem');\n      if (_ember['default'].isEmpty(selectedInventoryItem)) {\n        return this.get('i18n').t('labels.quantity').toString();\n      } else {\n        return this.get('i18n').t('inventory.labels.quantity', { unit: selectedInventoryItem.distributionUnit }).toString();\n      }\n    }).property('selectedInventoryItem'),\n\n    showRequestedItems: (function () {\n      var requestedItems = this.get('model.requestedItems');\n      return !_ember['default'].isEmpty(requestedItems);\n    }).property('model.requestedItems.[]'),\n\n    updateViaFulfillRequest: false,\n\n    updateButtonText: (function () {\n      if (this.get('isFulfilling')) {\n        return this.get('i18n').t('buttons.fulfill');\n      }\n      return this._super();\n    }).property('model.isNew', 'isFulfilling'),\n\n    updateCapability: 'add_inventory_request',\n\n    actions: {\n      addInventoryItem: function addInventoryItem() {\n        var model = this.get('model');\n        var inventoryItem = model.get('inventoryItem');\n        var requestedItems = model.get('requestedItems');\n        var quantity = model.get('quantity');\n        model.validate().then((function () {\n          if (model.get('isValid') && !_ember['default'].isEmpty(inventoryItem) && !_ember['default'].isEmpty(quantity)) {\n            var requestedItem = _ember['default'].Object.create({\n              item: inventoryItem.get('content'),\n              quantity: quantity\n            });\n            requestedItems.addObject(requestedItem);\n            model.set('inventoryItem');\n            model.set('inventoryItemTypeAhead');\n            model.set('quantity');\n            this.set('selectedInventoryItem');\n          }\n        }).bind(this))['catch'](_ember['default'].K);\n      },\n\n      allRequests: function allRequests() {\n        this.transitionToRoute('inventory.index');\n      },\n\n      removeItem: function removeItem(removeInfo) {\n        var requestedItems = this.get('model.requestedItems');\n        var item = removeInfo.itemToRemove;\n        requestedItems.removeObject(item);\n        this.send('closeModal');\n      },\n\n      showRemoveItem: function showRemoveItem(item) {\n        var message = this.get('i18n').t('inventory.messages.removeItemRequest');\n        var model = _ember['default'].Object.create({\n          itemToRemove: item\n        });\n        var title = this.get('i18n').t('inventory.titles.removeItem');\n        this.displayConfirm(title, message, 'removeItem', model);\n      },\n\n      /**\n       * Update the model and perform the before update and after update\n       * @param skipAfterUpdate boolean (optional) indicating whether or not\n       * to skip the afterUpdate call.\n       */\n      update: function update(skipAfterUpdate) {\n        this.beforeUpdate().then((function () {\n          var _this = this;\n\n          var updateViaFulfillRequest = this.get('updateViaFulfillRequest');\n          if (updateViaFulfillRequest) {\n            this.updateLookupLists();\n            this.performFulfillRequest(this.get('model'), false, false, true).then(this.afterUpdate.bind(this));\n          } else {\n            var isNew = this.get('model.isNew');\n            var requestedItems = this.get('model.requestedItems');\n            if (isNew && !_ember['default'].isEmpty(requestedItems)) {\n              (function () {\n                var baseModel = _this.get('model');\n                var propertiesToCopy = baseModel.getProperties(['dateRequested', 'deliveryAisle', 'deliveryLocation', 'expenseAccount', 'requestedBy', 'status']);\n                var inventoryPromises = [];\n                var newModels = [];\n                var savePromises = [];\n                if (!_ember['default'].isEmpty(_this.get('model.inventoryItem')) && !_ember['default'].isEmpty(_this.get('model.quantity'))) {\n                  savePromises.push(baseModel.save());\n                }\n                requestedItems.forEach((function (requestedItem) {\n                  propertiesToCopy.inventoryItem = requestedItem.get('item');\n                  propertiesToCopy.quantity = requestedItem.get('quantity');\n                  var modelToSave = this.get('store').createRecord('inv-request', propertiesToCopy);\n                  inventoryPromises.push(modelToSave.get('inventoryItem'));\n                  newModels.push(modelToSave);\n                }).bind(_this));\n                _ember['default'].RSVP.all(inventoryPromises, 'Get inventory items for inventory requests').then((function () {\n                  newModels.forEach(function (newModel) {\n                    savePromises.push(newModel.save());\n                  });\n                  _ember['default'].RSVP.all(savePromises, 'Save batch inventory requests').then((function () {\n                    this.updateLookupLists();\n                    this.afterUpdate();\n                  }).bind(this));\n                }).bind(_this));\n              })();\n            } else {\n              this.get('model').save().then((function (record) {\n                this.updateLookupLists();\n                if (!skipAfterUpdate) {\n                  this.afterUpdate(record);\n                }\n              }).bind(this));\n            }\n          }\n        }).bind(this));\n      }\n    },\n\n    afterUpdate: function afterUpdate() {\n      var updateViaFulfillRequest = this.get('updateViaFulfillRequest');\n      if (updateViaFulfillRequest) {\n        this.displayAlert(this.get('i18n').t('inventory.titles.requestFulfilled'), this.get('i18n').t('inventory.messages.requestFulfilled'), 'allRequests');\n      } else {\n        this.displayAlert(this.get('i18n').t('inventory.titles.requestUpdated'), this.get('i18n').t('inventory.messages.requestUpdated'));\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      if (this.get('isFulfilling')) {\n        this.set('updateViaFulfillRequest', true);\n      } else {\n        this.set('updateViaFulfillRequest', false);\n      }\n      if (this.get('model.isNew')) {\n        this.set('model.dateRequested', new Date());\n        this.set('model.requestedBy', this.get('model').getUserName());\n        if (!this.get('isFulfilling')) {\n          this.set('model.status', 'Requested');\n        }\n      }\n      return _ember['default'].RSVP.resolve();\n    }\n  });\n});\n// inventory-locations mixin is needed for fulfill-request mixin!","define('hospitalrun/tests/inventory/request/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/request/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/request/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/request/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('inventory.titles.editRequest'),\n    modelName: 'inv-request',\n    newTitle: (0, _emberI18n.translationMacro)('inventory.titles.addRequest'),\n    database: _ember['default'].inject.service(),\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        transactionType: 'Request',\n        requestedItems: []\n      });\n    },\n\n    actions: {\n      allRequests: function allRequests(model) {\n        this.controller.send('allRequests', model);\n      },\n\n      removeItem: function removeItem(model) {\n        this.controller.send('removeItem', model);\n      }\n    },\n\n    /**\n     * Lazily load inventory items so that it doesn't impact performance.\n     */\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      var inventoryQuery = {\n        startkey: 'inventory_',\n        endkey: 'inventory_￿',\n        include_docs: true\n      };\n      this.get('database').queryMainDB(inventoryQuery).then(function (result) {\n        controller.set('inventoryItems', result.rows);\n      });\n    }\n  });\n});","define('hospitalrun/tests/inventory/request/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/request/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/request/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-id', 'hospitalrun/mixins/inventory-locations'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryId, _hospitalrunMixinsInventoryLocations) {\n  'use strict';\n\n  // inventory-locations mixin is needed for fulfill-request mixin!\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryId['default'], _hospitalrunMixinsInventoryLocations['default'], {\n    addCapability: 'add_inventory_item',\n    additionalButtons: (function () {\n      if (this.currentUserCan(this.get('addCapability'))) {\n        return [{\n          buttonAction: 'newInventoryBatch',\n          buttonText: '+ inventory received',\n          'class': 'btn btn-primary'\n        }];\n      }\n    }).property(),\n\n    additionalModels: [{\n      name: 'aisleLocationList',\n      findArgs: ['lookup', 'aisle_location_list']\n    }, {\n      name: 'expenseAccountList',\n      findArgs: ['lookup', 'expense_account_list']\n    }, {\n      name: 'inventoryTypeList',\n      findArgs: ['lookup', 'inventory_types']\n    }, {\n      name: 'inventoryUnitList',\n      findArgs: ['lookup', 'unit_types']\n    }, {\n      name: 'warehouseList',\n      findArgs: ['lookup', 'warehouse_list']\n    }, {\n      name: 'vendorList',\n      findArgs: ['lookup', 'vendor_list']\n    }],\n\n    currentItem: null,\n    moduleName: 'inventory',\n\n    newButtonText: '+ new request',\n    sectionTitle: 'Inventory',\n\n    actions: {\n      addPurchase: function addPurchase(newPurchase) {\n        var currentItem = this.get('currentItem');\n        var purchases = currentItem.get('purchases');\n        purchases.addObject(newPurchase);\n        this.newPurchaseAdded(currentItem, newPurchase).then((function () {\n          currentItem.updateQuantity();\n          currentItem.save().then((function () {\n            this.send('closeModal');\n          }).bind(this));\n        }).bind(this));\n      },\n\n      newInventoryBatch: function newInventoryBatch() {\n        if (this.currentUserCan(this.get('addCapability'))) {\n          this.transitionTo('inventory.batch', 'new');\n        }\n      },\n\n      newRequest: function newRequest() {\n        this.transitionTo('inventory.request', 'new');\n      },\n\n      allItems: function allItems() {\n        this.transitionTo('inventory.listing');\n      },\n\n      showAddPurchase: function showAddPurchase(inventoryItem) {\n        var newPurchase = this.get('store').createRecord('inv-purchase', {\n          dateReceived: new Date(),\n          distributionUnit: inventoryItem.get('distributionUnit'),\n          inventoryItem: inventoryItem.get('id')\n        });\n        this.set('currentItem', inventoryItem);\n        this.send('openModal', 'inventory.purchase.edit', newPurchase);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/search/controller', ['exports', 'hospitalrun/inventory/listing/controller'], function (exports, _hospitalrunInventoryListingController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunInventoryListingController['default'].extend();\n});","define('hospitalrun/tests/inventory/search/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/search/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/search/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'inventory',\n    searchKeys: [{\n      name: 'crossReference',\n      type: 'contains'\n    }, {\n      name: 'description',\n      type: 'fuzzy'\n    }, {\n      name: 'friendlyId',\n      type: 'contains'\n    }, {\n      name: 'name',\n      type: 'fuzzy'\n    }],\n    searchModel: 'inventory'\n  });\n});","define('hospitalrun/tests/inventory/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/inventory/transfer/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    inventoryController: _ember['default'].inject.controller('inventory'),\n\n    warehouseList: _ember['default'].computed.alias('inventoryController.warehouseList'),\n    aisleLocationList: _ember['default'].computed.alias('inventoryController.aisleLocationList'),\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.transferAisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.transferLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    title: (0, _emberI18n.translationMacro)('inventory.titles.transfer'),\n    updateButtonText: (0, _emberI18n.translationMacro)('inventory.labels.transfer'),\n    updateButtonAction: 'transfer',\n    updateCapability: 'adjust_inventory_location',\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      transfer: function transfer() {\n        this.updateLookupLists();\n        this.send('transferItems', this.get('model'), true);\n      }\n    }\n  });\n});","define('hospitalrun/tests/inventory/transfer/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - inventory/transfer/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'inventory/transfer/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/add-line-item/controller', ['exports', 'hospitalrun/mixins/billing-categories', 'ember', 'hospitalrun/mixins/is-update-disabled'], function (exports, _hospitalrunMixinsBillingCategories, _ember, _hospitalrunMixinsIsUpdateDisabled) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsBillingCategories['default'], _hospitalrunMixinsIsUpdateDisabled['default'], {\n    invoiceController: _ember['default'].inject.controller('invoices'),\n\n    billingCategoryList: _ember['default'].computed.alias('invoiceController.billingCategoryList'),\n    editController: _ember['default'].inject.controller('invoices/edit'),\n    title: 'Add Line Item',\n    updateButtonText: 'Add',\n    updateButtonAction: 'add',\n    showUpdateButton: true,\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      add: function add() {\n        this.get('model').save().then((function (record) {\n          this.get('editController').send('addLineItem', record);\n        }).bind(this));\n      }\n    },\n\n    billingCategories: (function () {\n      var defaultBillingCategories = this.get('defaultBillingCategories');\n      var billingCategoryList = this.get('billingCategoryList');\n      if (_ember['default'].isEmpty(billingCategoryList)) {\n        return _ember['default'].Object.create({ value: defaultBillingCategories });\n      } else {\n        return billingCategoryList;\n      }\n    }).property('billingCategoryList', 'defaultBillingCategories')\n\n  });\n});","define('hospitalrun/tests/invoices/add-line-item/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/add-line-item/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/add-line-item/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: 'Delete Invoice'\n  });\n});","define('hospitalrun/tests/invoices/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/number-format', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/publish-statuses', 'hospitalrun/utils/select-values'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsNumberFormat, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsPublishStatuses, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsNumberFormat['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPublishStatuses['default'], {\n    invoiceController: _ember['default'].inject.controller('invoices'),\n    expenseAccountList: _ember['default'].computed.alias('invoiceController.expenseAccountList.value'),\n    patientList: _ember['default'].computed.alias('invoiceController.patientList'),\n    pharmacyCharges: [],\n    pricingProfiles: _ember['default'].computed.map('invoiceController.pricingProfiles', _hospitalrunUtilsSelectValues['default'].selectObjectMap),\n    supplyCharges: [],\n    updateCapability: 'add_invoice',\n    wardCharges: [],\n\n    additionalButtons: (function () {\n      var buttons = [];\n      var isValid = this.get('model.isValid');\n      var status = this.get('model.status');\n      if (isValid && status === 'Draft') {\n        buttons.push({\n          'class': 'btn btn-default default',\n          buttonAction: 'finalizeInvoice',\n          buttonIcon: 'glyphicon glyphicon-ok',\n          buttonText: 'Invoice Ready'\n        });\n      }\n      buttons.push({\n        'class': 'btn btn-default neutral',\n        buttonAction: 'printInvoice',\n        buttonIcon: 'glyphicon glyphicon-print',\n        buttonText: 'Print'\n      });\n      return buttons;\n    }).property('model.isValid', 'model.status'),\n\n    canAddCharge: (function () {\n      return this.currentUserCan('add_charge');\n    }).property(),\n\n    canAddPayment: (function () {\n      return this.currentUserCan('add_payment');\n    }).property(),\n\n    pharmacyExpenseAccount: (function () {\n      var expenseAccountList = this.get('expenseAccountList');\n      if (!_ember['default'].isEmpty(expenseAccountList)) {\n        var account = expenseAccountList.find(function (value) {\n          if (value.toLowerCase().indexOf('pharmacy') > -1) {\n            return true;\n          }\n        });\n        return account;\n      }\n    }).property('expenseAccountList.value'),\n\n    actions: {\n      addItemCharge: function addItemCharge(lineItem) {\n        var details = lineItem.get('details');\n        var detail = this.store.createRecord('line-item-detail', {\n          id: uuid.v4()\n        });\n        details.addObject(detail);\n      },\n\n      addLineItem: function addLineItem(lineItem) {\n        var lineItems = this.get('model.lineItems');\n        lineItems.addObject(lineItem);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      deleteCharge: function deleteCharge(deleteInfo) {\n        this._deleteObject(deleteInfo.itemToDelete, deleteInfo.deleteFrom);\n      },\n\n      deleteLineItem: function deleteLineItem(deleteInfo) {\n        this._deleteObject(deleteInfo.itemToDelete, this.get('model.lineItems'));\n      },\n\n      finalizeInvoice: function finalizeInvoice() {\n        var currentInvoice = this.get('model');\n        var invoicePayments = currentInvoice.get('payments');\n        var paymentsToSave = [];\n        currentInvoice.get('patient.payments').then((function (patientPayments) {\n          patientPayments.forEach((function (payment) {\n            var invoice = payment.get('invoice');\n            if (_ember['default'].isEmpty(invoice)) {\n              payment.set('invoice', currentInvoice);\n              paymentsToSave.push(payment.save());\n              invoicePayments.addObject(payment);\n            }\n          }).bind(this));\n          _ember['default'].RSVP.all(paymentsToSave).then((function () {\n            this.set('model.status', 'Billed');\n            this.send('update');\n          }).bind(this));\n        }).bind(this));\n      },\n\n      printInvoice: function printInvoice() {\n        this.transitionToRoute('print.invoice', this.get('model'));\n      },\n\n      removePayment: function removePayment(removeInfo) {\n        var payments = this.get('model.payments');\n        var payment = removeInfo.itemToRemove;\n        payment.set('invoice');\n        payments.removeObject(removeInfo.itemToRemove);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      showAddLineItem: function showAddLineItem() {\n        var newLineItem = this.store.createRecord('billing-line-item', {\n          id: uuid.v4()\n        });\n        this.send('openModal', 'invoices.add-line-item', newLineItem);\n      },\n\n      showDeleteItem: function showDeleteItem(itemToDelete, deleteFrom) {\n        this.showDeleteModal(itemToDelete, _ember['default'].Object.create({\n          confirmAction: 'deleteCharge',\n          deleteFrom: deleteFrom,\n          title: 'Delete Charge'\n        }));\n      },\n\n      showDeleteLineItem: function showDeleteLineItem(item) {\n        this.showDeleteModal(item, _ember['default'].Object.create({\n          confirmAction: 'deleteLineItem',\n          title: 'Delete Line Item'\n        }));\n      },\n\n      showDeleteModal: function showDeleteModal(item, options) {\n        options = _ember['default'].merge(options, _ember['default'].Object.create({\n          message: 'Are you sure you want to delete ' + item.get('name') + '?',\n          itemToDelete: item,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n        this.send('openModal', 'dialog', options);\n      },\n\n      showRemovePayment: function showRemovePayment(payment) {\n        var message = 'Are you sure you want to remove this payment from this invoice?';\n        var model = _ember['default'].Object.create({\n          itemToRemove: payment\n        });\n        var title = 'Remove Payment';\n        this.displayConfirm(title, message, 'removePayment', model);\n      },\n\n      toggleDetails: function toggleDetails(item) {\n        item.toggleProperty('showDetails');\n      }\n    },\n\n    changePaymentProfile: (function () {\n      var patient = this.get('model.patient');\n      var paymentProfile = this.get('model.paymentProfile');\n      if (!_ember['default'].isEmpty(patient) && _ember['default'].isEmpty(paymentProfile)) {\n        this.set('model.paymentProfile', patient.get('paymentProfile'));\n      }\n    }).observes('model.patient'),\n\n    paymentProfileChanged: (function () {\n      var discountPercentage = this._getValidNumber(this.get('model.paymentProfile.discountPercentage'));\n      var originalPaymentProfileId = this.get('model.originalPaymentProfileId');\n      var profileId = this.get('model.paymentProfile.id');\n      if (profileId !== originalPaymentProfileId) {\n        var lineItems = this.get('model.lineItems');\n        lineItems.forEach((function (lineItem) {\n          var details = lineItem.get('details');\n          var lineDiscount = 0;\n          details.forEach((function (detail) {\n            var pricingOverrides = detail.get('pricingItem.pricingOverrides');\n            if (!_ember['default'].isEmpty(pricingOverrides)) {\n              var pricingOverride = pricingOverrides.findBy('profile.id', profileId);\n              if (!_ember['default'].isEmpty(pricingOverride)) {\n                _ember['default'].set(detail, 'price', pricingOverride.get('price'));\n              }\n            }\n          }).bind(this));\n          if (discountPercentage > 0) {\n            var lineTotal = lineItem.get('total');\n            lineDiscount = this._numberFormat(discountPercentage / 100 * lineTotal, true);\n            lineItem.set('discount', lineDiscount);\n          }\n        }).bind(this));\n        this.set('model.originalPaymentProfileId', profileId);\n      }\n    }).observes('model.paymentProfile'),\n\n    visitChanged: (function () {\n      var visit = this.get('model.visit');\n      var lineItems = this.get('model.lineItems');\n      if (!_ember['default'].isEmpty(visit) && _ember['default'].isEmpty(lineItems)) {\n        this.set('model.originalPaymentProfileId');\n        var promises = this.resolveVisitChildren();\n        _ember['default'].RSVP.allSettled(promises, 'Resolved visit children before generating invoice').then((function (results) {\n          var _this = this;\n\n          var chargePromises = this._resolveVisitDescendents(results, 'charges');\n          if (!_ember['default'].isEmpty(chargePromises)) {\n            (function () {\n              var promiseLabel = 'Reloaded charges before generating invoice';\n              _ember['default'].RSVP.allSettled(chargePromises, promiseLabel).then((function (chargeResults) {\n                var pricingPromises = [];\n                chargeResults.forEach(function (result) {\n                  if (!_ember['default'].isEmpty(result.value)) {\n                    var pricingItem = result.value.get('pricingItem');\n                    if (!_ember['default'].isEmpty(pricingItem)) {\n                      pricingPromises.push(pricingItem.reload());\n                    }\n                  }\n                });\n                promiseLabel = 'Reloaded pricing items before generating invoice';\n                _ember['default'].RSVP.allSettled(pricingPromises, promiseLabel).then((function () {\n                  this._generateLineItems(visit, results);\n                  this.paymentProfileChanged();\n                }).bind(this));\n              }).bind(_this));\n            })();\n          } else {\n            this._generateLineItems(visit, results);\n            this.paymentProfileChanged();\n          }\n        }).bind(this), function (err) {\n          console.log('Error resolving visit children', err);\n        });\n      }\n    }).observes('model.visit'),\n\n    _addPharmacyCharge: function _addPharmacyCharge(charge, medicationItemName) {\n      var _this2 = this;\n\n      return charge.getMedicationDetails(medicationItemName).then(function (medicationDetails) {\n        var quantity = charge.get('quantity');\n        var pharmacyCharges = _this2.get('pharmacyCharges');\n        var pharmacyExpenseAccount = _this2.get('pharmacyExpenseAccount');\n        var pharmacyCharge = _this2.store.createRecord('line-item-detail', {\n          id: uuid.v4(),\n          name: medicationDetails.name,\n          quantity: quantity,\n          price: medicationDetails.price,\n          department: 'Pharmacy',\n          expenseAccount: pharmacyExpenseAccount\n        });\n        pharmacyCharges.addObject(pharmacyCharge);\n      });\n    },\n\n    _addSupplyCharge: function _addSupplyCharge(charge, department) {\n      var supplyCharges = this.get('supplyCharges');\n      var supplyCharge = this._createChargeItem(charge, department);\n      supplyCharges.addObject(supplyCharge);\n    },\n\n    _createChargeItem: function _createChargeItem(charge, department) {\n      var chargeItem = this.store.createRecord('line-item-detail', {\n        id: uuid.v4(),\n        name: charge.get('pricingItem.name'),\n        expenseAccount: charge.get('pricingItem.expenseAccount'),\n        quantity: charge.get('quantity'),\n        price: charge.get('pricingItem.price'),\n        department: department,\n        pricingItem: charge.get('pricingItem')\n      });\n      return chargeItem;\n    },\n\n    /**\n     * Remove the specified object from the specified list, update the model and close the modal.\n     * @param objectToDelete {object} - the object to remove\n     * @param deleteFrom {Array} - the array to remove the object from.\n     */\n    _deleteObject: function _deleteObject(objectToDelete, deleteFrom) {\n      deleteFrom.removeObject(objectToDelete);\n      if (!objectToDelete.get('isNew')) {\n        objectToDelete.destroyRecord();\n      }\n      this.send('update', true);\n      this.send('closeModal');\n    },\n\n    _mapWardCharge: function _mapWardCharge(charge) {\n      return this._createChargeItem(charge, 'Ward');\n    },\n\n    _completeBeforeUpdate: function _completeBeforeUpdate(sequence, resolve, reject) {\n      var invoiceId = 'inv';\n      var sequenceValue = undefined;\n      sequence.incrementProperty('value', 1);\n      sequenceValue = sequence.get('value');\n      if (sequenceValue < 100000) {\n        invoiceId += String('00000' + sequenceValue).slice(-5);\n      } else {\n        invoiceId += sequenceValue;\n      }\n      this.set('model.id', invoiceId);\n      sequence.save().then(resolve, reject);\n    },\n\n    _generateLineItems: function _generateLineItems(visit, visitChildren) {\n      var _this3 = this;\n\n      var endDate = visit.get('endDate');\n      var imaging = visitChildren[0].value;\n      var labs = visitChildren[1].value;\n      var lineDetail = undefined,\n          lineItem = undefined;\n      var lineItems = this.get('model.lineItems');\n      var medication = visitChildren[2].value;\n      var procedures = visitChildren[3].value;\n      var startDate = visit.get('startDate');\n      var visitCharges = visit.get('charges');\n      this.setProperties({\n        pharmacyCharges: [],\n        supplyCharges: [],\n        wardCharges: []\n      });\n      if (!_ember['default'].isEmpty(endDate) && !_ember['default'].isEmpty(startDate)) {\n        endDate = moment(endDate);\n        startDate = moment(startDate);\n        var stayDays = endDate.diff(startDate, 'days');\n        if (stayDays > 1) {\n          lineDetail = this.store.createRecord('line-item-detail', {\n            id: uuid.v4(),\n            name: 'Days',\n            quantity: stayDays\n          });\n          lineItem = this.store.createRecord('billing-line-item', {\n            id: uuid.v4(),\n            category: 'Hospital Charges',\n            name: 'Room/Accomodation'\n          });\n          lineItem.get('details').addObject(lineDetail);\n          lineItems.addObject(lineItem);\n        }\n      }\n\n      var pharmacyChargePromises = [];\n      medication.forEach((function (medicationItem) {\n        pharmacyChargePromises.push(this._addPharmacyCharge(medicationItem, 'inventoryItem'));\n      }).bind(this));\n\n      this.set('wardCharges', visitCharges.map(this._mapWardCharge.bind(this)));\n\n      procedures.forEach((function (procedure) {\n        var charges = procedure.get('charges');\n        charges.forEach((function (charge) {\n          if (charge.get('medicationCharge')) {\n            pharmacyChargePromises.push(this._addPharmacyCharge(charge, 'medication'));\n          } else {\n            this._addSupplyCharge(charge, 'O.R.');\n          }\n        }).bind(this));\n      }).bind(this));\n\n      labs.forEach((function (lab) {\n        if (!_ember['default'].isEmpty(lab.get('labType'))) {\n          this._addSupplyCharge(_ember['default'].Object.create({\n            pricingItem: lab.get('labType'),\n            quantity: 1\n          }), 'Lab');\n        }\n        lab.get('charges').forEach((function (charge) {\n          this._addSupplyCharge(charge, 'Lab');\n        }).bind(this));\n      }).bind(this));\n\n      imaging.forEach((function (imaging) {\n        if (!_ember['default'].isEmpty(imaging.get('imagingType'))) {\n          this._addSupplyCharge(_ember['default'].Object.create({\n            pricingItem: imaging.get('imagingType'),\n            quantity: 1\n          }), 'Imaging');\n        }\n        imaging.get('charges').forEach((function (charge) {\n          this._addSupplyCharge(charge, 'Imaging');\n        }).bind(this));\n      }).bind(this));\n\n      _ember['default'].RSVP.all(pharmacyChargePromises).then(function () {\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: uuid.v4(),\n          name: 'Pharmacy',\n          category: 'Hospital Charges'\n        });\n        lineItem.get('details').addObjects(_this3.get('pharmacyCharges'));\n        lineItems.addObject(lineItem);\n\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: uuid.v4(),\n          name: 'X-ray/Lab/Supplies',\n          category: 'Hospital Charges'\n        });\n        lineItem.get('details').addObjects(_this3.get('supplyCharges'));\n        lineItems.addObject(lineItem);\n\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: uuid.v4(),\n          name: 'Ward Items',\n          category: 'Hospital Charges'\n        });\n        lineItem.get('details').addObjects(_this3.get('wardCharges'));\n        lineItems.addObject(lineItem);\n\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: uuid.v4(),\n          name: 'Physical Therapy',\n          category: 'Hospital Charges'\n        });\n        lineItems.addObject(lineItem);\n\n        lineItem = _this3.store.createRecord('billing-line-item', {\n          id: uuid.v4(),\n          name: 'Others/Misc',\n          category: 'Hospital Charges'\n        });\n        lineItems.addObject(lineItem);\n\n        _this3.send('update', true);\n      });\n    },\n\n    _resolveVisitDescendents: function _resolveVisitDescendents(results, childNameToResolve) {\n      var promises = [];\n      results.forEach(function (result) {\n        if (!_ember['default'].isEmpty(result.value)) {\n          result.value.forEach(function (record) {\n            var children = record.get(childNameToResolve);\n            if (!_ember['default'].isEmpty(children)) {\n              children.forEach(function (child) {\n                // Make sure children are fully resolved\n                promises.push(child.reload());\n              });\n            }\n          });\n        }\n      });\n      return promises;\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var lineItems = this.get('model.lineItems');\n        var savePromises = [];\n        lineItems.forEach((function (lineItem) {\n          lineItem.get('details').forEach((function (detail) {\n            savePromises.push(detail.save());\n          }).bind(this));\n          savePromises.push(lineItem.save());\n        }).bind(this));\n        _ember['default'].RSVP.all(savePromises, 'Saved invoice children before saving invoice').then((function () {\n          if (this.get('model.isNew')) {\n            this.store.find('sequence', 'invoice').then((function (sequence) {\n              this._completeBeforeUpdate(sequence, resolve, reject);\n            }).bind(this), (function () {\n              var store = this.get('store');\n              var newSequence = store.push(store.normalize('sequence', {\n                id: 'invoice',\n                value: 0\n              }));\n              this._completeBeforeUpdate(newSequence, resolve, reject);\n            }).bind(this));\n          } else {\n            resolve();\n          }\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    afterUpdate: function afterUpdate() {\n      var message = 'The invoice record has been saved.';\n      this.displayAlert('Invoice Saved', message);\n    }\n  });\n});","define('hospitalrun/tests/invoices/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    editTitle: 'Edit Invoice',\n    modelName: 'invoice',\n    newTitle: 'New Invoice',\n\n    actions: {\n      deleteCharge: function deleteCharge(model) {\n        this.controller.send('deleteCharge', model);\n      },\n\n      deleteLineItem: function deleteLineItem(model) {\n        this.controller.send('deleteLineItem', model);\n      },\n\n      removePayment: function removePayment(model) {\n        this.controller.send('removePayment', model);\n      }\n    },\n\n    afterModel: function afterModel(model) {\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var lineItems = model.get('lineItems');\n        var promises = [];\n        lineItems.forEach(function (lineItem) {\n          promises.push(lineItem.reload());\n        });\n        _ember['default'].RSVP.all(promises, 'Reload billing line items for invoice').then(function (results) {\n          var detailPromises = [];\n          results.forEach(function (result) {\n            result.get('details').forEach(function (detail) {\n              detailPromises.push(detail.reload());\n            });\n          });\n          _ember['default'].RSVP.all(detailPromises, 'Reload billing line item details for invoice').then(resolve, reject);\n        }, reject);\n      });\n    },\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        billDate: new Date(),\n        status: 'Draft'\n      });\n    },\n\n    setupController: function setupController(controller, model) {\n      model.set('originalPaymentProfileId', model.get('paymentProfile.id'));\n      this._super(controller, model);\n      var lineItems = model.get('lineItems');\n      var promises = [];\n      lineItems.forEach(function (lineItem) {\n        lineItem.get('details').forEach(function (detail) {\n          var pricingItem = detail.get('pricingItem');\n          if (!_ember['default'].isEmpty(pricingItem)) {\n            promises.push(pricingItem.reload());\n          }\n        });\n      });\n    }\n  });\n});","define('hospitalrun/tests/invoices/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    addPermission: 'add_invoice',\n    deletePermission: 'delete_invoice',\n    canAddPayment: (function () {\n      return this.currentUserCan('add_payment');\n    }).property(),\n    startKey: [],\n    queryParams: ['startKey', 'status']\n  });\n});","define('hospitalrun/tests/invoices/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'invoice',\n    pageTitle: 'Invoice Listing',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var billDateAsTime = item.get('billDateAsTime');\n      var id = this._getPouchIdFromItem(item);\n      var searchStatus = item.get('status');\n      return [searchStatus, billDateAsTime, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams(params) {\n      var queryParams = undefined;\n      var maxId = this._getMaxPouchId();\n      var maxValue = this.get('maxValue');\n      var minId = this._getMinPouchId();\n      var searchStatus = params.status;\n      if (_ember['default'].isEmpty(searchStatus)) {\n        searchStatus = 'Billed';\n      }\n      this.set('pageTitle', searchStatus + ' Invoices');\n      queryParams = {\n        options: {\n          startkey: [searchStatus, null, minId],\n          endkey: [searchStatus, maxValue, maxId]\n        },\n        mapReduce: 'invoice_by_status'\n      };\n\n      if (searchStatus === 'All') {\n        delete queryParams.options.startkey;\n        delete queryParams.options.endkey;\n      }\n      return queryParams;\n    },\n\n    queryParams: {\n      startKey: { refreshModel: true },\n      status: { refreshModel: true }\n    }\n  });\n});","define('hospitalrun/tests/invoices/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/payment/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {\n    cancelAction: 'closeModal',\n    findPatientVisits: false,\n    invoiceController: _ember['default'].inject.controller('invoices'),\n    newPayment: false,\n\n    expenseAccountList: _ember['default'].computed.alias('invoiceController.expenseAccountList'),\n    patientList: _ember['default'].computed.alias('invoiceController.patientList'),\n\n    _finishUpdate: function _finishUpdate(message, title) {\n      this.send('closeModal');\n      this.displayAlert(title, message);\n    },\n\n    currentPatient: (function () {\n      var type = this.get('model.paymentType');\n      if (type === 'Deposit') {\n        return this.get('model.patient');\n      } else {\n        return this.get('model.invoice.patient');\n      }\n    }).property('model.patient', 'model.paymentType', 'model.invoice.patient'),\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      var type = this.get('model.paymentType');\n      if (isNew) {\n        return 'Add ' + type;\n      } else {\n        return 'Edit ' + type;\n      }\n    }).property('model.isNew', 'model.paymentType'),\n\n    selectPatient: (function () {\n      var isNew = this.get('model.isNew');\n      var type = this.get('model.paymentType');\n      return isNew && type === 'Deposit';\n    }).property('model.isNew', 'model.paymentType'),\n\n    beforeUpdate: function beforeUpdate() {\n      if (this.get('model.isNew')) {\n        this.set('newPayment', true);\n      } else {\n        this.set('newPayment', false);\n      }\n      var patient = this.get('currentPatient');\n      this.set('model.charityPatient', patient.get('patientType') === 'Charity');\n      return _ember['default'].RSVP.resolve();\n    },\n\n    afterUpdate: function afterUpdate() {\n      this.get('model').save().then((function (record) {\n        var _this = this;\n\n        if (this.get('newPayment')) {\n          (function () {\n            var patient = _this.get('currentPatient');\n            patient.get('payments').then((function (payments) {\n              payments.addObject(record);\n              patient.save().then((function () {\n                var _this2 = this;\n\n                if (record.get('paymentType') === 'Deposit') {\n                  var message = 'A deposit of ' + record.get('amount') + ' was added for patient ' + patient.get('displayName');\n                  this._finishUpdate(message, 'Deposit Added');\n                } else {\n                  (function () {\n                    var invoice = _this2.get('model.invoice');\n                    invoice.addPayment(record);\n                    invoice.save().then((function () {\n                      var message = 'A payment of ' + record.get('amount') + ' was added to invoice ' + invoice.get('id');\n                      this._finishUpdate(message, 'Payment Added');\n                    }).bind(_this2));\n                  })();\n                }\n              }).bind(this));\n            }).bind(_this));\n          })();\n        } else {\n          this.send('closeModal');\n        }\n      }).bind(this));\n    }\n  });\n});","define('hospitalrun/tests/invoices/payment/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/payment/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/payment/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'hospitalrun/mixins/modal-helper', 'hospitalrun/mixins/patient-list-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _hospitalrunMixinsModalHelper, _hospitalrunMixinsPatientListRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsModalHelper['default'], _hospitalrunMixinsPatientListRoute['default'], {\n    addCapability: 'add_invoice',\n    currentScreenTitle: 'Invoices',\n    editTitle: 'Edit Invoice',\n    newTitle: 'New Invoice',\n    moduleName: 'invoices',\n    newButtonText: '+ new invoice',\n    sectionTitle: 'Invoices',\n\n    additionalButtons: (function () {\n      if (this.currentUserCan('add_payment')) {\n        return [{\n          'class': 'btn btn-default',\n          buttonText: '+ add deposit',\n          buttonAction: 'showAddDeposit'\n        }];\n      }\n    }).property(),\n\n    additionalModels: [{\n      name: 'billingCategoryList',\n      findArgs: ['lookup', 'billing_categories']\n    }, {\n      name: 'expenseAccountList',\n      findArgs: ['lookup', 'expense_account_list']\n    }, {\n      name: 'pricingProfiles',\n      findArgs: ['price-profile']\n    }],\n\n    actions: {\n      showAddDeposit: function showAddDeposit() {\n        var payment = this.store.createRecord('payment', {\n          paymentType: 'Deposit',\n          datePaid: new Date()\n        });\n        this.send('openModal', 'invoices.payment', payment);\n      },\n\n      showAddPayment: function showAddPayment(invoice) {\n        var payment = this.store.createRecord('payment', {\n          invoice: invoice,\n          paymentType: 'Payment',\n          datePaid: new Date()\n        });\n        this.send('openModal', 'invoices.payment', payment);\n      },\n\n      showEditPayment: function showEditPayment(payment) {\n        if (this.currentUserCan('add_payment')) {\n          this.send('openModal', 'invoices.payment', payment);\n        }\n      }\n    },\n\n    subActions: (function () {\n      var actions = [{\n        text: 'Billed',\n        linkTo: 'invoices.index',\n        statusQuery: 'Billed'\n      }];\n      if (this.currentUserCan('add_invoice')) {\n        actions.push({\n          text: 'Drafts',\n          linkTo: 'invoices.index',\n          statusQuery: 'Draft'\n        });\n        actions.push({\n          text: 'All Invoices',\n          linkTo: 'invoices.index',\n          statusQuery: 'All'\n        });\n      }\n      actions.push({\n        text: 'Paid',\n        linkTo: 'invoices.index',\n        statusQuery: 'Paid'\n      });\n      return actions;\n    }).property()\n\n  });\n});","define('hospitalrun/tests/invoices/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/invoices/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'invoices',\n    searchKeys: [{\n      name: 'externalInvoiceNumber',\n      type: 'contains'\n    }, {\n      name: 'patientInfo',\n      type: 'contains'\n    }],\n    searchModel: 'invoice'\n  });\n});","define('hospitalrun/tests/invoices/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - invoices/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'invoices/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, _hospitalrunProceduresChargeController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunProceduresChargeController['default'].extend({\n    labsEdit: _ember['default'].inject.controller('labs/edit'),\n    cancelAction: 'closeModal',\n    newPricingItem: false,\n    requestingController: _ember['default'].computed.alias('controllers.labs/edit'),\n    pricingList: _ember['default'].computed.alias('controllers.labs/edit.chargesPricingList')\n  });\n});","define('hospitalrun/tests/labs/charge/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/charge/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/charge/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    startKey: [],\n    showActions: false\n  });\n});","define('hospitalrun/tests/labs/completed/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/completed/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/completed/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/completed/labs-completed-list-item/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'tr'\n  });\n});","define('hospitalrun/tests/labs/completed/labs-completed-list-item/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/completed/labs-completed-list-item/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/completed/labs-completed-list-item/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/completed/route', ['exports', 'hospitalrun/labs/index/route', 'ember-i18n'], function (exports, _hospitalrunLabsIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunLabsIndexRoute['default'].extend({\n    pageTitle: (0, _emberI18n.translationMacro)('labs.completedTitle'),\n    searchStatus: 'Completed'\n  });\n});","define('hospitalrun/tests/labs/completed/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/completed/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/completed/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientSubmodule, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {\n    title: (0, _emberI18n.translationMacro)('labs.deleteTitle'),\n\n    actions: {\n      'delete': function _delete() {\n        this.deleteChildFromVisit('labs');\n      }\n    }\n  });\n});","define('hospitalrun/tests/labs/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], {\n    labsController: _ember['default'].inject.controller('labs'),\n    chargePricingCategory: 'Lab',\n    chargeRoute: 'labs.charge',\n    selectedLabType: null,\n\n    canComplete: (function () {\n      var isNew = this.get('model.isNew');\n      var labTypeName = this.get('model.labTypeName');\n      var selectedLabType = this.get('selectedLabType');\n      if (isNew && (_ember['default'].isEmpty(labTypeName) || _ember['default'].isArray(selectedLabType) && selectedLabType.length > 1)) {\n        return false;\n      } else {\n        return this.currentUserCan('complete_lab');\n      }\n    }).property('selectedLabType.[]', 'model.labTypeName'),\n\n    actions: {\n      completeLab: function completeLab() {\n        this.set('model.status', 'Completed');\n        this.get('model').validate().then((function () {\n          if (this.get('model.isValid')) {\n            this.set('model.labDate', new Date());\n            this.send('update');\n          }\n        }).bind(this))['catch'](_ember['default'].K);\n      },\n\n      /**\n       * Update the model and perform the before update and after update\n       */\n      update: function update() {\n        var _this = this;\n\n        if (this.get('model.isNew')) {\n          (function () {\n            var newLab = _this.get('model');\n            var selectedLabType = _this.get('selectedLabType');\n            if (_ember['default'].isEmpty(_this.get('model.status'))) {\n              _this.set('model.status', 'Requested');\n            }\n            _this.set('model.requestedBy', newLab.getUserName());\n            _this.set('model.requestedDate', new Date());\n            if (_ember['default'].isEmpty(selectedLabType)) {\n              _this.saveNewPricing(_this.get('model.labTypeName'), 'Lab', 'model.labType').then((function () {\n                this.addChildToVisit(newLab, 'labs', 'Lab').then((function () {\n                  this.saveModel();\n                }).bind(this));\n              }).bind(_this));\n            } else {\n              _this.getSelectedPricing('selectedLabType').then((function (pricingRecords) {\n                if (_ember['default'].isArray(pricingRecords)) {\n                  this.createMultipleRequests(pricingRecords, 'labType', 'labs', 'Lab');\n                } else {\n                  this.set('model.labType', pricingRecords);\n                  this.addChildToVisit(newLab, 'labs', 'Lab').then((function () {\n                    this.saveModel();\n                  }).bind(this));\n                }\n              }).bind(_this));\n            }\n          })();\n        } else {\n          this.saveModel();\n        }\n      }\n    },\n\n    additionalButtons: (function () {\n      var canComplete = this.get('canComplete');\n      var isValid = this.get('model.isValid');\n      var i18n = this.get('i18n');\n      if (isValid && canComplete) {\n        return [{\n          buttonAction: 'completeLab',\n          buttonIcon: 'glyphicon glyphicon-ok',\n          'class': 'btn btn-primary on-white',\n          buttonText: i18n.t('buttons.complete')\n        }];\n      }\n    }).property('canComplete', 'model.isValid'),\n\n    pricingTypeForObjectType: 'Lab Procedure',\n    pricingTypes: _ember['default'].computed.alias('labsController.labPricingTypes'),\n\n    pricingList: null, // This gets filled in by the route\n\n    updateCapability: 'add_lab',\n\n    afterUpdate: function afterUpdate(saveResponse, multipleRecords) {\n      var i18n = this.get('i18n');\n      var afterDialogAction = undefined,\n          alertMessage = undefined,\n          alertTitle = undefined;\n      if (this.get('model.status') === 'Completed') {\n        alertTitle = i18n.t('labs.alerts.requestCompletedTitle');\n        alertMessage = i18n.t('labs.alerts.requestCompletedMessage');\n      } else {\n        alertTitle = i18n.t('labs.alerts.requestSavedTitle');\n        alertMessage = i18n.t('labs.alerts.requestSavedMessage');\n      }\n      if (multipleRecords) {\n        afterDialogAction = this.get('cancelAction');\n      }\n      this.saveVisitIfNeeded(alertTitle, alertMessage, afterDialogAction);\n      this.set('model.selectPatient', false);\n    }\n\n  });\n});","define('hospitalrun/tests/labs/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/edit/route', ['exports', 'ember', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'hospitalrun/mixins/patient-list-route', 'ember-i18n'], function (exports, _ember, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsChargeRoute, _hospitalrunMixinsPatientListRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsChargeRoute['default'], _hospitalrunMixinsPatientListRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('labs.editTitle'),\n    modelName: 'lab',\n    newTitle: (0, _emberI18n.translationMacro)('labs.newTitle'),\n    pricingCategory: 'Lab',\n\n    actions: {\n      returnToAllItems: function returnToAllItems() {\n        this.controller.send('returnToAllItems');\n      }\n    },\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        selectPatient: true,\n        requestDate: moment().startOf('day').toDate()\n      });\n    }\n  });\n});","define('hospitalrun/tests/labs/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    addPermission: 'add_lab'\n  });\n});","define('hospitalrun/tests/labs/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/index/labs-edit-button/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'button',\n    classNames: ['btn', 'btn-default', 'neutral']\n  });\n});","define('hospitalrun/tests/labs/index/labs-edit-button/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/index/labs-edit-button/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/index/labs-edit-button/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/index/labs-list-item/component', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Component.extend({\n    tagName: 'tr',\n    classNames: ['clickable'],\n\n    click: function click() {\n      this.sendAction('action', this.lab);\n    }\n  });\n});","define('hospitalrun/tests/labs/index/labs-list-item/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/index/labs-list-item/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/index/labs-list-item/component.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'lab',\n    pageTitle: (0, _emberI18n.translationMacro)('labs.requestsTitle'),\n    searchStatus: 'Requested',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var labDateAsTime = item.get('labDateAsTime');\n      var id = this._getPouchIdFromItem(item);\n      var requestedDateAsTime = item.get('requestedDateAsTime');\n      var searchStatus = this.get('searchStatus');\n      return [searchStatus, requestedDateAsTime, labDateAsTime, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var maxId = this._getMaxPouchId();\n      var maxValue = this.get('maxValue');\n      var minId = this._getMinPouchId();\n      var searchStatus = this.get('searchStatus');\n      return {\n        options: {\n          startkey: [searchStatus, null, null, minId],\n          endkey: [searchStatus, maxValue, maxValue, maxId]\n        },\n        mapReduce: 'lab_by_status'\n      };\n    }\n  });\n});","define('hospitalrun/tests/labs/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/labs/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_lab',\n    additionalModels: [{\n      name: 'labPricingTypes',\n      findArgs: ['lookup', 'lab_pricing_types']\n    }],\n    allowSearch: false,\n    moduleName: 'labs',\n    newButtonText: (0, _emberI18n.translationMacro)('labs.buttons.newButton'),\n    sectionTitle: (0, _emberI18n.translationMacro)('labs.sectionTitle')\n  });\n});","define('hospitalrun/tests/labs/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - labs/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'labs/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/de/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    dashboard: {\n      title: 'Was möchten Sie tun?'\n    },\n    navigation: {\n      imaging: 'Bildgebung',\n      inventory: 'Inventar',\n      patients: 'Patienten',\n      appointments: 'Termine',\n      medication: 'Medikation',\n      labs: 'Labore',\n      billing: 'Abrechnung',\n      administration: 'Administration',\n      subnav: {\n        requests: 'Anfragen',\n        items: 'Einheiten',\n        completed: 'Erledigt',\n        newRequest: 'Neue Anfrage',\n        inventoryReceived: 'Eingeganges Inventar',\n        reports: 'Berichte',\n        patientListing: 'Patietenliste',\n        newPatient: 'Neuer Patient',\n        thisWeek: 'Diese Woche',\n        today: 'Heute',\n        search: 'Suche',\n        addAppointment: 'Termin eintragen',\n        dispense: 'Verabreichen',\n        returnMedication: 'Medikamente zurückgeben',\n        invoices: 'Rechnungen',\n        newInvoice: 'Neue Rechnung',\n        prices: 'Kosten',\n        priceProfiles: 'Preisprofile',\n        lookupLists: 'Nachschlagelisten',\n        addressFields: 'Adressfelder',\n        loadDb: 'Datenbank laden',\n        users: 'Benutzer',\n        newUser: 'Neuer Benutzer'\n      },\n      actions: {\n        logout: 'Abmelden',\n        login: 'Anmelden'\n      },\n      about: 'Über HospitalRun'\n    },\n    user: {\n      plusNewUser: '+ Neuer Benutzer',\n      usersPageTile: 'Benutzerliste'\n    },\n    admin: {\n      addressOptions: 'Adressoptionen',\n      lookupLists: 'Nachschlagelisten',\n      loadDb: 'Datenbank laden',\n      users: 'Benutzer',\n      address: {\n        address1Label: 'Adresse 1 Kennzeichen',\n        address2Label: 'Adresse 2 Kennzeichen',\n        address3Label: 'Adresse 3 Kennzeichen',\n        address4Label: 'Adresse 4 Kennzeichen',\n        include1Label: 'Einbezug 1 Kennzeichen',\n        include2Label: 'Einbezug 2 Kennzeichen',\n        include3Label: 'Einbezug 3 Kennzeichen',\n        include4Label: 'Einbezug 4 Kennzeichen',\n        titles: {\n          optionsSaved: 'Optionen gespeichert'\n        },\n        messages: {\n          addressSaved: 'Die Adressoptionen wurden gespeichert'\n        }\n      },\n      lookup: {\n        anesthesiaTypes: 'Anästhesiearten',\n        anesthesiologists: 'Anästhesiologe',\n        billingCategories: 'Abrechnungskategorien',\n        clinicList: 'Kliniken',\n        countryList: 'Länder',\n        diagnosisList: 'Diagnosen',\n        cptCodeList: 'CPT Codes',\n        expenseAccountList: 'Ausgabekonten',\n        aisleLocationList: 'Gänge-Verzeichnis',\n        warehouseList: 'Warenhaus',\n        inventoryTypes: 'Inventartypen',\n        imagingPricingTypes: 'Bildgebungs-Preiskategorien',\n        labPricingTypes: 'Labor-Preiskategorien',\n        patientStatusList: 'Patientenstatus',\n        physicianList: 'Ärzte',\n        procedureList: 'Abläufe',\n        procedureLocations: 'Ablaufs-Orte',\n        procedurePricingTypes: 'Ablaufs-Preiskategorien',\n        radiologists: 'Radiologen',\n        unitTypes: 'Einheiten',\n        vendorList: 'Anbieter',\n        visitLocationList: 'Einsatzorte',\n        visitTypes: 'Besuchsarten',\n        wardPricingTypes: 'Krankenstations-Preistypen'\n      }\n    },\n    labels: {\n      name: 'Name',\n      patient: 'Patient',\n      quantity: 'Anzahl',\n      requestedOn: 'Angefragt am',\n      dateRequested: 'Anfragedatum',\n      dateCompleted: 'Abschlussdatum',\n      requestedBy: 'Angefragt von',\n      fulfill: 'Ausführen',\n      actions: 'Aktionen',\n      action: 'Aktion',\n      notes: 'Notizen',\n      edit: 'Bearbeiten',\n      imagingType: 'Bildgebungsart',\n      result: 'Ergebnis',\n      results: 'Ergebnisse',\n      visit: 'Besuch',\n      requests: 'Anfragen',\n      completed: 'Erledigt',\n      id: 'Id-Nr',\n      sex: 'Geschlecht',\n      age: 'Alter',\n      username: 'Username',\n      email: 'E-Mail',\n      role: 'Rolle',\n      'delete': 'Entfernen',\n      userCanAddNewValue: 'Benutzer kann neue Werte hinzufügen',\n      value: 'Wert',\n      lookupType: 'Nachschlagebereich',\n      importFile: 'Datei importieren',\n      fileLoadSuccessful: 'Datei erfolgreich geladen',\n      fileToLoad: 'Datei laden',\n      startTime: 'Startzeit',\n      endTime: 'Endzeit',\n      docRead: 'Dokument gelesen',\n      docWritten: 'Dokument geschrieben',\n      displayName: 'Angezeigter Name',\n      password: 'Passwort',\n      editUser: 'Benutzer bearbeiten',\n      newUser: 'Neuer Benutzer',\n      deleteUser: 'Benutzer löschen'\n    },\n    messages: {\n      noItemsFound: 'Keine Einträge gefunden.',\n      createNewRecord: 'Neuen Eintrag erstellen?',\n      createNewUser: 'Neuen Benutzer hinzufügen?',\n      noUsersFound: 'Keine Benutzer gefunden.',\n      areYouSureDelete: 'Wollen Sie den Benutzer {{user}} sicher löschen?',\n      userHasBeenSaved: 'Der Benutzer wurde gespeichert.',\n      userSaved: 'Benutzer gespeichert',\n      forAuthorizedPersons: 'Dieser Bericht ist nur für autorisierte Personen.'\n    },\n    buttons: {\n      complete: 'Abschließen',\n      cancel: 'Abbrechen',\n      returnButton: 'Zurück',\n      add: 'Hinzufügen',\n      update: 'Aktualisieren',\n      ok: 'Okay',\n      'delete': 'Entfernen',\n      newUser: 'Neuer Benutzer',\n      addValue: 'Wert hinzufügen',\n      'import': 'Importieren',\n      loadFile: 'Datei laden'\n    },\n    login: {\n      messages: {\n        signIn: 'Bitte anmelden',\n        error: 'Benutzername oder Passwort falsch.'\n      },\n      labels: {\n        password: 'Passwort',\n        username: 'Benutzername',\n        signIn: 'Anmelden'\n      }\n    },\n    inventory: {\n      messages: {\n        noRequests: 'Keine Anfragen gefunden.',\n        createRequest: 'Neue Anfrage erstellen?'\n      }\n    },\n    imaging: {\n      pageTitle: 'Anfrage zur Bildgebung',\n      sectionTitle: 'Bildgebung',\n      buttons: {\n        newButton: '+ Neue Bildgebung'\n      },\n      labels: {\n        radiologist: 'Radiologe',\n        addNewVisit: '--Neuen Besuch hinzufügen--'\n      },\n      messages: {\n        noCompleted: 'Keine erledigten Einträge gefunden.'\n      },\n      titles: {\n        completedImaging: 'Erledigte Bildgebung',\n        editTitle: 'Bildgebungs-Anfrage bearbeiten',\n        newTitle: 'Neue Bildgebungs-Anfrage'\n      },\n      alerts: {\n        completedTitle: 'Bildgebungs-Anfrage gestellt',\n        completedMessage: 'Die Anfrage zur Bildgebung wurde abgeschlossen.',\n        savedTitle: 'Bildgebungs-Anfrage gespeichert',\n        savedMessage: 'Die Anfrage zur Bildgebung wurde gespeichert.'\n      }\n    }\n  };\n});","define('hospitalrun/tests/locales/de/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/de/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/de/translations.js should pass ESLint.\\n');\n  });\n});","define(\"hospitalrun/tests/locales/en/config\", [\"exports\"], function (exports) {\n  // Ember-I18n includes configuration for common locales. Most users\n  // can safely delete this file. Use it if you need to override behavior\n  // for a locale or define behavior for a locale that Ember-I18n\n  // doesn't know about.\n  \"use strict\";\n\n  exports[\"default\"] = {\n    // rtl: [true|FALSE],\n    //\n    // pluralForm: function(count) {\n    //   if (count === 0) { return 'zero'; }\n    //   if (count === 1) { return 'one'; }\n    //   if (count === 2) { return 'two'; }\n    //   if (count < 5) { return 'few'; }\n    //   if (count >= 5) { return 'many'; }\n    //   return 'other';\n    // }\n  };\n});","define('hospitalrun/tests/locales/en/config.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/en/config.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/config.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/en/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    dashboard: {\n      title: 'What would you like to do?'\n    },\n    errors: {\n      inclusion: 'is not included in the list',\n      exclusion: 'is reserved',\n      invalid: 'is invalid',\n      confirmation: 'doesn\\'t match {{attribute}}',\n      accepted: 'must be accepted',\n      empty: 'can\\'t be empty',\n      blank: 'can\\'t be blank',\n      present: 'must be blank',\n      tooLong: 'is too long (maximum is {{count}} characters)',\n      tooShort: 'is too short (minimum is {{count}} characters)',\n      wrongLength: 'is the wrong length (should be {{count}} characters)',\n      notANumber: 'is not a number',\n      notAnInteger: 'must be an integer',\n      greaterThan: 'must be greater than {{count}}',\n      greaterThanOrEqualTo: 'must be greater than or equal to {{count}}',\n      equalTo: 'must be equal to {{count}}',\n      lessThan: 'must be less than {{count}}',\n      lessThanOrEqualTo: 'must be less than or equal to {{count}}',\n      otherThan: 'must be other than {{count}}',\n      odd: 'must be odd',\n      even: 'must be even',\n      invalidNumber: 'not a valid number',\n      result: 'Please enter a result before completing'\n    },\n    dates: {\n      long: '{{years}} year {{months}} months {{days}} days',\n      longPlural: '{{years}} years {{months}} months {{days}} days',\n      longOmitYears: '{{months}} months {{days}} days',\n      longOmitDays: '{{years}} year {{months}} months',\n      longOmitDaysPlural: '{{years}} years {{months}} months',\n      longOmitDaysYears: '{{months}} months',\n      shortOmitYears: '{{months}}m {{days}}d',\n      short: '{{years}}y {{months}}m {{days}}d'\n    },\n    navigation: {\n      imaging: 'Imaging',\n      inventory: 'Inventory',\n      patients: 'Patients',\n      appointments: 'Appointments',\n      medication: 'Medication',\n      labs: 'Labs',\n      billing: 'Billing',\n      administration: 'Administration',\n      subnav: {\n        actions: 'Actions',\n        requests: 'Requests',\n        items: 'Items',\n        completed: 'Completed',\n        newRequest: 'New Request',\n        inventoryReceived: 'Inventory Received',\n        reports: 'Reports',\n        patientListing: 'Patient Listing',\n        newPatient: 'New Patient',\n        thisWeek: 'This Week',\n        today: 'Today',\n        search: 'Search',\n        addAppointment: 'Add Appointment',\n        dispense: 'Dispense',\n        returnMedication: 'Return Medication',\n        invoices: 'Invoices',\n        newInvoice: 'New Invoice',\n        prices: 'Prices',\n        priceProfiles: 'Price Profiles',\n        lookupLists: 'Lookup Lists',\n        addressFields: 'Address Fields',\n        loadDB: 'Load DB',\n        users: 'Users',\n        newUser: 'New User',\n        admittedPatients: 'Admitted Patients',\n        missed: 'Missed',\n        userRoles: 'User Roles',\n        workflow: 'Workflow'\n      },\n      actions: {\n        logout: 'Logout',\n        login: 'Login'\n      },\n      about: 'About HospitalRun'\n    },\n    user: {\n      plusNewUser: '+ new user',\n      usersPageTile: 'User Listing'\n    },\n    admin: {\n      addressOptions: 'Address Options',\n      lookupLists: 'Lookup Lists',\n      loadDb: 'Load DB',\n      userRoles: 'User Roles',\n      users: 'Users',\n      address: {\n        address1Label: 'Address 1 Label',\n        address2Label: 'Address 2 Label',\n        address3Label: 'Address 3 Label',\n        address4Label: 'Address 4 Label',\n        include1Label: 'Include 1 Label',\n        include2Label: 'Include 2 Label',\n        include3Label: 'Include 3 Label',\n        include4Label: 'Include 4 Label',\n        titles: {\n          optionsSaved: 'Options Saved'\n        },\n        messages: {\n          addressSaved: 'The address options have been saved'\n        },\n\n        newTitle: 'Address Options',\n        editTitle: 'Address Options',\n        addressLabel: 'Address'\n      },\n      loaddb: {\n        progressMessage: 'Please wait while your database is loaded.',\n        progressTitle: 'Loading Database',\n        displayAlertTitle: 'Select File To Load',\n        displayAlertMessage: 'Please select file to load.',\n        errorDisplayAlertTitle: 'Error Loading',\n        errorDisplayAlertMessage: 'The database could not be imported. The error was: {{error}}',\n        editTitle: 'Load DB'\n      },\n      lookup: {\n        deleteValueInventoryTypeMedicationTitle: 'Cannot Delete Medication',\n        deleteValueInventoryTypeMedicationMessage: 'The Medication inventory type cannot be deleted because it is needed for the Medication module.',\n        deleteValueLabPricingTypeProcedureTitle: 'Cannot Delete Lab Pricing Type',\n        deleteValueLabPricingTypeProcedureMessage: 'The Lab Procedure pricing type cannot be deleted because it is needed for the Labs module.',\n        deleteValueImagingPricingTypeProcedureTitle: 'Cannot Delete Imaging Pricing Type',\n        deleteValueImagingPricingTypeProcedureMessage: 'The Imaging Procedure pricing type cannot be deleted because it is needed for the Imaging module.',\n        deleteValueVisitTypeAdmissionTitle: 'Cannot Delete Admission Visit Type',\n        deleteValueVisitTypeAdmissionMessage: 'The Admission Visit type cannot be deleted because it is needed for the Visits module.',\n        deleteValueVisitTypeImagingTitle: 'Cannot Delete Imaging Visit Type',\n        deleteValueVisitTypeImagingMessage: 'The Imaging Visit type cannot be deleted because it is needed for the Imaging module.',\n        deleteValueVisitTypeLabTitle: 'Cannot Delete Lab Visit Type',\n        deleteValueVisitTypeLabMessage: 'The Lab Visit type cannot be deleted because it is needed for the Lab module.',\n        deleteValueVisitTypePharmacyTitle: 'Cannot Delete Pharmacy Visit Type',\n        deleteValueVisitTypePharmacyMessage: 'The Lab Visit type cannot be deleted because it is needed for the Medication module.',\n        alertImportListTitle: 'Select File To Import',\n        alertImportListMessage: 'Please select file to import.',\n        alertImportListSaveTitle: 'List Imported',\n        alertImportListSaveMessage: 'The lookup list has been imported.',\n        alertImportListUpdateTitle: 'List Saved',\n        alertImportListUpdateMessage: 'The lookup list has been saved.',\n        pageTitle: 'Lookup Lists',\n        edit: {\n          template: {\n            addTitle: 'Add Value',\n            editTitle: 'Edit Value',\n            updateButtonTextAdd: 'Add',\n            updateButtonTextUpdate: 'Update',\n            labelTitle: 'Value'\n          }\n        },\n        anesthesiaTypes: 'Anesthesia Types',\n        anesthesiologists: 'Anesthesiologists',\n        billingCategories: 'Billing Categories',\n        clinicList: 'Clinic Locations',\n        countryList: 'Countries',\n        diagnosisList: 'Diagnoses',\n        cptCodeList: 'CPT Codes',\n        expenseAccountList: 'Expense Accounts',\n        aisleLocationList: 'Inventory Aisle Locations',\n        warehouseList: 'Inventory Locations',\n        inventoryTypes: 'Inventory Types',\n        imagingPricingTypes: 'Imaging Pricing Types',\n        labPricingTypes: 'Lab Pricing Types',\n        patientStatusList: 'Patient Status List',\n        physicianList: 'Physicians',\n        procedureList: 'Procedures',\n        procedureLocations: 'Procedures Locations',\n        procedurePricingTypes: 'Procedure Pricing Types',\n        radiologists: 'Radiologists',\n        unitTypes: 'Unit Types',\n        vendorList: 'Vendor',\n        visitLocationList: 'Visit Locations',\n        visitTypes: 'Visit Types',\n        wardPricingTypes: 'Ward Pricing Types'\n      },\n      roles: {\n        capability: {\n          admin: 'Administration',\n          loadDb: 'Load Database',\n          updateConfig: 'Update Configurations',\n          appointments: 'Appointments',\n          addAppointment: 'Add Appointment',\n          billing: 'Billing',\n          addCharge: 'Add Charge',\n          addPricing: 'Add Pricing',\n          addPricingProfile: 'Add Pricing Profile',\n          addInvoice: 'Add Invoice',\n          addPayment: 'Add Payment',\n          deleteInvoice: 'Delete Invoice',\n          deletePricing: 'Delete Pricing',\n          deletePricingProfile: 'Delete Pricing Profile',\n          editInvoice: 'Edit Invoice',\n          invoices: 'Invoices',\n          overrideInvoice: 'Override Invoice',\n          pricing: 'Pricing',\n          patients: 'Patients',\n          addDiagnosis: 'Add Diagnosis',\n          addPhoto: 'Add Photo',\n          addPatient: 'Add Patient',\n          addProcedure: 'Add Procedure',\n          addVisit: 'Add Visit',\n          addVitals: 'Add Vitals',\n          admitPatient: 'Admit Patient',\n          deletePhoto: 'Delete Photo',\n          deletePatient: 'Delete Patient',\n          deleteAppointment: 'Delete Appointment',\n          deleteDiagnosis: 'Delete Diagnosis',\n          deleteProcedure: 'Delete Procedure',\n          deleteSocialwork: 'Delete Social Work',\n          deleteVitals: 'Delete Vitals',\n          deleteVisit: 'Delete Visit',\n          dischargePatient: 'Discharge Patient',\n          patientReports: 'Patient Reports',\n          visits: 'Visits',\n          medication: 'Medication',\n          addMedication: 'Add Medication',\n          deleteMedication: 'Delete Medication',\n          fulfillMedication: 'Fulfill Medication',\n          labs: 'Labs',\n          addLab: 'Add Lab',\n          completeLab: 'Complete Lab',\n          deleteLab: 'Delete Lab',\n          imaging: 'Imaging',\n          addImaging: 'Add Imaging',\n          completeImaging: 'Complete Imaging',\n          deleteImaging: 'Delete Imaging',\n          inventory: 'Inventory',\n          addInventoryRequest: 'Add Inventory Request',\n          addInventoryItem: 'Add Inventory Item',\n          addInventoryPurchase: 'Add Inventory Purchase',\n          adjustInventoryLocation: 'Adjust Inventory Location',\n          deleteInventoryItem: 'Delete Inventory Item',\n          fulfillInventory: 'Fulfill Inventory',\n          userRoles: 'User Roles'\n        },\n        messages: {\n          roleSaved: 'The {{roleName}} role has been saved.'\n        },\n        titles: {\n          roleSaved: 'Role Saved'\n        }\n      },\n      workflow: {\n        admissionDepositLabel: 'Admission deposit required',\n        clinicPrepaymentLabel: 'Clinic prepayment required',\n        followupPrepaymentLabel: 'Followup prepayment required',\n        outpatientLabLabel: 'Outpatient Lab prepayment required',\n        outpatientImagingLabel: 'Outpatient Imaging prepayment required',\n        outpatientMedicationLabel: 'Outpatient Medication prepayment required',\n\n        titles: {\n          optionsSaved: 'Options Saved'\n        },\n        messages: {\n          optionsSaved: 'The workflow options have been saved'\n        },\n\n        newTitle: 'Workflow Options',\n        editTitle: 'Workflow Options',\n        workflowLabel: 'Workflow'\n\n      }\n    },\n    labels: {\n      cptcode: 'CPT Code',\n      loading: 'Loading',\n      name: 'Name',\n      note: 'Note',\n      patient: 'Patient',\n      prescriber: 'Prescriber',\n      quantity: 'Quantity',\n      requestedOn: 'Requested On',\n      date: 'Date',\n      dateOfBirth: 'Date of Birth',\n      dateOfBirthShort: 'DoB',\n      dateRequested: 'Date Requested',\n      dateCompleted: 'Date Completed',\n      description: 'Description',\n      requestedBy: 'Requested By',\n      fulfill: 'Fulfill',\n      fulfillRequest: 'Fulfill Request',\n      fulfillRequestNow: 'Fulfill Request Now',\n      actions: 'Actions',\n      action: 'Action',\n      notes: 'Notes',\n      edit: 'Edit',\n      imageOrders: 'Image Orders',\n      labOrders: 'Lab Orders',\n      patientHistory: 'Patient History',\n      imagingType: 'Imaging Type',\n      result: 'Result',\n      results: 'Results',\n      visit: 'Visit',\n      requests: 'Requests',\n      completed: 'Completed',\n      id: 'Id',\n      on: 'on',\n      type: 'Type',\n      sex: 'Sex',\n      age: 'Age',\n      search: 'Search',\n      username: 'Username',\n      email: 'Email',\n      role: 'Role',\n      'delete': 'Delete',\n      userCanAddNewValue: 'User Can Add New Values',\n      value: 'Value',\n      lookupType: 'Lookup Type',\n      importFile: 'Import File',\n      fileLoadSuccessful: 'File To Load Successful',\n      fileToLoad: 'File Load',\n      fileName: 'File Name',\n      startTime: 'Start Time',\n      startDate: 'Start Date',\n      endTime: 'End Time',\n      endDate: 'End Date',\n      docRead: 'Docs Read',\n      docWritten: 'Docs Written',\n      displayName: 'Display Name',\n      password: 'Password',\n      editUser: 'Edit User',\n      newUser: 'New User',\n      deleteUser: 'Delete User',\n      medication: 'Medication',\n      status: 'Status',\n      addNewOutpatientVisit: '--Add New Outpatient Visit--',\n      prescription: 'Prescription',\n      prescriptionDate: 'Prescription Date',\n      billTo: 'Bill To',\n      pullFrom: 'Pull From',\n      fulfilled: 'Fulfilled',\n      deleteRequest: 'Delete Request',\n      location: 'Location',\n      provider: 'Provider',\n      'with': 'With',\n      allDay: 'All Day',\n      physician: 'Physician',\n      assisting: 'Assisting',\n      anesthesia: 'Anesthesia',\n      procedures: 'Procedures',\n      number: 'Number',\n      billDate: 'Bill Date',\n      balanceDue: 'Balance Due',\n      amount: 'Amount',\n      datePaid: 'Date Paid',\n      creditTo: 'Credit To',\n      invoiceId: 'Invoice ID',\n      lineItems: 'Line Items',\n      discount: 'Discount',\n      excess: 'Excess',\n      price: 'Price',\n      total: 'Total',\n      expenseTo: 'Expense To',\n      grandTotal: 'Grand Total',\n      remarks: 'Remarks',\n      payments: 'Payments',\n      category: 'Category',\n      department: 'Department',\n      address: 'Address',\n      country: 'Country'\n    },\n    messages: {\n      noItemsFound: 'No items found.',\n      noHistoryAvailable: 'No history available.',\n      createNewRecord: 'Create a new record?',\n      createNewUser: 'Create a new user?',\n      noUsersFound: 'No users found.',\n      areYouSureDelete: 'Are you sure you wish to delete the user {{user}}?',\n      userHasBeenSaved: 'The user has been saved.',\n      userSaved: 'User Saved',\n      onBehalfOf: 'on behalf of',\n      newPatientHasToBeCreated: 'A new patient needs to be created...Please wait..',\n      noNotesAvailable: 'No additional clinical notes are available for this visit.',\n      sorry: 'Sorry, something went wrong...',\n      forAuthorizedPersons: 'This report is for authorized persons only.'\n    },\n    alerts: {\n      pleaseWait: 'Please Wait'\n    },\n    headings: {\n      chargedItems: 'Charged Items'\n    },\n    buttons: {\n      addItem: 'Add Item',\n      complete: 'Complete',\n      cancel: 'Cancel',\n      close: 'Close',\n      returnButton: 'Return',\n      barcode: 'Barcode',\n      add: 'Add',\n      update: 'Update',\n      ok: 'Ok',\n      fulfill: 'Fulfill',\n      remove: 'Remove',\n      'delete': 'Delete',\n      newUser: 'New User',\n      addValue: 'Add Value',\n      newNote: 'New Note',\n      'import': 'Import',\n      loadFile: 'Load File',\n      newRequest: 'New Request',\n      allRequests: 'All Requests',\n      dispense: 'Dispense',\n      newItem: '+ new item',\n      newRequestPlus: '+ new request',\n      addVisit: 'Add Visit',\n      search: 'Search',\n      edit: 'Edit',\n      addLineItem: 'Add Line Item'\n    },\n    login: {\n      messages: {\n        signIn: 'please sign in',\n        error: 'Username or password is incorrect.'\n      },\n      labels: {\n        password: 'Password',\n        username: 'Username',\n        signIn: 'Sign in'\n      }\n    },\n    loading: {\n      progressBar: {\n        progress: '{{progressBarValue}}% Complete'\n      },\n      messages: {\n        0: 'The top butterfly flight speed is 12 miles per hour. Some moths can fly 25 miles per hour!',\n        1: 'Owls are the only birds that can see the color blue.',\n        2: 'Cats have over 100 vocal sounds; dogs only have 10.',\n        3: 'Humans use a total of 72 different muscles in speech.',\n        4: 'More than 1,000 different languages are spoken on the continent of Africa.',\n        5: 'An erythrophobe is someone who blushes easily.',\n        6: 'The most common phobia in the world is odynophobia which is the fear of pain.',\n        7: 'Your body uses 300 muscles to balance itself when you are standing still.',\n        8: 'Certain frogs can be frozen solid then thawed, and continue living.',\n        9: 'Our eyes are always the same size from birth, but our nose and ears never stop growing.',\n        10: 'Your tongue is the only muscle in your body that is attached at only one end.',\n        11: 'Camels have three eyelids to protect themselves from blowing sand.'\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Cost Per Unit:',\n        delivered: 'Delievered To:',\n        location: 'Location Adjusted:',\n        prescription: 'Prescription For:',\n        pulled: 'Pulled From:',\n        quantity: 'Quantity at Completion:',\n        reason: 'Reason:',\n        returned: 'Returned from Patient:',\n        transferredFrom: 'Transferred From:',\n        transferredTo: 'Transferred To:'\n      },\n      labels: {\n        action: 'Action',\n        add: 'Add',\n        adjust: 'Adjust',\n        adjustmentDate: 'Adjustment Date',\n        adjustmentFor: 'Adjustment For',\n        adjustmentType: 'Adjustment Type',\n        aisle: 'Aisle',\n        aisleLocation: 'Aisle Location',\n        allInventory: 'All Inventory',\n        billTo: 'Bill To',\n        consumePurchases: 'Consume Purchases',\n        consumptionRate: 'Consumption Rate',\n        cost: 'Cost',\n        costPerUnit: 'Cost per Unit',\n        crossReference: 'Cross Reference',\n        currentQuantity: 'Current Quantity',\n        dateCompleted: 'Date Completed',\n        dateEffective: 'Effective Date',\n        dateEnd: 'End Date',\n        dateStart: 'Start Date',\n        dateReceived: 'Date Received',\n        dateTransferred: 'Date Transferred',\n        daysLeft: 'Days Left',\n        deliveryAisle: 'Delivery Aisle',\n        deliveryLocation: 'Delivery Location',\n        distributionUnit: 'Distribution Unit',\n        deleteItem: 'Delete Item',\n        details: 'Details',\n        editItem: 'Edit Item',\n        expense: 'Expense To',\n        expirationDate: 'Expiration Date',\n        fulfillRequest: 'Fulfill Request',\n        fulfillRequestNow: 'Fulfill Request Now',\n        gift: 'Gift in Kind',\n        giftUsage: 'Gift in Kind Usage',\n        giftInKindNo: 'N',\n        giftInKindYes: 'Y',\n        inventoryConsumed: 'Inventory Consumed',\n        inventoryItem: 'Inventory Item',\n        inventoryObsolence: 'Inventory Obsolence',\n        invoiceItems: 'Invoice Items',\n        invoiceLineItem: 'Invoice Line Item',\n        invoiceNumber: 'Invoice Number',\n        item: 'Item',\n        items: 'Items',\n        itemNumber: 'Item Number',\n        location: 'Location',\n        locations: 'Locations',\n        name: 'Name',\n        markAsConsumed: 'Mark as Consumed',\n        newItem: 'New Item',\n        allItems: 'All Items',\n        originalQuantity: 'Original Quantity',\n        print: 'Print',\n        printBarcode: 'Print Barcode',\n        printer: 'Printer',\n        pullFrom: 'Pull From',\n        purchases: 'Purchases',\n        purchaseCost: 'Purchase Cost',\n        purchaseInfo: 'Purchase Information',\n        quantity: 'Quantity ({{unit}})',\n        quantityAvailable: 'Quantity Available',\n        quantityOnHand: 'Quantity on Hand',\n        quantityRequested: 'Quantity Requested',\n        rank: 'Rank',\n        reason: 'Reason',\n        remove: 'Remove',\n        reorderPoint: 'Reorder Point',\n        requestedItems: 'Requested Items',\n        salePricePerUnit: 'Sale Price per Unit',\n        save: 'Save',\n        serialNumber: 'Serial/Lot Number',\n        total: 'Total',\n        totalCost: 'Total Cost',\n        totalReceived: 'Total Received: {{total}}',\n        transaction: 'Transaction',\n        transactions: 'Transactions',\n        transfer: 'Transfer',\n        transferFrom: 'Transfer From',\n        transferTo: 'Transfer To Location',\n        transferToAisle: 'Transfer to Aisle Location',\n        unit: 'Unit',\n        unitCost: 'Unit Cost',\n        vendor: 'Vendor',\n        vendorItemNumber: 'Vendor Item Number',\n        xref: 'XRef'\n      },\n      messages: {\n        adjust: 'Please adjust the quantities on the appropriate location(s) to account for the difference of {{difference}}.',\n        createRequest: 'Create a new request?',\n        'delete': 'Are you sure you wish to delete {{name}}?',\n        itemNotFound: 'The inventory item <strong>{{item}}</strong> could not be found.<br>If you would like to create a new inventory item, fill in the information below.<br>Otherwise, press the Cancel button to return.',\n        loading: 'Loading transactions ...',\n        purchaseSaved: 'The inventory purchases have been successfully saved.',\n        noRequests: 'No requests found.',\n        noItems: 'No items found.',\n        quantity: 'The total quantity of <strong>({{quantity}})</strong> does not match the total quantity in the locations <strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Are you sure you want to remove this item from this invoice?',\n        removeItemRequest: 'Are you sure you want to remove this item from this request?',\n        requestFulfilled: 'The inventory request has been fulfilled.',\n        requestUpdated: 'The inventory request has been updated.',\n        warning: 'Please fill in required fields (marked with *) and correct the errors before adding.'\n      },\n      reports: {\n        rows: {\n          adjustments: 'Adjustments',\n          adjustmentsTotal: 'Total Adjustments',\n          balanceBegin: 'Beginning Balance',\n          balanceEnd: 'Ending Balance',\n          category: 'Category',\n          consumed: 'Consumed',\n          consumedGik: 'GiK Consumed',\n          consumedGikTotal: 'Total GiK Consumed',\n          consumedPuchases: 'Purchases Consumed',\n          consumedPurchasesTotal: 'Total Purchases Consumed',\n          consumedTotal: 'Total Consumed',\n          errInFinSum: 'Error in _generateFinancialSummaryReport: ',\n          errInFindPur: 'Error in _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Error in _findInventoryItemsByRequest: ',\n          expensesFor: 'Expenses For: ',\n          noAccount: '(No Account)',\n          subtotal: 'Subtotal: ',\n          subtotalFor: 'Subtotal for {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total for {{var}}: ',\n          totalPurchases: 'Total Purchases',\n          transfer1: '{{quantity}} from {{location}}',\n          trasnfer2: 'From: {{source}} To: {{target}}'\n        },\n        adjustment: 'Detailed Adjustment',\n        daysSupply: 'Days Supply Left In Stock',\n        expenseDetail: 'Detailed Expenses',\n        expenseSum: 'Summary Expenses',\n        expiration: 'Expiration Date',\n        'export': 'Export Report',\n        fields: 'Fields to Include',\n        finance: 'Finance Summary',\n        generate: 'Generate Report',\n        invLocation: 'Inventory By Location',\n        invValuation: 'Inventory Valuation',\n        purchaseDetail: 'Detailed Purchase',\n        purchaseSum: 'Summary Purchase',\n        reportType: 'Report Type',\n        stockTransferDetail: 'Detailed Stock Transfer',\n        stockTransferSum: 'Summary Stock Transfer',\n        stockUsageDetail: 'Detailed Stock Usage',\n        stockUsageSum: 'Summary Stock Usage'\n      },\n      titles: {\n        addPurchase: 'Add Purchase',\n        addRequest: 'New Request',\n        adjustment: 'Adjustment',\n        editPurchase: 'Edit Purchase',\n        editRequest: 'Edit Request',\n        inventoryItem: 'New Inventory Item',\n        inventoryReport: 'Inventory Report',\n        purchaseSaved: 'Inventory Purchases Saved',\n        quickAddTitle: 'New Inventory Item',\n        removeItem: 'Remove Item',\n        requestFulfilled: 'Request Fulfilled',\n        requestUpdated: 'Request Updated',\n        transfer: 'Transfer Items',\n        warning: 'Warning!!!!!'\n      }\n    },\n    imaging: {\n      pageTitle: 'Imaging Requests',\n      sectionTitle: 'Imaging',\n      buttons: {\n        newButton: '+ new imaging'\n      },\n      labels: {\n        radiologist: 'Radiologist',\n        addNewVisit: '--Add New Visit--'\n      },\n      messages: {\n        'delete': 'Are you sure you wish to delete this imaging request?',\n        noCompleted: 'No completed items found.'\n      },\n      titles: {\n        completedImaging: 'Completed Imaging',\n        editTitle: 'Edit Imaging Request',\n        newTitle: 'New Imaging Request'\n      },\n      alerts: {\n        completedTitle: 'Imaging Request Completed',\n        completedMessage: 'The imaging request has been completed.',\n        savedTitle: 'Imaging Request Saved',\n        savedMessage: 'The imaging request has been saved.'\n      }\n    },\n    medication: {\n      pageTitle: 'Medication Requests',\n      sectionTitle: 'Medication',\n      returnMedication: 'Return Medication',\n      buttons: {\n        dispenseMedication: 'dispense medication',\n        newButton: '+ new request',\n        returnMedication: 'return medication'\n      },\n      titles: {\n        completedMedication: 'Completed Medication',\n        editMedicationRequest: 'Edit Medication Request',\n        newMedicationRequest: 'New Medication Request'\n      },\n      messages: {\n        createNew: 'Create a new medication request?',\n        confirmDeletion: 'Are you sure you wish to delete this medication request?'\n      },\n      labels: {\n        refills: 'Refills',\n        quantityRequested: 'Quantity Requested',\n        quantityDispensed: 'Quantity Dispensed',\n        quantityDistributed: 'Quantity Distributed',\n        quantityToReturn: 'Quantity To Return',\n        returnLocation: 'Return Location',\n        returnAisle: 'Return Aisle',\n        returnReason: 'Return Reason/Notes',\n        adjustmentDate: 'Adjustment Date',\n        creditToAccount: 'Credit To Account'\n      },\n      alerts: {\n        returnedTitle: 'Medication Returned',\n        returnedMessage: 'The medication has been marked as returned.',\n        savedTitle: 'Medication Request Saved',\n        savedMessage: 'The medication record has been saved.',\n        fulfilledTitle: 'Medication Request Fulfilled'\n      }\n    },\n    appointments: {\n      currentScreenTitle: 'Appointment List',\n      editTitle: 'Edit Appointment',\n      newTitle: 'New Appointment',\n      sectionTitle: 'Appointments',\n      thisWeek: 'Appointments This Week',\n      missed: 'Missed Appointments',\n      searchTitle: 'Search Appointments',\n      todayTitle: 'Today\\'s Appointments',\n      messages: {\n        deleteAppointmentMessage: 'Are you sure you wish to delete this appointment?',\n        endTimeLaterThanStart: 'Please select an end time later than the start time.'\n      },\n      buttons: {\n        newButton: '+ new appointment'\n      },\n      labels: {\n        selectedStartingDate: 'Show Appointments On Or After'\n      }\n    },\n    vitals: {\n      messages: {\n        'delete': 'Are you sure you wish to delete these vitals?'\n      },\n      labels: {\n        dateRecorded: 'Date Recorded',\n        temperature: 'Temperature',\n        weight: 'Weight',\n        height: 'Height',\n        sbp: 'SBP',\n        dbp: 'DBP',\n        heartRate: 'Heart Rate',\n        respiratoryRate: 'Respiratory Rate'\n      }\n    },\n    visits: {\n      titles: {\n        additionalDiagnoses: 'Additional Diagnoses'\n      },\n      messages: {\n        'delete': 'Are you sure you wish to delete this visit?'\n      },\n      buttons: {\n        newProcedure: 'New Procedure',\n        newLab: 'New Lab',\n        newAppointment: 'New Appointment',\n        addDiagnosis: 'Add Diagnosis',\n        newImaging: 'New Imaging',\n        newMedication: 'New Medication',\n        newVitals: 'New Vitals'\n      },\n      labels: {\n        diagnosis: 'Diagnosis',\n        procedure: 'Procedure',\n        procedureDate: 'Procedure Date',\n        authoredBy: 'Authored By',\n        labs: 'Labs',\n        imaging: 'Imaging',\n        visitInformation: 'Visit Information',\n        examiner: 'Examiner',\n        medication: 'Medication',\n        status: 'Visit Status',\n        admittingDiagnosis: 'Admitting Diagnosis',\n        finalDiagnosis: 'Final/Billing Diagnosis',\n        visitDate: 'Visit Date',\n        visitType: 'Visit Type',\n        vitals: 'Vitals'\n      }\n    },\n    labs: {\n      sectionTitle: 'Labs',\n      requestsTitle: 'Lab Requests',\n      editTitle: 'Edit Lab Request',\n      newTitle: 'New Lab Request',\n      deleteTitle: 'Delete Request',\n      completedTitle: 'Completed Labs',\n      labels: {\n        labType: 'Lab Type',\n        addNewVisit: '--Add New Visit--'\n      },\n      messages: {\n        noItemsFound: 'No labs found.',\n        createNewRecord: 'Create a new record?',\n        confirmDeletion: 'Are you sure you wish to delete this lab request?',\n        noCompleted: 'No completed items found.'\n      },\n      buttons: {\n        newButton: '+ new lab'\n      },\n      alerts: {\n        requestCompletedTitle: 'Lab Request Completed',\n        requestCompletedMessage: 'The lab request has been completed.',\n        requestSavedTitle: 'Lab Request Saved',\n        requestSavedMessage: 'The lab request has been saved.'\n      }\n    },\n    patients: {\n      navigation: {\n        photos: 'Photos',\n        general: 'General',\n        history: 'History',\n        appointments: 'Appointments',\n        visits: 'Visits',\n        medication: 'Medication',\n        imaging: 'Imaging',\n        labs: 'Labs',\n        socialWork: 'Social Work'\n      },\n      titles: {\n        admittedPatients: 'Admitted Patients',\n        expenses: 'Expenses',\n        additionalContacts: 'Additional Contacts',\n        familyInformation: 'Family Information',\n        'delete': 'Delete Patient',\n        'new': 'New Patient',\n        edit: 'Edit Patient',\n        patient: 'Patient Report',\n        patientListing: 'Patient Listing',\n        patientReport: 'Patient Report',\n        addPhoto: 'Add Photo',\n        editPhoto: 'Edit Photo',\n        socialWork: 'Expense',\n        familyInfo: 'Family Info',\n        deleteFamilyMember: 'Delete Family Member',\n        deleteExpense: 'Delete Expense',\n        deletePhoto: 'Delete Photo',\n        deleteContact: 'Delete Contact',\n        savedPatient: 'Patient Saved',\n        admissionsDetail: 'Admissions Detail',\n        admissionsSummary: 'Admissions Summary',\n        diagnosticTesting: 'Diagnostic Testing',\n        dischargesDetail: 'Discharges Detail',\n        dischargesSummary: 'Discharges Summary',\n        proceduresDetail: 'Procedures Detail',\n        proceduresSummary: 'Procedures Summary',\n        patientStatus: 'Patient Status',\n        totalPatientDays: 'Total Patient Days',\n        totalPatientDaysDetailed: 'Total Patient Days (Detailed)',\n        visit: 'Visit',\n        deletePatientRecord: 'Delete Patient Record'\n      },\n      messages: {\n        areYouSureDelete: 'Are you sure you want to delete this {{object}}?',\n        deletePatient: 'Are you sure you wish to delete {{firstName}} {{lastName}}?',\n        noPatientsFound: 'No patients found.',\n        savedPatient: 'The patient record for {{displayName}} has been saved.',\n        notFoundQuickAdd: 'The patient <strong>{{patientFullName}}</strong> could not be found.  If you would like to create a new patient, fill in the information below.  Otherwise press the Cancel button to return.',\n        createNewPatient: 'Create a new patient record?',\n        deletingPatient: 'Deleting patient and all associated records'\n      },\n      buttons: {\n        addExpense: 'Add Expense',\n        addContact: 'Add Contact',\n        newLab: 'New Lab',\n        newVisit: 'New Visit',\n        newMedication: 'New Medication',\n        newImaging: 'New Imaging',\n        addFamilyMember: 'Add Family Member',\n        newPhoto: 'New Photo',\n        newAppointment: 'New Appointment',\n        backToPatients: 'Back to Patient List',\n        newPatient: '+ new patient'\n      },\n      headings: {\n        history: 'History',\n        historySince: 'History Since'\n      },\n      labels: {\n        primaryDiagnosis: 'Primary Diagnoses',\n        secondaryDiagnosis: 'Secondary Diagnoses',\n        monthlyCost: 'Monthly Cost',\n        totalMontlyExpense: 'Total Monthly Expenses',\n        patientType: 'Patient Type',\n        admissionDate: 'Admission Date',\n        patientDays: 'Patient Days',\n        dischargeDate: 'Discharge Date',\n        discharge: 'Discharge',\n        admit: 'Admit',\n        relationships: 'Relationships',\n        phone: 'Phone',\n        email: 'Email',\n        firstName: 'First Name',\n        middleName: 'Middle Name',\n        lastName: 'Last Name',\n        sex: 'Sex',\n        dob: 'DOB',\n        dateOfBirth: 'Date Of Birth',\n        placeOfBirth: 'Place Of Birth',\n        sources: 'Sources',\n        costs: 'Costs',\n        civilStatus: 'Civil Status',\n        relationship: 'Relationship To Patient',\n        education: 'Education',\n        occupation: 'Occupation',\n        income: 'Income',\n        insurance: 'Insurance',\n        dateProcessed: 'Date Processed',\n        status: 'Patient Status',\n        externalPatientId: 'External Patient Id',\n        bloodType: 'Blood Type',\n        clinic: 'Clinic Site',\n        referredBy: 'Referred By',\n        referredDate: 'Referred Date',\n        religion: 'Religion',\n        parent: 'Parent/Guardian',\n        contacts: 'Contacts',\n        sexNotEntered: 'Sex Not Entered'\n      },\n      notes: {\n        newNote: 'New Note for',\n        updateNote: 'Updating Note from',\n        onBehalfOfLabel: 'On Behalf Of',\n        onBehalfOfCopy: 'on behalf of',\n        pleaseSelectAVisit: 'Please select a visit'\n      }\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: 'No invoices found',\n        deleteItem: 'Are you sure you wish to delete {{item}}?',\n        noPricingItems: 'No pricing items found.',\n        noPricingProfiles: 'No pricing profiles found.'\n      },\n      buttons: {\n        createInvoice: 'Create an invoice?',\n        addOverride: 'Add Override'\n      },\n      labels: {\n        externalInvoiceNumber: 'External Invoice #',\n        paymentProfile: 'Payment Profile',\n        actualCharges: 'Actual Charges',\n        insurance: 'National Insurance',\n        hmoCom: 'HMO/COM',\n        paymentsDeposits: 'Payments/Deposits',\n        pricingPanelOverrides: 'Pricing profile overrides',\n        pricingProfile: 'Pricing Profile',\n        discountAmount: 'Discount Amount',\n        discountPercentage: 'Discount Percentage'\n      }\n    },\n    print: {\n      invoice: {\n        labels: {\n          patientName: 'NAME OF PATIENT:',\n          patientId: 'PATIENT #:',\n          patientAge: 'AGE:',\n          patientAddress: 'ADDRESS:',\n          dateAdmitted: 'ADMITTED:',\n          dateDischarged: 'DISCHARGE:',\n          dischargeNotes: 'Discharge Notes:',\n          remarks: 'Remarks:',\n          billedBy: 'Billed by:',\n          billedDate: 'Bill Date:',\n          spacer: '__________________________________________'\n        },\n        messages: {\n          whereConducted: 'were deducted during my confinement'\n        },\n        titles: {\n          patientMember: 'Patient-Member',\n          relContact: 'Relationship/Contact no.',\n          patients: 'PATIENT\\'S',\n          billingStatement: 'BILLING STATEMENT'\n        }\n      }\n    },\n    procedures: {\n      titles: {\n        addChargeItem: 'Add Charge Item',\n        deleteChargeItem: 'Delete Charge Item',\n        editChargeItem: 'Edit Charge Item',\n        medicationUsed: 'Medication Used',\n        deleteMedicationUsed: 'Delete Medication Used',\n        addMedicationUsed: 'Add Medication Used',\n        editMedicationUsed: 'Edit Medication Used',\n        edit: 'Edit Procedure',\n        saved: 'Procedure Saved',\n        'new': 'New Procedure'\n      },\n      labels: {\n        medicationUsed: 'Medication Used'\n      },\n      messages: {\n        deleteMedication: 'Are you sure you want to delete this medication?',\n        'delete': 'Are you sure you wish to delete this procedure?',\n        saved: 'The procedure record has been saved.'\n      },\n      buttons: {\n        addMedication: 'Add Medication'\n      }\n    },\n    components: {\n      chargesByTypeTab: {\n        charges: 'charges'\n      },\n      takePhoto: {\n        how: 'How Do You Want To Add A Photo?',\n        takePhoto: 'Take photo',\n        uploadPhoto: 'Upload Photo',\n        uploadFile: 'Upload File',\n        camera: 'Camera',\n        photo: 'photo',\n        preview: 'preview'\n      },\n      quantityConv: {\n        unit: 'Unit',\n        conversion: 'What does 1 {{name}} contain?'\n      },\n      quantityCalc: {\n        result: '{{targetUnit}} total: {{calculated}}'\n      },\n      priceList: {\n        charges: '{{pricingType}} charges'\n      }\n    }\n  };\n});","define('hospitalrun/tests/locales/en/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/en/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/es-CO/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    dashboard: {\n      title: 'Que deseas hacer?'\n    },\n    navigation: {\n      imaging: 'Radiografia',\n      inventory: 'Inventario',\n      patients: 'Pacientes',\n      appointments: 'Citas',\n      medication: 'Recetas medicas',\n      labs: 'Laboratorio',\n      billing: 'Facturas',\n      administration: 'Administracion',\n      subnav: {\n        requests: 'Pedidos',\n        items: 'Items',\n        completed: 'Completado',\n        newRequest: 'New pedido',\n        inventoryReceived: 'Inventario recibido',\n        reports: 'Reportes',\n        patientListing: 'Lista de pacientes',\n        newPatient: 'Nuevo paciente',\n        thisWeek: 'Esta semana',\n        today: 'Hoy',\n        search: 'Buscar',\n        addAppointment: 'Nueva cita',\n        dispense: 'Dispense',\n        returnMedication: 'Devolver medicamento',\n        invoices: 'Facturas',\n        newInvoice: 'Nueva factura',\n        prices: 'Precios',\n        priceProfiles: 'Perfil de precios',\n        lookupLists: 'Lista de busuedas',\n        addressFields: 'Campos de dirección',\n        loadDb: 'Cargar base de datos',\n        users: 'Usuarios',\n        newUser: 'Nuevo usuario',\n        userRoles: 'Roles'\n      },\n      actions: {\n        logout: 'Salir',\n        login: 'Ingresar'\n      },\n      about: 'Información de HospitalRun'\n    },\n    user: {\n      plusNewUser: '+ nuevo usuario',\n      usersPageTile: 'Listado de usuarios'\n    },\n    admin: {\n      addressOptions: 'Opciones de direcciones',\n      lookupLists: 'Lista de busqueda',\n      loadDb: 'Cargar Base de datos',\n      userRoles: 'Roles',\n      users: 'Usuarios',\n      address: {\n        address1Label: 'Texto direccion 1',\n        address2Label: 'Texto direccion 2',\n        address3Label: 'Texto direccion 3',\n        address4Label: 'Texto direccion 4',\n        include1Label: 'Incluir 1',\n        include2Label: 'Incluir 2',\n        include3Label: 'Incluir 3',\n        include4Label: 'Incluir 4',\n        titles: {\n          optionsSaved: 'Opciones guardadas'\n        },\n        messages: {\n          addressSaved: 'las opciones de dirección han sido guardadas'\n        },\n\n        newTitle: 'Opciones de dirección',\n        editTitle: 'Opciones de dirección',\n        addressLabel: 'Direcciones'\n      },\n      loaddb: {\n        progressMessage: 'Por favor espere mientras la base de datos es cargada.',\n        progressTitle: 'Cargando ase de datos',\n        displayAlertTitle: 'Seleccione un archivo para cargar',\n        displayAlertMessage: 'Por favor seleccione un archivo para ser cargado.',\n        errorDisplayAlertTitle: 'Error cargando',\n        errorDisplayAlertMessage: 'La base de datos no fue cargada el error fue: {{error}}',\n        editTitle: 'Cargar bd'\n      },\n      lookup: {\n        deleteValueInventoryTypeMedicationTitle: 'No se puede eliminar el medicamento',\n        deleteValueInventoryTypeMedicationMessage: 'El tipo de inventario de medicamentos no se pueden eliminar porque se necesita para el módulo de medicación.',\n        deleteValueLabPricingTypeProcedureTitle: 'No se puede eliminar el tipo de precio',\n        deleteValueLabPricingTypeProcedureMessage: 'El tipo de precio Procedimiento Lab no se puede eliminar porque es necesaria para el módulo de laboratorios.',\n        deleteValueImagingPricingTypeProcedureTitle: 'No se puede eliminar el tipo de imagen',\n        deleteValueImagingPricingTypeProcedureMessage: 'No se puede eliminar porque es necesario para el modulo de radiografias',\n        deleteValueVisitTypeAdmissionTitle: 'No se puede eliminar admision tipo visita',\n        deleteValueVisitTypeAdmissionMessage: 'Tipo de visita es necesaria para el modulo de admisiones.',\n        deleteValueVisitTypeImagingTitle: 'No se puede eliminar el tipo radiografia',\n        deleteValueVisitTypeImagingMessage: 'No se puede eliminar por que es necesario para el modulo de radiografias.',\n        deleteValueVisitTypeLabTitle: 'No se puede eliminar el tipo laboratorio',\n        deleteValueVisitTypeLabMessage: 'Es necesario para el modulo de laboratorio.',\n        deleteValueVisitTypePharmacyTitle: 'No se puede eliminar el tipo farmacia',\n        deleteValueVisitTypePharmacyMessage: 'Es requerido por el modulo de recetas.',\n        alertImportListTitle: 'Seleccione un archivo para importar',\n        alertImportListMessage: 'Por favor seleccione un archivo para importar.',\n        alertImportListSaveTitle: 'Lista importada',\n        alertImportListSaveMessage: 'Lista de busqueda importada.',\n        alertImportListUpdateTitle: 'Lista salvada',\n        alertImportListUpdateMessage: 'La lista de busqueda ha sido salvada.',\n        pageTitle: 'Listas de busqueda',\n        edit: {\n          template: {\n            addTitle: 'Adicionar valor',\n            editTitle: 'Editar valor',\n            updateButtonTextAdd: 'Adicionar',\n            updateButtonTextUpdate: 'Actualizar',\n            labelTitle: 'Valor'\n          }\n        },\n        anesthesiaTypes: 'Tipos de anestesia',\n        anesthesiologists: 'Anestesiologo',\n        billingCategories: 'Categorias de facturacion',\n        clinicList: 'Ubicacion de las clinicas',\n        countryList: 'Paises',\n        diagnosisList: 'Diagnosticos',\n        cptCodeList: 'Codigos CPT',\n        expenseAccountList: 'Cuentas de gastos',\n        aisleLocationList: 'Ubicacion de inventario de pasillo',\n        warehouseList: 'Ubicacciones de inventarios',\n        inventoryTypes: 'Tipos de inventarios',\n        imagingPricingTypes: 'Tipos de precios de radiografias',\n        labPricingTypes: 'Precios de laboratorio',\n        patientStatusList: 'Lista de estado de pacientes',\n        physicianList: 'Medicos',\n        procedureList: 'Procedimientos',\n        procedureLocations: 'Ubicacion de los procedimientos',\n        procedurePricingTypes: 'Tipos de procedimientos y precios',\n        radiologists: 'Radiologo',\n        unitTypes: 'Tipos de unidad',\n        vendorList: 'Proveedor',\n        visitLocationList: 'Lugares de visista',\n        visitTypes: 'Tipos de visita',\n        wardPricingTypes: 'Tipos de las tarifas'\n      },\n      roles: {\n        capability: {\n          admin: 'Administracion',\n          loadDb: 'Cargar base de datos',\n          updateConfig: 'Actualizar configuracion',\n          appointments: 'Citas',\n          addAppointment: 'Adicionar cita',\n          billing: 'Facturacion',\n          addCharge: 'Adicionar cargo (valor)',\n          addPricing: 'Adicionar precio',\n          addPricingProfile: 'Adicionar perfil de precios',\n          addInvoice: 'Adicionar factura',\n          addPayment: 'Adicionar pago',\n          deleteInvoice: 'Eliminar factura',\n          deletePricing: 'Eliminar precio',\n          deletePricingProfile: 'Eliminar perfil de precio',\n          editInvoice: 'Editar factura',\n          invoices: 'Facturas',\n          overrideInvoice: 'Sobreescribir factura',\n          pricing: 'Precio',\n          patients: 'Pacientes',\n          addDiagnosis: 'Adicionar diagnostico',\n          addPhoto: 'Adicionar foto',\n          addPatient: 'Adicionar paciente',\n          addVisit: 'Adicionar visita',\n          addVitals: 'Adicionar partes vitales',\n          admitPatient: 'Admitir paciente',\n          deletePhoto: 'Eliminar foto',\n          deletePatient: 'Eliminar paciente',\n          deleteAppointment: 'Eliminar cita',\n          deleteDiagnosis: 'Eliminar diagnostico',\n          deleteProcedure: 'Eliminar procedimiento',\n          deleteSocialwork: 'Eliminar trabajo social',\n          deleteVitals: 'Eliminar organo vital',\n          deleteVisit: 'Eliminar visita',\n          dischargePatient: 'Descartar paciente',\n          patientReports: 'Reportes por paciente',\n          visits: 'Visitas',\n          medication: 'Medicación',\n          addMedication: 'Adicionar medicación',\n          deleteMedication: 'Eliminar medicación',\n          fulfillMedication: 'Cumplir la medicación',\n          labs: 'Laboratorios',\n          addLab: 'Adicionar laboratorio',\n          completeLab: 'Completar laboratorio',\n          deleteLab: 'Eliminar laboratorio',\n          imaging: 'Radiografia',\n          addImaging: 'Adicionar radiografia',\n          completeImaging: 'Completar radiografia',\n          deleteImaging: 'Eliminar radiografia',\n          inventory: 'Inventario',\n          addInventoryRequest: 'Pedido de inventario',\n          addInventoryItem: 'Adicionar elemento al inventario',\n          addInventoryPurchase: 'Adicionar compra',\n          adjustInventoryLocation: 'Ajustar lugar elemento en el inventario',\n          deleteInventoryItem: 'Eliminar elemento del inventario',\n          deleteInventoryPurchase: 'Eliminar compra del inventario',\n          fulfillInventory: 'Cumplimiento de inventario',\n          userRoles: 'Roles de usuario'\n        },\n        messages: {\n          roleSaved: 'El {{roleName}} rol ha sido salvado.'\n        },\n        titles: {\n          roleSaved: 'Role salvado'\n        }\n      }\n    },\n    labels: {\n      cptcode: 'Codigo CPT',\n      loading: 'Cargando',\n      name: 'Nombre',\n      patient: 'Paciente',\n      quantity: 'Cantidada',\n      requestedOn: 'Pedido On',\n      date: 'Fecha',\n      dateOfBirth: 'Fecha de nacimiento',\n      dateOfBirthShort: 'FDN',\n      dateRequested: 'Fecha de pedido',\n      dateCompleted: 'Fecha completada',\n      description: 'Descripción',\n      requestedBy: 'Pedido por|',\n      fulfill: 'Cumplomiento',\n      fulfillRequest: 'Pedido de cumplimiento',\n      fulfillRequestNow: 'Pedido de cumplimiento ahora',\n      actions: 'Acciones',\n      action: 'Accion',\n      notes: 'Notas',\n      edit: 'Editar',\n      imageOrders: 'Ordenes de radiografias',\n      labOrders: 'Ordenes de laboratorio',\n      patientHistory: 'Historia del paciente',\n      imagingType: 'Tipo de radiografia',\n      result: 'Resultado',\n      results: 'Resultados',\n      visit: 'Visita',\n      requests: 'Pedido',\n      completed: 'Completado',\n      id: 'Id',\n      on: 'on',\n      type: 'Tipo',\n      sex: 'Genero',\n      age: 'Edad',\n      username: 'Nombre de usuario',\n      email: 'Email',\n      role: 'Rol',\n      'delete': 'Eliminar',\n      userCanAddNewValue: 'Los usuarios pueden agregar nuevos valores',\n      value: 'Valor',\n      lookupType: 'Tipo de busqueda',\n      importFile: 'Importar archivo',\n      fileLoadSuccessful: 'Archivo cargado exitosamente',\n      fileToLoad: 'Archivo cargado',\n      startTime: 'Hora de inicio',\n      startDate: 'Fecha de inicio',\n      endTime: 'Hora de finalización',\n      endDate: 'Fecha final',\n      docRead: 'Leer documento',\n      docWritten: 'Documento escrito',\n      displayName: 'Nombre para mostrar',\n      password: 'Contraseña',\n      editUser: 'Editar usuario',\n      newUser: 'Nuevo usuario',\n      deleteUser: 'Eliminar usuario',\n      medication: 'Medicación',\n      status: 'Estado',\n      addNewOutpatientVisit: '--Nueva visita a paciente externo--',\n      prescription: 'Receta medica',\n      prescriptionDate: 'Fecha de la receta medica',\n      billTo: 'Facturar a',\n      pullFrom: 'Traer de',\n      fulfilled: 'Cumplido',\n      deleteRequest: 'Eliminar pedido',\n      location: 'Ubicacion',\n      provider: 'Proveedor',\n      'with': 'con',\n      allDay: 'Todo el dia',\n      physician: 'Médico',\n      assisting: 'Asistencia',\n      anesthesia: 'Anestesia',\n      procedures: 'Procedimiento'\n    },\n    messages: {\n      noItemsFound: 'Elementos no encontrados.',\n      noHistoryAvailable: 'Historia no disponible.',\n      createNewRecord: 'Crear un nuevo registro?',\n      createNewUser: 'Crear un nuevo usuario?',\n      noUsersFound: 'Ningun usuario encontrado.',\n      areYouSureDelete: 'Estas seguro de eliminar este usuario {{user}}?',\n      userHasBeenSaved: 'El usuario ha sido salvado.',\n      userSaved: 'Usuario salvado',\n      onBehalfOf: 'a nombre de',\n      newPatientHasToBeCreated: 'Un nuevo paciente debe ser creado...Por favor espere..',\n      noNotesAvailable: 'No hay notas clínicas adicionales están disponibles para esta visita.',\n      sorry: 'Lo sentimos, un error ha ocurrido...',\n      forAuthorizedPersons: 'Este informe es sólo para personas autorizadas.'\n    },\n    alerts: {\n      pleaseWait: 'Por favor espere'\n    },\n    buttons: {\n      complete: 'Completado',\n      cancel: 'Cancelar',\n      close: 'Cerrar',\n      returnButton: 'Regresar',\n      barcode: 'Codigo de barras',\n      add: 'Adicionar',\n      update: 'Actualizar',\n      ok: 'Ok',\n      fulfill: 'Cumplimiento',\n      remove: 'Remover',\n      'delete': 'Eliminar',\n      newUser: 'Nuevo usuario',\n      addValue: 'Adicionar valor',\n      newNote: 'Nueva nota',\n      'import': 'Importar',\n      loadFile: 'Cargar archivo',\n      newRequest: 'Nueva solicitud',\n      allRequests: 'Todas las solicitudes',\n      dispense: 'Repartir',\n      newItem: '+ nuevo elemento',\n      newRequestPlus: '+ nuevo pedido',\n      addVisit: 'Adicionar visita',\n      search: 'Buscar'\n    },\n    login: {\n      messages: {\n        signIn: 'por favor ingrese',\n        error: 'Nombre de usuario o clave incorrectos.'\n      },\n      labels: {\n        password: 'Clave',\n        username: 'Nombre de usuario',\n        signIn: 'Ingresar'\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Costo por unidad:',\n        delivered: 'Enviado A:',\n        location: 'Cambio de ubicación:',\n        prescription: 'Recetado por:',\n        pulled: 'Pulled From:',\n        quantity: 'Quantity at Completion:',\n        reason: 'Razón:',\n        returned: 'Regresado al paciente:',\n        transferredFrom: 'Transferido a:',\n        transferredTo: 'Transferido a:'\n      },\n      labels: {\n        action: 'Acción',\n        add: 'Adicionar',\n        adjust: 'Adjustar',\n        adjustmentDate: 'Fecha de ajuste',\n        adjustmentFor: 'Ajustado para',\n        adjustmentType: 'Tipo de ajuste',\n        aisle: 'Pasillo',\n        aisleLocation: 'Ubicación pasillo',\n        allInventory: 'Todo el inventario',\n        billTo: 'Facturao a',\n        consumePurchases: 'Consume Purchases',\n        consumptionRate: 'Tasa de consumo',\n        cost: 'Costo',\n        costPerUnit: 'Costo por Unidad',\n        crossReference: 'Referencia cruzada',\n        currentQuantity: 'Cantidad actual',\n        dateCompleted: 'Fecha completado',\n        dateEffective: 'Gecha efectiva',\n        dateEnd: 'Fecha final',\n        dateStart: 'Fecha inicial',\n        dateReceived: 'Fecha recibido',\n        dateTransferred: 'Fecha transferencia',\n        daysLeft: 'Dias restantes',\n        deliveryAisle: 'Enviado a pasillo',\n        deliveryLocation: 'Ubicación del envio',\n        distributionUnit: 'Unidad de distribución',\n        deleteItem: 'Eliminar elemento',\n        details: 'Detalles',\n        editItem: 'Editar elemento',\n        expense: 'Gastos a',\n        expirationDate: 'Fecha de vencimiento',\n        fulfillRequest: 'Pedido de cumplimiento',\n        fulfillRequestNow: 'Pedido de incumplimiento para hoy',\n        gift: 'Regalo en especie',\n        giftUsage: 'Uso del regalo en especie',\n        giftInKindNo: 'N',\n        giftInKindYes: 'Y',\n        inventoryConsumed: 'Inventario consumido',\n        inventoryItem: 'Elemento del inventario',\n        inventoryObsolence: 'Obsolescencia de inventario',\n        invoiceItems: 'Articulos de factura',\n        invoiceLineItem: 'Elemento de la factura linea',\n        invoiceNumber: 'Factura numero',\n        item: 'Elemento',\n        items: 'Elementos',\n        itemNumber: 'Numero de elemento',\n        location: 'Ubicación',\n        locations: 'Ubicaciones',\n        name: 'Nombre',\n        markAsConsumed: 'Marcar como consumido',\n        newItem: 'Nuevo elemento',\n        originalQuantity: 'Cantidad original',\n        print: 'Imprimir',\n        printBarcode: 'Imprimir codigo de  barras',\n        printer: 'Impresora',\n        pullFrom: 'Traido de',\n        purchases: 'Compras',\n        purchaseCost: 'Costo de compra',\n        purchaseInfo: 'Informacion de la compra',\n        quantity: 'Cantidad ({{unit}})',\n        quantityAvailable: 'Cantidad disponible',\n        quantityOnHand: 'Cantidad a la mano',\n        quantityRequested: 'Cantidad pedida',\n        rank: 'Ranking',\n        reason: 'Razón',\n        remove: 'Remover',\n        reorderPoint: 'Reordenar punto',\n        requestedItems: 'Elementos solicitados',\n        salePricePerUnit: 'Costo de venta por unidad',\n        save: 'Guardar',\n        serialNumber: 'Serial/Numero de lote',\n        total: 'Total',\n        totalCost: 'Costo total',\n        totalReceived: 'Total Recivido: {{total}}',\n        transaction: 'Transaccion',\n        transactions: 'Transacciones',\n        transfer: 'Translados',\n        transferFrom: 'Translado desde',\n        transferTo: 'Translado a ubicación',\n        transferToAisle: 'Translado a pasillo',\n        unit: 'Unidad',\n        unitCost: 'Unidad Costo',\n        vendor: 'Proveedor',\n        vendorItemNumber: 'Proveedor numero de elemento',\n        xref: 'XRef'\n      },\n      messages: {\n        adjust: 'Por favor ajust las cantidades en la ubicación adecuada(s) la diferencia de la cuenta es {{difference}}.',\n        createRequest: 'Crear un nuevo pedido?',\n        'delete': 'Estas seguro de eliminar {{name}}?',\n        itemNotFound: 'El elemento del inventario <strong>{{item}}</strong> no se pudo encontrar.<br>Si desea crear un nuevo elemento, Ingrese la información abajo.<br>De lo contrario opria cancelar para volver.',\n        loading: 'Cargando transacciones ...',\n        purchaseSaved: 'La compra de inventario ha sido salvada.',\n        noRequests: 'No se encontraron pedidos.',\n        noItems: 'No se encontraron elementos.',\n        quantity: 'La cantidad total <strong>({{quantity}})</strong> no encaja con la cantidad total en las ubicaciones <strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Esta seguro de eliminar este elemento de la factura?',\n        removeItemRequest: 'Seguro que quiere eliminar este elemento del pedido?',\n        requestFulfilled: 'El pedido de inventario ha sido procesado.',\n        requestUpdated: 'El pedido de inventario ha sido actualizado.',\n        warning: 'Valide los campos requeridos (marcados con *) corrija los errores antes de adicionar.'\n      },\n      reports: {\n        rows: {\n          adjustments: 'Ajustes',\n          adjustmentsTotal: 'Ajustes totales',\n          balanceBegin: 'Balance inicial',\n          balanceEnd: 'Balance Final',\n          category: 'Categoria',\n          consumed: 'Consumado',\n          consumedGik: 'GiK Consumido',\n          consumedGikTotal: 'Total GiK Consumido',\n          consumedPuchases: 'Total de lo comprado consumido',\n          consumedPurchasesTotal: 'Total de lo comprado consumido',\n          consumedTotal: 'Total consumido',\n          errInFinSum: 'Error en _generateFinancialSummaryReport: ',\n          errInFindPur: 'Error en _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Error en _findInventoryItemsByRequest: ',\n          expensesFor: 'Gatos para: ',\n          noAccount: '(No Cuenta)',\n          subtotal: 'Subtotal: ',\n          subtotalFor: 'Subtotal para {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total para {{var}}: ',\n          totalPurchases: 'Compras Totales',\n          transfer1: '{{quantity}} de {{location}}',\n          trasnfer2: 'De: {{source}} A: {{target}}'\n        },\n        adjustment: 'Ajuste detallado',\n        daysSupply: 'Dias de inventario restante',\n        expenseDetail: 'Gastos detallados',\n        expenseSum: 'Resumen de gastos',\n        expiration: 'Fecha de expiracion',\n        'export': 'Exportar reporte',\n        fields: 'Campos a incluir',\n        finance: 'Resumen de finanzas',\n        generate: 'Generar reporte',\n        invLocation: 'Inventario por ubicacion',\n        invValuation: 'Inventario por valoracion',\n        purchaseDetail: 'Compras detalladas',\n        purchaseSum: 'Resumen de compras',\n        reportType: 'Tipo de reporte',\n        stockTransferDetail: 'Detalle de traslado de stock',\n        stockTransferSum: 'Resumen traslado de stock',\n        stockUsageDetail: 'Detalle de uso de stock',\n        stockUsageSum: 'Resumen uso de stock'\n      },\n      titles: {\n        addPurchase: 'Adicionar compra',\n        addRequest: 'Nuevo pedido',\n        adjustment: 'Ajuste',\n        editPurchase: 'Editar compra',\n        editRequest: 'Editar pedido',\n        inventoryItem: 'Nuevo elemento de inventario',\n        inventoryReport: 'Reporte de inventario',\n        purchaseSaved: 'Compras de inventario guardadas',\n        quickAddTitle: 'Nuevo elemento de inventario',\n        removeItem: 'Remover elemento',\n        requestFulfilled: 'Pedido cumplido',\n        requestUpdated: 'Pedido actualizado',\n        transfer: 'Trasladar elementos',\n        warning: 'Peligro!!!!!'\n      }\n    },\n    imaging: {\n      pageTitle: 'Pedido de radriografia',\n      sectionTitle: 'Radiografias',\n      buttons: {\n        newButton: '+ new radiografia'\n      },\n      labels: {\n        radiologist: 'Radiologo',\n        addNewVisit: '--Adicionar nueva visita--'\n      },\n      messages: {\n        noCompleted: 'No de items encontrados.'\n      },\n      titles: {\n        completedImaging: 'Radiografia completada',\n        editTitle: 'Pedido de edicion de radiografia',\n        newTitle: 'Nuevo pedido de radiografia'\n      },\n      alerts: {\n        completedTitle: 'Pedido de radiografia completado',\n        completedMessage: 'El pedido de radiografia ha sido completado.',\n        savedTitle: 'Pedido de radiografia salvado',\n        savedMessage: 'El pedido de radiografia ha sido guardado.'\n      }\n    },\n    medication: {\n      pageTitle: 'Pedido de medicación',\n      sectionTitle: 'Medication',\n      returnMedication: 'Retorno de medicación',\n      buttons: {\n        dispenseMedication: 'dispensar medicación',\n        newButton: '+ nuevo pedido',\n        returnMedication: 'debolver medicacion'\n      },\n      titles: {\n        completedMedication: 'Medicacion completada',\n        editMedicationRequest: 'Editar pedido de medicacion',\n        newMedicationRequest: 'Nuevo pedido de medicacion'\n      },\n      messages: {\n        createNew: 'Crear un nuevo pedido de medicacion?',\n        confirmDeletion: 'Estas seguro de eliminar este pedido de medicación?'\n      },\n      labels: {\n        refills: 'Recargas',\n        quantityRequested: 'Cantidad solicitada',\n        quantityDispensed: 'Cantidad dispensada',\n        quantityDistributed: 'Cantidad distribuida',\n        quantityToReturn: 'Cantidad a devolver',\n        returnLocation: 'Retornar a ubicación',\n        returnAisle: 'Devolve a pasillo',\n        returnReason: 'Razon por la que se devuelve/Nota',\n        adjustmentDate: 'Fecha de ajuste',\n        creditToAccount: 'Credito a cuenta'\n      },\n      alerts: {\n        returnedTitle: 'Medicacion devuelta',\n        returnedMessage: 'La medicacion ha sido marcada para devolver.',\n        savedTitle: 'Pedido de medicacion guardado',\n        savedMessage: 'La elemento de medicación ha sido guardado.',\n        fulfilledTitle: 'Pedido de medicación cumplido'\n      }\n    },\n    appointments: {\n      currentScreenTitle: 'Listado de citas',\n      editTitle: 'Editar cita',\n      newTitle: 'Nueva cita',\n      sectionTitle: 'Citas',\n      thisWeek: 'Citas esta semana',\n      missed: 'Citas perdidas',\n      searchTitle: 'Buscar citas',\n      todayTitle: 'Citas para hoy',\n      messages: {\n        deleteAppointmentMessage: 'Esta seguro de eliminar esta cita?',\n        endTimeLaterThanStart: 'Seleccione una hora de finalizacion despues de la de inicio.'\n      },\n      buttons: {\n        newButton: '+ nueva cita'\n      }\n    },\n    visits: {\n      edit: {\n        buttons: {\n          newAppointment: 'Nuevas citas',\n          addDiagnosis: 'Adicionar diagnostico',\n          newProcedure: 'Nuevo procedimiento',\n          newLab: 'New laboratorio',\n          newMedication: 'Nueva mediicación',\n          newImaging: 'Nueva radiografia'\n        },\n        labels: {\n          diagnosis: 'Diagnostico',\n          procedure: 'Procedimiento',\n          authoredBy: 'Escrito por',\n          labs: 'Laboratorios',\n          imaging: 'Radiografias',\n          visitInformation: 'Informacion de visita'\n        }\n      }\n    },\n    labs: {\n      sectionTitle: 'Laboratorios',\n      requestsTitle: 'Pedido de laboratorio',\n      editTitle: 'Editar pedido de laboratorio',\n      newTitle: 'Nuevo pedido de laboratorio',\n      deleteTitle: 'Eliminar pedido',\n      completedTitle: 'Completar laboratorio',\n      labels: {\n        labType: 'Tipo de laboratorio',\n        addNewVisit: '--Adicionar nueva visita--'\n      },\n      messages: {\n        noItemsFound: 'No boratorios encontrados.',\n        createNewRecord: 'Crear un registro?',\n        confirmDeletion: 'Esta seguro de eliminar esta solicitud de laboratorio?',\n        noCompleted: 'No elementos completados encontrados.'\n      },\n      buttons: {\n        newButton: '+ nuevo laboratorio'\n      },\n      alerts: {\n        requestCompletedTitle: 'Pedido de laboratorio competado',\n        requestCompletedMessage: 'El pedido de laboratorio ha sido completado.',\n        requestSavedTitle: 'Silicitud de laboratorio guardado',\n        requestSavedMessage: 'El pedido de laboratorio ha sido guardado.'\n      }\n    },\n    common: {\n      actions: 'Acciones'\n    },\n    patients: {\n      notes: {\n        onBehalfOfLabel: 'A nombre de',\n        onBehalfOfCopy: 'a nombre de',\n        pleaseSelectAVisit: 'Por favor seleccione una visista',\n        noteLabel: 'Nota'\n      }\n    }\n  };\n});","define('hospitalrun/tests/locales/es-CO/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/es-CO/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/es-CO/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/es/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    dashboard: {\n      title: 'Que deseas hacer?'\n    },\n    navigation: {\n      imaging: 'Radiografia',\n      inventory: 'Inventario',\n      patients: 'Pacientes',\n      appointments: 'Citas',\n      medication: 'Recetas medicas',\n      labs: 'Laboratorio',\n      billing: 'Facturas',\n      administration: 'Administracion',\n      subnav: {\n        requests: 'Pedidos',\n        items: 'Items',\n        completed: 'Completado',\n        newRequest: 'New pedido',\n        inventoryReceived: 'Inventario recibido',\n        reports: 'Reportes',\n        patientListing: 'Lista de pacientes',\n        newPatient: 'Nuevo paciente',\n        thisWeek: 'Esta semana',\n        today: 'Hoy',\n        search: 'Buscar',\n        addAppointment: 'Nueva cita',\n        dispense: 'Dispense',\n        returnMedication: 'Devolver medicamento',\n        invoices: 'Facturas',\n        newInvoice: 'Nueva factura',\n        prices: 'Precios',\n        priceProfiles: 'Perfil de precios',\n        lookupLists: 'Lista de busuedas',\n        addressFields: 'Campos de dirección',\n        loadDb: 'Cargar base de datos',\n        users: 'Usuarios',\n        newUser: 'Nuevo usuario',\n        userRoles: 'Roles'\n      },\n      actions: {\n        logout: 'Salir',\n        login: 'Ingresar'\n      },\n      about: 'Información de HospitalRun'\n    },\n    user: {\n      plusNewUser: '+ nuevo usuario',\n      usersPageTile: 'Listado de usuarios'\n    },\n    admin: {\n      addressOptions: 'Opciones de direcciones',\n      lookupLists: 'Lista de busqueda',\n      loadDb: 'Cargar Base de datos',\n      userRoles: 'Roles',\n      users: 'Usuarios',\n      address: {\n        address1Label: 'Texto direccion 1',\n        address2Label: 'Texto direccion 2',\n        address3Label: 'Texto direccion 3',\n        address4Label: 'Texto direccion 4',\n        include1Label: 'Incluir 1',\n        include2Label: 'Incluir 2',\n        include3Label: 'Incluir 3',\n        include4Label: 'Incluir 4',\n        titles: {\n          optionsSaved: 'Opciones guardadas'\n        },\n        messages: {\n          addressSaved: 'las opciones de dirección han sido guardadas'\n        },\n\n        newTitle: 'Opciones de dirección',\n        editTitle: 'Opciones de dirección',\n        addressLabel: 'Direcciones'\n      },\n      loaddb: {\n        progressMessage: 'Por favor espere mientras la base de datos es cargada.',\n        progressTitle: 'Cargando ase de datos',\n        displayAlertTitle: 'Seleccione un archivo para cargar',\n        displayAlertMessage: 'Por favor seleccione un archivo para ser cargado.',\n        errorDisplayAlertTitle: 'Error cargando',\n        errorDisplayAlertMessage: 'La base de datos no fue cargada el error fue: {{error}}',\n        editTitle: 'Cargar bd'\n      },\n      lookup: {\n        deleteValueInventoryTypeMedicationTitle: 'No se puede eliminar el medicamento',\n        deleteValueInventoryTypeMedicationMessage: 'El tipo de inventario de medicamentos no se pueden eliminar porque se necesita para el módulo de medicación.',\n        deleteValueLabPricingTypeProcedureTitle: 'No se puede eliminar el tipo de precio',\n        deleteValueLabPricingTypeProcedureMessage: 'El tipo de precio Procedimiento Lab no se puede eliminar porque es necesaria para el módulo de laboratorios.',\n        deleteValueImagingPricingTypeProcedureTitle: 'No se puede eliminar el tipo de imagen',\n        deleteValueImagingPricingTypeProcedureMessage: 'No se puede eliminar porque es necesario para el modulo de radiografias',\n        deleteValueVisitTypeAdmissionTitle: 'No se puede eliminar admision tipo visita',\n        deleteValueVisitTypeAdmissionMessage: 'Tipo de visita es necesaria para el modulo de admisiones.',\n        deleteValueVisitTypeImagingTitle: 'No se puede eliminar el tipo radiografia',\n        deleteValueVisitTypeImagingMessage: 'No se puede eliminar por que es necesario para el modulo de radiografias.',\n        deleteValueVisitTypeLabTitle: 'No se puede eliminar el tipo laboratorio',\n        deleteValueVisitTypeLabMessage: 'Es necesario para el modulo de laboratorio.',\n        deleteValueVisitTypePharmacyTitle: 'No se puede eliminar el tipo farmacia',\n        deleteValueVisitTypePharmacyMessage: 'Es requerido por el modulo de recetas.',\n        alertImportListTitle: 'Seleccione un archivo para importar',\n        alertImportListMessage: 'Por favor seleccione un archivo para importar.',\n        alertImportListSaveTitle: 'Lista importada',\n        alertImportListSaveMessage: 'Lista de busqueda importada.',\n        alertImportListUpdateTitle: 'Lista salvada',\n        alertImportListUpdateMessage: 'La lista de busqueda ha sido salvada.',\n        pageTitle: 'Listas de busqueda',\n        edit: {\n          template: {\n            addTitle: 'Adicionar valor',\n            editTitle: 'Editar valor',\n            updateButtonTextAdd: 'Adicionar',\n            updateButtonTextUpdate: 'Actualizar',\n            labelTitle: 'Valor'\n          }\n        },\n        anesthesiaTypes: 'Tipos de anestesia',\n        anesthesiologists: 'Anestesiologo',\n        billingCategories: 'Categorias de facturacion',\n        clinicList: 'Ubicacion de las clinicas',\n        countryList: 'Paises',\n        diagnosisList: 'Diagnosticos',\n        cptCodeList: 'Codigos CPT',\n        expenseAccountList: 'Cuentas de gastos',\n        aisleLocationList: 'Ubicacion de inventario de pasillo',\n        warehouseList: 'Ubicacciones de inventarios',\n        inventoryTypes: 'Tipos de inventarios',\n        imagingPricingTypes: 'Tipos de precios de radiografias',\n        labPricingTypes: 'Precios de laboratorio',\n        patientStatusList: 'Lista de estado de pacientes',\n        physicianList: 'Medicos',\n        procedureList: 'Procedimientos',\n        procedureLocations: 'Ubicacion de los procedimientos',\n        procedurePricingTypes: 'Tipos de procedimientos y precios',\n        radiologists: 'Radiologo',\n        unitTypes: 'Tipos de unidad',\n        vendorList: 'Proveedor',\n        visitLocationList: 'Lugares de visista',\n        visitTypes: 'Tipos de visita',\n        wardPricingTypes: 'Tipos de las tarifas'\n      },\n      roles: {\n        capability: {\n          admin: 'Administracion',\n          loadDb: 'Cargar base de datos',\n          updateConfig: 'Actualizar configuracion',\n          appointments: 'Citas',\n          addAppointment: 'Adicionar cita',\n          billing: 'Facturacion',\n          addCharge: 'Adicionar cargo (valor)',\n          addPricing: 'Adicionar precio',\n          addPricingProfile: 'Adicionar perfil de precios',\n          addInvoice: 'Adicionar factura',\n          addPayment: 'Adicionar pago',\n          deleteInvoice: 'Eliminar factura',\n          deletePricing: 'Eliminar precio',\n          deletePricingProfile: 'Eliminar perfil de precio',\n          editInvoice: 'Editar factura',\n          invoices: 'Facturas',\n          overrideInvoice: 'Sobreescribir factura',\n          pricing: 'Precio',\n          patients: 'Pacientes',\n          addDiagnosis: 'Adicionar diagnostico',\n          addPhoto: 'Adicionar foto',\n          addPatient: 'Adicionar paciente',\n          addVisit: 'Adicionar visita',\n          addVitals: 'Adicionar partes vitales',\n          admitPatient: 'Admitir paciente',\n          deletePhoto: 'Eliminar foto',\n          deletePatient: 'Eliminar paciente',\n          deleteAppointment: 'Eliminar cita',\n          deleteDiagnosis: 'Eliminar diagnostico',\n          deleteProcedure: 'Eliminar procedimiento',\n          deleteSocialwork: 'Eliminar trabajo social',\n          deleteVitals: 'Eliminar organo vital',\n          deleteVisit: 'Eliminar visita',\n          dischargePatient: 'Descartar paciente',\n          patientReports: 'Reportes por paciente',\n          visits: 'Visitas',\n          medication: 'Medicación',\n          addMedication: 'Adicionar medicación',\n          deleteMedication: 'Eliminar medicación',\n          fulfillMedication: 'Cumplir la medicación',\n          labs: 'Laboratorios',\n          addLab: 'Adicionar laboratorio',\n          completeLab: 'Completar laboratorio',\n          deleteLab: 'Eliminar laboratorio',\n          imaging: 'Radiografia',\n          addImaging: 'Adicionar radiografia',\n          completeImaging: 'Completar radiografia',\n          deleteImaging: 'Eliminar radiografia',\n          inventory: 'Inventario',\n          addInventoryRequest: 'Pedido de inventario',\n          addInventoryItem: 'Adicionar elemento al inventario',\n          addInventoryPurchase: 'Adicionar compra',\n          adjustInventoryLocation: 'Ajustar lugar elemento en el inventario',\n          deleteInventoryItem: 'Eliminar elemento del inventario',\n          deleteInventoryPurchase: 'Eliminar compra del inventario',\n          fulfillInventory: 'Cumplimiento de inventario',\n          userRoles: 'Roles de usuario'\n        },\n        messages: {\n          roleSaved: 'El {{roleName}} rol ha sido salvado.'\n        },\n        titles: {\n          roleSaved: 'Role salvado'\n        }\n      }\n    },\n    labels: {\n      cptcode: 'Codigo CPT',\n      loading: 'Cargando',\n      name: 'Nombre',\n      patient: 'Paciente',\n      quantity: 'Cantidada',\n      requestedOn: 'Pedido On',\n      date: 'Fecha',\n      dateOfBirth: 'Fecha de nacimiento',\n      dateOfBirthShort: 'FDN',\n      dateRequested: 'Fecha de pedido',\n      dateCompleted: 'Fecha completada',\n      description: 'Descripción',\n      requestedBy: 'Pedido por|',\n      fulfill: 'Cumplomiento',\n      fulfillRequest: 'Pedido de cumplimiento',\n      fulfillRequestNow: 'Pedido de cumplimiento ahora',\n      actions: 'Acciones',\n      action: 'Accion',\n      notes: 'Notas',\n      edit: 'Editar',\n      imageOrders: 'Ordenes de radiografias',\n      labOrders: 'Ordenes de laboratorio',\n      patientHistory: 'Historia del paciente',\n      imagingType: 'Tipo de radiografia',\n      result: 'Resultado',\n      results: 'Resultados',\n      visit: 'Visita',\n      requests: 'Pedido',\n      completed: 'Completado',\n      id: 'Id',\n      on: 'on',\n      type: 'Tipo',\n      sex: 'Genero',\n      age: 'Edad',\n      username: 'Nombre de usuario',\n      email: 'Email',\n      role: 'Rol',\n      'delete': 'Eliminar',\n      userCanAddNewValue: 'Los usuarios pueden agregar nuevos valores',\n      value: 'Valor',\n      lookupType: 'Tipo de busqueda',\n      importFile: 'Importar archivo',\n      fileLoadSuccessful: 'Archivo cargado exitosamente',\n      fileToLoad: 'Archivo cargado',\n      startTime: 'Hora de inicio',\n      startDate: 'Fecha de inicio',\n      endTime: 'Hora de finalización',\n      endDate: 'Fecha final',\n      docRead: 'Leer documento',\n      docWritten: 'Documento escrito',\n      displayName: 'Nombre para mostrar',\n      password: 'Contraseña',\n      editUser: 'Editar usuario',\n      newUser: 'Nuevo usuario',\n      deleteUser: 'Eliminar usuario',\n      medication: 'Medicación',\n      status: 'Estado',\n      addNewOutpatientVisit: '--Nueva visita a paciente externo--',\n      prescription: 'Receta medica',\n      prescriptionDate: 'Fecha de la receta medica',\n      billTo: 'Facturar a',\n      pullFrom: 'Traer de',\n      fulfilled: 'Cumplido',\n      deleteRequest: 'Eliminar pedido',\n      location: 'Ubicacion',\n      provider: 'Proveedor',\n      'with': 'con',\n      allDay: 'Todo el dia',\n      physician: 'Médico',\n      assisting: 'Asistencia',\n      anesthesia: 'Anestesia',\n      procedures: 'Procedimiento'\n    },\n    messages: {\n      noItemsFound: 'Elementos no encontrados.',\n      noHistoryAvailable: 'Historia no disponible.',\n      createNewRecord: 'Crear un nuevo registro?',\n      createNewUser: 'Crear un nuevo usuario?',\n      noUsersFound: 'Ningun usuario encontrado.',\n      areYouSureDelete: 'Estas seguro de eliminar este usuario {{user}}?',\n      userHasBeenSaved: 'El usuario ha sido salvado.',\n      userSaved: 'Usuario salvado',\n      onBehalfOf: 'a nombre de',\n      newPatientHasToBeCreated: 'Un nuevo paciente debe ser creado...Por favor espere..',\n      noNotesAvailable: 'No hay notas clínicas adicionales están disponibles para esta visita.',\n      sorry: 'Lo sentimos, un error ha ocurrido...',\n      forAuthorizedPersons: 'Este informe es sólo para personas autorizadas.'\n    },\n    alerts: {\n      pleaseWait: 'Por favor espere'\n    },\n    buttons: {\n      complete: 'Completado',\n      cancel: 'Cancelar',\n      close: 'Cerrar',\n      returnButton: 'Regresar',\n      barcode: 'Codigo de barras',\n      add: 'Adicionar',\n      update: 'Actualizar',\n      ok: 'Ok',\n      fulfill: 'Cumplimiento',\n      remove: 'Remover',\n      'delete': 'Eliminar',\n      newUser: 'Nuevo usuario',\n      addValue: 'Adicionar valor',\n      newNote: 'Nueva nota',\n      'import': 'Importar',\n      loadFile: 'Cargar archivo',\n      newRequest: 'Nueva solicitud',\n      allRequests: 'Todas las solicitudes',\n      dispense: 'Repartir',\n      newItem: '+ nuevo elemento',\n      newRequestPlus: '+ nuevo pedido',\n      addVisit: 'Adicionar visita',\n      search: 'Buscar'\n    },\n    login: {\n      messages: {\n        signIn: 'por favor ingrese',\n        error: 'Nombre de usuario o clave incorrectos.'\n      },\n      labels: {\n        password: 'Clave',\n        username: 'Nombre de usuario',\n        signIn: 'Ingresar'\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Costo por unidad:',\n        delivered: 'Enviado A:',\n        location: 'Cambio de ubicación:',\n        prescription: 'Recetado por:',\n        pulled: 'Pulled From:',\n        quantity: 'Quantity at Completion:',\n        reason: 'Razón:',\n        returned: 'Regresado al paciente:',\n        transferredFrom: 'Transferido a:',\n        transferredTo: 'Transferido a:'\n      },\n      labels: {\n        action: 'Acción',\n        add: 'Adicionar',\n        adjust: 'Adjustar',\n        adjustmentDate: 'Fecha de ajuste',\n        adjustmentFor: 'Ajustado para',\n        adjustmentType: 'Tipo de ajuste',\n        aisle: 'Pasillo',\n        aisleLocation: 'Ubicación pasillo',\n        allInventory: 'Todo el inventario',\n        billTo: 'Facturao a',\n        consumePurchases: 'Consume Purchases',\n        consumptionRate: 'Tasa de consumo',\n        cost: 'Costo',\n        costPerUnit: 'Costo por Unidad',\n        crossReference: 'Referencia cruzada',\n        currentQuantity: 'Cantidad actual',\n        dateCompleted: 'Fecha completado',\n        dateEffective: 'Gecha efectiva',\n        dateEnd: 'Fecha final',\n        dateStart: 'Fecha inicial',\n        dateReceived: 'Fecha recibido',\n        dateTranferred: 'Fecha transferencia',\n        daysLeft: 'Dias restantes',\n        deliveryAisle: 'Enviado a pasillo',\n        deliveryLocation: 'Ubicación del envio',\n        distributionUnit: 'Unidad de distribución',\n        deleteItem: 'Eliminar elemento',\n        details: 'Detalles',\n        editItem: 'Editar elemento',\n        expense: 'Gastos a',\n        expirationDate: 'Fecha de vencimiento',\n        fulfillRequest: 'Pedido de cumplimiento',\n        fulfillRequestNow: 'Pedido de incumplimiento para hoy',\n        gift: 'Regalo en especie',\n        giftUsage: 'Uso del regalo en especie',\n        giftInKindNo: 'N',\n        giftInKindYes: 'Y',\n        inventoryConsumed: 'Inventario consumido',\n        inventoryItem: 'Elemento del inventario',\n        inventoryObsolence: 'Obsolescencia de inventario',\n        invoiceItems: 'Articulos de factura',\n        invoiceLineItem: 'Elemento de la factura linea',\n        invoiceNumber: 'Factura numero',\n        item: 'Elemento',\n        items: 'Elementos',\n        itemNumber: 'Numero de elemento',\n        location: 'Ubicación',\n        locations: 'Ubicaciones',\n        name: 'Nombre',\n        markAsConsumed: 'Marcar como consumido',\n        newItem: 'Nuevo elemento',\n        originalQuantity: 'Cantidad original',\n        print: 'Imprimir',\n        printBarcode: 'Imprimir codigo de  barras',\n        printer: 'Impresora',\n        pullFrom: 'Traido de',\n        purchases: 'Compras',\n        purchaseCost: 'Costo de compra',\n        purchaseInfo: 'Informacion de la compra',\n        quantity: 'Cantidad ({{unit}})',\n        quantityAvailable: 'Cantidad disponible',\n        quantityOnHand: 'Cantidad a la mano',\n        quantityRequested: 'Cantidad pedida',\n        rank: 'Ranking',\n        reason: 'Razón',\n        remove: 'Remover',\n        reorderPoint: 'Reordenar punto',\n        requestedItems: 'Elementos solicitados',\n        salePricePerUnit: 'Costo de venta por unidad',\n        save: 'Guardar',\n        serialNumber: 'Serial/Numero de lote',\n        total: 'Total',\n        totalCost: 'Costo total',\n        totalReceived: 'Total Recivido: {{total}}',\n        transaction: 'Transaccion',\n        transactions: 'Transacciones',\n        transfer: 'Translados',\n        transferFrom: 'Translado desde',\n        transferTo: 'Translado a ubicación',\n        transferToAisle: 'Translado a pasillo',\n        unit: 'Unidad',\n        unitCost: 'Unidad Costo',\n        vendor: 'Proveedor',\n        vendorItemNumber: 'Proveedor numero de elemento',\n        xref: 'XRef'\n      },\n      messages: {\n        adjust: 'Por favor ajust las cantidades en la ubicación adecuada(s) la diferencia de la cuenta es {{difference}}.',\n        createRequest: 'Crear un nuevo pedido?',\n        'delete': 'Estas seguro de eliminar {{name}}?',\n        itemNotFound: 'El elemento del inventario <strong>{{item}}</strong> no se pudo encontrar.<br>Si desea crear un nuevo elemento, Ingrese la información abajo.<br>De lo contrario opria cancelar para volver.',\n        loading: 'Cargando transacciones ...',\n        purchaseSaved: 'La compra de inventario ha sido salvada.',\n        noRequests: 'No se encontraron pedidos.',\n        noItems: 'No se encontraron elementos.',\n        quantity: 'La cantidad total <strong>({{quantity}})</strong> no encaja con la cantidad total en las ubicaciones <strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Esta seguro de eliminar este elemento de la factura?',\n        removeItemRequest: 'Seguro que quiere eliminar este elemento del pedido?',\n        requestFulfilled: 'El pedido de inventario ha sido procesado.',\n        requestUpdated: 'El pedido de inventario ha sido actualizado.',\n        warning: 'Valide los campos requeridos (marcados con *) corrija los errores antes de adicionar.'\n      },\n      reports: {\n        rows: {\n          adjustments: 'Ajustes',\n          adjustmentsTotal: 'Ajustes totales',\n          balanceBegin: 'Balance inicial',\n          balanceEnd: 'Balance Final',\n          category: 'Categoria',\n          consumed: 'Consumado',\n          consumedGik: 'GiK Consumido',\n          consumedGikTotal: 'Total GiK Consumido',\n          consumedPuchases: 'Total de lo comprado consumido',\n          consumedPurchasesTotal: 'Total de lo comprado consumido',\n          consumedTotal: 'Total consumido',\n          errInFinSum: 'Error en _generateFinancialSummaryReport: ',\n          errInFindPur: 'Error en _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Error en _findInventoryItemsByRequest: ',\n          expensesFor: 'Gatos para: ',\n          noAccount: '(No Cuenta)',\n          subtotal: 'Subtotal: ',\n          subtotalFor: 'Subtotal para {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total para {{var}}: ',\n          totalPurchases: 'Compras Totales',\n          transfer1: '{{quantity}} de {{location}}',\n          trasnfer2: 'De: {{source}} A: {{target}}'\n        },\n        adjustment: 'Ajuste detallado',\n        daysSupply: 'Dias de inventario restante',\n        expenseDetail: 'Gastos detallados',\n        expenseSum: 'Resumen de gastos',\n        expiration: 'Fecha de expiracion',\n        'export': 'Exportar reporte',\n        fields: 'Campos a incluir',\n        finance: 'Resumen de finanzas',\n        generate: 'Generar reporte',\n        invLocation: 'Inventario por ubicacion',\n        invValuation: 'Inventario por valoracion',\n        purchaseDetail: 'Compras detalladas',\n        purchaseSum: 'Resumen de compras',\n        reportType: 'Tipo de reporte',\n        stockTransferDetail: 'Detalle de traslado de stock',\n        stockTransferSum: 'Resumen traslado de stock',\n        stockUsageDetail: 'Detalle de uso de stock',\n        stockUsageSum: 'Resumen uso de stock'\n      },\n      titles: {\n        addPurchase: 'Adicionar compra',\n        addRequest: 'Nuevo pedido',\n        adjustment: 'Ajuste',\n        editPurchase: 'Editar compra',\n        editRequest: 'Editar pedido',\n        inventoryItem: 'Nuevo elemento de inventario',\n        inventoryReport: 'Reporte de inventario',\n        purchaseSaved: 'Compras de inventario guardadas',\n        quickAddTitle: 'Nuevo elemento de inventario',\n        removeItem: 'Remover elemento',\n        requestFulfilled: 'Pedido cumplido',\n        requestUpdated: 'Pedido actualizado',\n        transfer: 'Trasladar elementos',\n        warning: 'Peligro!!!!!'\n      }\n    },\n    imaging: {\n      pageTitle: 'Pedido de radriografia',\n      sectionTitle: 'Radiografias',\n      buttons: {\n        newButton: '+ new radiografia'\n      },\n      labels: {\n        radiologist: 'Radiologo',\n        addNewVisit: '--Adicionar nueva visita--'\n      },\n      messages: {\n        noCompleted: 'No de items encontrados.'\n      },\n      titles: {\n        completedImaging: 'Radiografia completada',\n        editTitle: 'Pedido de edicion de radiografia',\n        newTitle: 'Nuevo pedido de radiografia'\n      },\n      alerts: {\n        completedTitle: 'Pedido de radiografia completado',\n        completedMessage: 'El pedido de radiografia ha sido completado.',\n        savedTitle: 'Pedido de radiografia salvado',\n        savedMessage: 'El pedido de radiografia ha sido guardado.'\n      }\n    },\n    medication: {\n      pageTitle: 'Pedido de medicación',\n      sectionTitle: 'Medication',\n      returnMedication: 'Retorno de medicación',\n      buttons: {\n        dispenseMedication: 'dispensar medicación',\n        newButton: '+ nuevo pedido',\n        returnMedication: 'debolver medicacion'\n      },\n      titles: {\n        completedMedication: 'Medicacion completada',\n        editMedicationRequest: 'Editar pedido de medicacion',\n        newMedicationRequest: 'Nuevo pedido de medicacion'\n      },\n      messages: {\n        createNew: 'Crear un nuevo pedido de medicacion?',\n        confirmDeletion: 'Estas seguro de eliminar este pedido de medicación?'\n      },\n      labels: {\n        refills: 'Recargas',\n        quantityRequested: 'Cantidad solicitada',\n        quantityDispensed: 'Cantidad dispensada',\n        quantityDistributed: 'Cantidad distribuida',\n        quantityToReturn: 'Cantidad a devolver',\n        returnLocation: 'Retornar a ubicación',\n        returnAisle: 'Devolve a pasillo',\n        returnReason: 'Razon por la que se devuelve/Nota',\n        adjustmentDate: 'Fecha de ajuste',\n        creditToAccount: 'Credito a cuenta'\n      },\n      alerts: {\n        returnedTitle: 'Medicacion devuelta',\n        returnedMessage: 'La medicacion ha sido marcada para devolver.',\n        savedTitle: 'Pedido de medicacion guardado',\n        savedMessage: 'La elemento de medicación ha sido guardado.',\n        fulfilledTitle: 'Pedido de medicación cumplido'\n      }\n    },\n    appointments: {\n      currentScreenTitle: 'Listado de citas',\n      editTitle: 'Editar cita',\n      newTitle: 'Nueva cita',\n      sectionTitle: 'Citas',\n      thisWeek: 'Citas esta semana',\n      missed: 'Citas perdidas',\n      searchTitle: 'Buscar citas',\n      todayTitle: 'Citas para hoy',\n      messages: {\n        deleteAppointmentMessage: 'Esta seguro de eliminar esta cita?',\n        endTimeLaterThanStart: 'Seleccione una hora de finalizacion despues de la de inicio.'\n      },\n      buttons: {\n        newButton: '+ nueva cita'\n      }\n    },\n    visits: {\n      edit: {\n        buttons: {\n          newAppointment: 'Nuevas citas',\n          addDiagnosis: 'Adicionar diagnostico',\n          newProcedure: 'Nuevo procedimiento',\n          newLab: 'New laboratorio',\n          newMedication: 'Nueva mediicación',\n          newImaging: 'Nueva radiografia'\n        },\n        labels: {\n          diagnosis: 'Diagnostico',\n          procedure: 'Procedimiento',\n          authoredBy: 'Escrito por',\n          labs: 'Laboratorios',\n          imaging: 'Radiografias',\n          visitInformation: 'Informacion de visita'\n        }\n      }\n    },\n    labs: {\n      sectionTitle: 'Laboratorios',\n      requestsTitle: 'Pedido de laboratorio',\n      editTitle: 'Editar pedido de laboratorio',\n      newTitle: 'Nuevo pedido de laboratorio',\n      deleteTitle: 'Eliminar pedido',\n      completedTitle: 'Completar laboratorio',\n      labels: {\n        labType: 'Tipo de laboratorio',\n        addNewVisit: '--Adicionar nueva visita--'\n      },\n      messages: {\n        noItemsFound: 'No boratorios encontrados.',\n        createNewRecord: 'Crear un registro?',\n        confirmDeletion: 'Esta seguro de eliminar esta solicitud de laboratorio?',\n        noCompleted: 'No elementos completados encontrados.'\n      },\n      buttons: {\n        newButton: '+ nuevo laboratorio'\n      },\n      alerts: {\n        requestCompletedTitle: 'Pedido de laboratorio competado',\n        requestCompletedMessage: 'El pedido de laboratorio ha sido completado.',\n        requestSavedTitle: 'Silicitud de laboratorio guardado',\n        requestSavedMessage: 'El pedido de laboratorio ha sido guardado.'\n      }\n    },\n    common: {\n      actions: 'Acciones'\n    },\n    patients: {\n      notes: {\n        onBehalfOfLabel: 'A nombre de',\n        onBehalfOfCopy: 'a nombre de',\n        pleaseSelectAVisit: 'Por favor seleccione una visista',\n        noteLabel: 'Nota'\n      }\n    }\n  };\n});","define('hospitalrun/tests/locales/es/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/es/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/es/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/fr/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    dashboard: {\n      title: 'Que voulez-vous faire?'\n    },\n    navigation: {\n      imaging: 'Imagerie',\n      inventory: 'Inventaire',\n      patients: 'Patients',\n      appointments: 'Rendez-vous',\n      medication: 'Médicament',\n      labs: 'Labos',\n      billing: 'Facturation',\n      administration: 'Administration',\n      subnav: {\n        requests: 'Demandes',\n        items: 'Articles',\n        completed: 'Traité',\n        newRequest: 'Nouvelle demande',\n        inventoryReceived: 'Inventaire reçu',\n        reports: 'Rapports',\n        patientListing: 'Liste des patients',\n        newPatient: 'Nouveau patient',\n        thisWeek: 'Cette semaine',\n        today: 'Aujourd\\'hui',\n        search: 'Rechercher',\n        addAppointment: 'Ajouter un rendez-vous',\n        dispense: 'Dispenser',\n        returnMedication: 'Retourner un Médicament',\n        invoices: 'Factures',\n        newInvoice: 'Nouvelle facture',\n        prices: 'Prix',\n        priceProfiles: 'Profils de prix',\n        lookupLists: 'Listes de référence',\n        addressFields: 'Champs d\\'adresse',\n        loadDb: 'Importer une BD',\n        users: 'Utilisateurs',\n        newUser: 'Nouvel utilisateur',\n        admittedPatients: 'patients admis',\n        missed: 'Manqué',\n        userRoles: 'Rôles de l\\'utilisateur'\n      },\n      actions: {\n        logout: 'Deconnexion',\n        login: 'Connexion'\n      },\n      about: 'À propos de HospitalRun'\n    },\n    user: {\n      plusNewUser: '+ nouvel utilisateur',\n      usersPageTile: 'Liste des Utilisateurs'\n    },\n    admin: {\n      addressOptions: 'Options d\\'adresse',\n      lookupLists: 'Listes de référence',\n      loadDb: 'Importer une BD',\n      users: 'Utilisateurs',\n      address: {\n        address1Label: 'Label de l\\'adresse 1',\n        address2Label: 'Label de l\\'adresse 2',\n        address3Label: 'Label de l\\'adresse 3',\n        address4Label: 'Label de l\\'adresse 4',\n        include1Label: 'Label de l\\'include 1',\n        include2Label: 'Label de l\\'include 2',\n        include3Label: 'Label de l\\'include 3',\n        include4Label: 'Label de l\\'include 4',\n        titles: {\n          optionsSaved: 'Options enregistrées'\n        },\n        messages: {\n          addressSaved: 'Les options d\\'adresse ont été enregistrées'\n        },\n\n        newTitle: 'Options d\\'adresse',\n        editTitle: 'Options d\\'adresse',\n        addressLabel: 'Adresse'\n      },\n      loaddb: {\n        progressMessage: 'Veuillez patienter durant le chargement de la base de données.',\n        progressTitle: 'Chargement de la base de données en cours',\n        displayAlertTitle: 'Sélectionner le fichier à télécharger.',\n        displayAlertMessage: 'Veuillez sélectionner le fichier à télécharger.',\n        errorDisplayAlertTitle: 'Erreur de chargement',\n        errorDisplayAlertMessage: 'La base de données ne pouvait pas être importée. L\\'erreur etait: {{error}}',\n        editTitle: 'Importer une BD'\n      },\n      lookup: {\n        deleteValueInventoryTypeMedicationTitle: 'Impossible de supprimer le médicament',\n        deleteValueInventoryTypeMedicationMessage: 'Impossible de supprimer le type d\\'inventaire de médicaments car il est requis par le module Médicament.',\n        deleteValueLabPricingTypeProcedureTitle: 'Impossible de supprimer le type de prix de Labo',\n        deleteValueLabPricingTypeProcedureMessage: 'Impossible de supprimer le type de prix de procédure de Labo car il est requis par le module Labos.',\n        deleteValueImagingPricingTypeProcedureTitle: 'Impossible de supprimer le type de prix d\\'imagerie',\n        deleteValueImagingPricingTypeProcedureMessage: 'Impossible de supprimer le type de prix de procédure d\\'imagerie car il est requis par le module Imagerie.',\n        deleteValueVisitTypeAdmissionTitle: 'Impossible de supprimer la visite de type Admission',\n        deleteValueVisitTypeAdmissionMessage: 'Impossible de supprimer la visite de type Admission car il est requis par le module Visites.',\n        deleteValueVisitTypeImagingTitle: 'Impossible de supprimer la visite de type Imagerie',\n        deleteValueVisitTypeImagingMessage: 'Impossible de supprimer la visite de type Imagerie car il est requis par le module Imagerie.',\n        deleteValueVisitTypeLabTitle: 'Impossible de supprimer la visite de type Labo',\n        deleteValueVisitTypeLabMessage: 'Impossible de supprimer la visite de type Labo car il est requis par le module Labo.',\n        deleteValueVisitTypePharmacyTitle: 'Impossible de supprimer la visite de type Pharmacie',\n        deleteValueVisitTypePharmacyMessage: 'Impossible de supprimer la visite de type Labo car il est requis par le module Médicament.',\n        alertImportListTitle: 'Sélectionner le fichier à importer',\n        alertImportListMessage: 'Veuillez sélectionner le fichier à importer.',\n        alertImportListSaveTitle: 'Liste importée',\n        alertImportListSaveMessage: 'La liste de référence a été importée.',\n        alertImportListUpdateTitle: 'Liste enregistrée',\n        alertImportListUpdateMessage: 'La liste de référence a été enregistrée.',\n        pageTitle: 'Listes de référence',\n        edit: {\n          template: {\n            addTitle: 'Ajouter une valeur',\n            editTitle: 'Modifier la valeur',\n            updateButtonTextAdd: 'Ajouter',\n            updateButtonTextUpdate: 'Mettre à jour',\n            labelTitle: 'Valeur'\n          }\n        },\n        anesthesiaTypes: 'Types d\\'Anesthésie',\n        anesthesiologists: 'Anesthésiologistes',\n        billingCategories: 'Catégories de facturation',\n        clinicList: 'Emplacements de la clinique',\n        countryList: 'Pays',\n        diagnosisList: 'Diagnostics',\n        cptCodeList: 'Codes CPT',\n        expenseAccountList: 'Comptes de dépense',\n        aisleLocationList: 'Emplacements de rayon d\\'inventaire',\n        warehouseList: 'Emplacements d\\'inventaire',\n        inventoryTypes: 'Types d\\'inventaire',\n        imagingPricingTypes: 'Types de prix d\\'imagerie',\n        labPricingTypes: 'Types de prix de labo',\n        patientStatusList: 'Liste de statut de patient',\n        physicianList: 'Médécins',\n        procedureList: 'Procédures',\n        procedureLocations: 'Emplacements des procédures',\n        procedurePricingTypes: 'Types de prix de procédure',\n        radiologists: 'Radiologistes',\n        unitTypes: 'Types d\\'unité',\n        vendorList: 'Fournisseur',\n        visitLocationList: 'Emplacements de visite',\n        visitTypes: 'Types de visite',\n        wardPricingTypes: 'Types de prix de service'\n      },\n      roles: {\n        capability: {\n          admin: 'Administration',\n          loadDb: 'Charger la Base de données',\n          updateConfig: 'Mettre à jour les Configurations',\n          appointments: 'Rendez-vous',\n          addAppointment: 'Ajouter un Rendez-vous',\n          billing: 'Facturation',\n          addCharge: 'Ajouter une charge',\n          addPricing: 'Ajouter un Prix',\n          addPricingProfile: 'Ajouter le profil de prix',\n          addInvoice: 'Ajouter une facture',\n          addPayment: 'Ajouter un paiement',\n          deleteInvoice: 'Supprimer une facture',\n          deletePricing: 'Supprimer un Prix',\n          deletePricingProfile: 'Supprimer le profil de prix',\n          editInvoice: 'Modifier la facture',\n          invoices: 'Factures',\n          overrideInvoice: 'Remplacer la facture',\n          pricing: 'Tarification',\n          patients: 'Patients',\n          addDiagnosis: 'Ajouter un diagnostic',\n          addPhoto: 'Ajouter une photo',\n          addPatient: 'Ajouter un patient',\n          addVisit: 'Ajouter une visite',\n          addVitals: 'Ajouter les signes vitaux',\n          admitPatient: 'Admettre un patient',\n          deletePhoto: 'Supprimer une photo',\n          deletePatient: 'Supprimer un patient',\n          deleteAppointment: 'Supprimer un rendez-vous',\n          deleteDiagnosis: 'Supprimer un diagnostic',\n          deleteProcedure: 'Supprimer une procédure',\n          deleteSocialwork: 'Supprimer un travail social',\n          deleteVitals: 'Supprimer des signes vitaux',\n          deleteVisit: 'Supprimer une Visite',\n          dischargePatient: 'Liberer un patient',\n          patientReports: 'Rapports des patients',\n          visits: 'Visites',\n          medication: 'Médicament',\n          addMedication: 'Ajouter un médicament',\n          deleteMedication: 'Supprimer un médicament',\n          fulfillMedication: 'Traiter une demande de médicaments',\n          labs: 'Test Labo',\n          addLab: 'Ajouter un test labo',\n          completeLab: 'Completer un test labo',\n          deleteLab: 'Supprimer un test labo',\n          imaging: 'Imagerie',\n          addImaging: 'Ajouter une imagerie',\n          completeImaging: 'Completer une imagerie',\n          deleteImaging: 'Supprimer une Imagerie',\n          inventory: 'Inventaire',\n          addInventoryRequest: 'Ajouter une demande d\\'inventaire',\n          addInventoryItem: 'Ajouter un article d\\'inventaire',\n          addInventoryPurchase: 'Ajouter un achat d\\'inventaire',\n          adjustInventoryLocation: 'Ajuster la localisation de l\\'inventaire',\n          deleteInventoryItem: 'Supprimer un article d\\'inventaire',\n          deleteInventoryPurchase: 'Supprimer un achat d\\'inventaire',\n          fulfillInventory: 'Traiter l\\'inventaire',\n          userRoles: 'Rôles d\\'utilisateur'\n        },\n        messages: {\n          roleSaved: 'Le rôle {{roleName}}  a été enregistré.'\n        },\n        titles: {\n          roleSaved: 'Rôle enregistré'\n        }\n      }\n    },\n    labels: {\n      cptcode: 'Code CPT',\n      loading: 'Chargement',\n      name: 'Nom',\n      patient: 'Patient',\n      prescriber: 'prescripteur',\n      quantity: 'Quantité',\n      requestedOn: 'Demandé le',\n      date: 'Date',\n      dateOfBirth: 'Date de naissance',\n      dateOfBirthShort: 'DdN',\n      dateRequested: 'Date de demande',\n      dateCompleted: 'Date de traitement',\n      description: 'Description',\n      requestedBy: 'Demandé par',\n      fulfill: 'Traiter',\n      fulfillRequest: 'Traiter la demande',\n      fulfillRequestNow: 'Traiter la demande maintenant',\n      actions: 'Actions',\n      action: 'Action',\n      notes: 'Notes',\n      edit: 'Modifier',\n      imageOrders: 'Demandes d\\'imagerie',\n      labOrders: 'Demandes de labo',\n      patientHistory: 'Historique du patient',\n      imagingType: 'Type d\\'imagerie',\n      result: 'Resultat',\n      results: 'Resultats',\n      visit: 'Visite',\n      requests: 'Demandes',\n      completed: 'Traité',\n      id: 'Id',\n      on: 'sur',\n      type: 'Type',\n      sex: 'Sexe',\n      age: 'Age',\n      username: 'Nom d\\'utilisateur',\n      email: 'Email',\n      role: 'Rôle',\n      'delete': 'Supprimer',\n      userCanAddNewValue: 'Utilisateur peut ajouter de nouvelles valeurs',\n      value: 'Valeur',\n      lookupType: 'Type de référence',\n      importFile: 'Importer un fichier',\n      fileLoadSuccessful: 'Téléchargement reussi',\n      fileToLoad: 'Téléchargement de fichier',\n      startTime: 'Heure de debut',\n      startDate: 'Date de debut',\n      endTime: 'Heure de fin',\n      endDate: 'Date de fin',\n      docRead: 'Documents lus',\n      docWritten: 'Documents écrits',\n      displayName: 'Nom à afficher',\n      password: 'Mot de passe',\n      editUser: 'Modifier un utilisateur',\n      newUser: 'Nouvel utilisateur',\n      deleteUser: 'Supprimer un utilisateur',\n      medication: 'Médicament',\n      status: 'Statut',\n      addNewOutpatientVisit: '--Ajouter une nouvelle consultation externe--',\n      prescription: 'Ordonnance',\n      prescriptionDate: 'Date de prescription',\n      billTo: 'Facturer à',\n      pullFrom: 'Tirer de',\n      fulfilled: 'Traité',\n      deleteRequest: 'Supprimer la demande',\n      location: 'Emplacement',\n      provider: 'Fournisseur',\n      'with': 'Avec',\n      allDay: 'Toute la journée',\n      physician: 'Médecin',\n      assisting: 'Assistant',\n      anesthesia: 'Anesthésie',\n      procedures: 'Procédures'\n    },\n    messages: {\n      noItemsFound: 'Aucun article retrouvé.',\n      noHistoryAvailable: 'Aucune historique disponible.',\n      createNewRecord: 'Créer un nouveau dossier?',\n      createNewUser: 'Créer un nouvel utilisateur?',\n      noUsersFound: 'Aucun utilisateur retrouvé.',\n      areYouSureDelete: 'Êtes-vous sûr de vouloir supprimer l\\'utilisateur {{user}}?',\n      userHasBeenSaved: 'L\\'utilisateur a été enregistré.',\n      userSaved: 'Utilisateur enregistré',\n      onBehalfOf: 'de la part de',\n      newPatientHasToBeCreated: 'Un nouveau patient doit être crée...Veuillez attendre...',\n      noNotesAvailable: 'Aucune note clinique supplémentaire disponible pour cette visite.',\n      sorry: 'Désolé, quelque chose a mal tourné ...',\n      forAuthorizedPersons: 'Ce rapport est destiné uniquement aux personnes autorisées.'\n    },\n    alerts: {\n      pleaseWait: 'Veuillez attendre'\n    },\n    buttons: {\n      complete: 'Traiter',\n      cancel: 'Annuler',\n      close: 'Fermer',\n      returnButton: 'Retourner',\n      barcode: 'Code barre',\n      add: 'Ajouter',\n      update: 'Mettre à jour',\n      ok: 'Ok',\n      fulfill: 'Traiter',\n      remove: 'Retirer',\n      'delete': 'Supprimer',\n      newUser: 'Nouvel utilisateur',\n      addValue: 'Ajouter une valeur',\n      newNote: 'Nouvelle note',\n      'import': 'Importer',\n      loadFile: 'Télécharger le fichier',\n      newRequest: 'Nouvelle demande',\n      allRequests: 'Toutes les demandes',\n      dispense: 'Dispenser',\n      newItem: '+ nouvel article',\n      newRequestPlus: '+ nouvelle demande',\n      addVisit: 'Ajouter une visite',\n      search: 'Rechercher'\n    },\n    login: {\n      messages: {\n        signIn: 'veuillez-vous connecter',\n        error: 'Nom d\\'utilisateur ou mot de passe est incorrect.'\n      },\n      labels: {\n        password: 'Mot de passe',\n        username: 'Nom d\\'utilisateur',\n        signIn: 'Connexion'\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Coût par unité:',\n        delivered: 'Livré à:',\n        location: 'Emplacement ajusté:',\n        prescription: 'Ordonnance pour:',\n        pulled: 'Tiré de:',\n        quantity: 'Quantité après traitement:',\n        reason: 'Motif:',\n        returned: 'Retourné par le patient:',\n        transferredFrom: 'Transféré de:',\n        transferredTo: 'Transféré à:'\n      },\n      labels: {\n        action: 'Action',\n        add: 'Ajouter',\n        adjust: 'Ajuster',\n        adjustmentDate: 'Date d\\'ajustement',\n        adjustmentFor: 'Ajustement pour',\n        adjustmentType: 'Type d\\'ajustement',\n        aisle: 'Rayon',\n        aisleLocation: 'Emplacement du rayon',\n        allInventory: 'Toute l\\'inventaire',\n        billTo: 'Facturer à',\n        consumePurchases: 'Utiliser les achats',\n        consumptionRate: 'Taux d\\'utilisation',\n        cost: 'Coût',\n        costPerUnit: 'Coût par unité',\n        crossReference: 'Reference',\n        currentQuantity: 'Quantité actuelle',\n        dateCompleted: 'Date de traitement',\n        dateEffective: 'Date d\\'effet',\n        dateEnd: 'Date de fin',\n        dateStart: 'Date de debut',\n        dateReceived: 'Date de réception',\n        dateTransferred: 'Date  de transfert',\n        daysLeft: 'Nombre de jours restant',\n        deliveryAisle: 'Rayon de livraison',\n        deliveryLocation: 'Emplacement de livraison',\n        distributionUnit: 'Unité de distribution',\n        deleteItem: 'Supprimer l\\'article',\n        details: 'Détails',\n        editItem: 'Modifier l\\'article',\n        expense: 'Dépenses pour',\n        expirationDate: 'Date d\\'expiration',\n        fulfillRequest: 'Traiter la demande',\n        fulfillRequestNow: 'Traiter la demande maintenant',\n        gift: 'Don en nature',\n        giftUsage: 'Utilisation de don en nature',\n        giftInKindNo: 'N',\n        giftInKindYes: 'O',\n        inventoryConsumed: 'Inventaire utilisé',\n        inventoryItem: 'Article à inventorier',\n        inventoryObsolence: 'Inventory Obsolence',\n        invoiceItems: 'Articles de facture',\n        invoiceLineItem: 'Article de facture',\n        invoiceNumber: 'Numero de facture',\n        item: 'Article',\n        items: 'Articles',\n        itemNumber: 'Numero d\\'article',\n        location: 'Emplacement',\n        locations: 'Emplacements',\n        name: 'Nom',\n        markAsConsumed: 'Marqué comme utilisé',\n        newItem: 'Nouvel article',\n        originalQuantity: 'Quantité originale',\n        print: 'Imprimer',\n        printBarcode: 'Imprimer le code barre',\n        printer: 'Imprimante',\n        pullFrom: 'Tirer de',\n        purchases: 'Achats',\n        purchaseCost: 'Coût d\\'achat',\n        purchaseInfo: 'Détails de l\\'achat',\n        quantity: 'Quantité ({{unit}})',\n        quantityAvailable: 'Quantité disponible',\n        quantityOnHand: 'Quantité en main',\n        quantityRequested: 'Quantité demandée',\n        rank: 'Rang',\n        reason: 'Motif',\n        remove: 'Retirer',\n        reorderPoint: 'Point de commande',\n        requestedItems: 'Articles demandés',\n        salePricePerUnit: 'Prix de vente unitaire',\n        save: 'Enregistrer',\n        serialNumber: 'Numéro de série / lot',\n        total: 'Total',\n        totalCost: 'Coût total',\n        totalReceived: 'Total reçu: {{total}}',\n        transaction: 'Transaction',\n        transactions: 'Transactions',\n        transfer: 'Transférer',\n        transferFrom: 'Transféré de',\n        transferTo: 'Transférer à l\\'emplacement',\n        transferToAisle: 'Transférer à l\\'emplacement du rayon',\n        unit: 'Unité',\n        unitCost: 'Coût unitaire',\n        vendor: 'Fournisseur',\n        vendorItemNumber: 'Numéro d\\'article fournisseur',\n        xref: 'XRef'\n      },\n      messages: {\n        adjust: 'Veuillez ajuster les quantités sur le ou les emplacement(s) appropriée(s) pour tenir compte de la différence de {{difference}}.',\n        createRequest: 'Créer une nouvelle demande?',\n        'delete': 'Etes-vous sûr que vous souhaitez supprimer {{name}}?',\n        itemNotFound: 'L\\'article d\\'inventaire <strong>{{item}}</strong> ne pouvait pas être retrouvé.<br>Si vous voulez créer un nouvel article d\\'inventaire, veuillez saisir les informations ci-dessous. <br>Sinon, appuyez sur le bouton Annuler pour retourner.',\n        loading: 'Chargement des transactions en cours…',\n        purchaseSaved: 'Les achats d\\'inventaire ont été enregistrés avec succès.',\n        noRequests: 'Aucune demande retrouvée.',\n        noItems: 'Aucun article retrouvé.',\n        quantity: 'La quantité totale de <strong>({{quantity}})</strong> ne correspond pas à la quantité totale dans les emplacements <strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Etes-vous sûr de vouloir retirer cet article de cette facture?',\n        removeItemRequest: 'Etes-vous sûr de vouloir supprimer cet article de cette demande?',\n        requestFulfilled: 'La demande d\\'inventaire a été traitée.',\n        requestUpdated: 'La demande d\\'inventaire a été mis à jour.',\n        warning: 'Veuillez remplir les champs obligatoires (marqués d\\'un *) et corriger les erreurs avant d\\'ajouter.'\n      },\n      reports: {\n        rows: {\n          adjustments: 'Ajustements',\n          adjustmentsTotal: 'Ajustements totaux',\n          balanceBegin: 'Solde d\\'ouverture',\n          balanceEnd: 'Solde de clôture',\n          category: 'Catégorie',\n          consumed: 'Utilisé',\n          consumedGik: 'GiK utilisé',\n          consumedGikTotal: 'GiK total utilisé',\n          consumedPuchases: 'Achats utilisés',\n          consumedPurchasesTotal: 'Achats totaux utilisés',\n          consumedTotal: 'Total utilisé',\n          errInFinSum: 'Erreur dans _generateFinancialSummaryReport: ',\n          errInFindPur: 'Erreur dans _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Erreur dans _findInventoryItemsByRequest: ',\n          expensesFor: 'Dépenses pour: ',\n          noAccount: '(Pas de compte)',\n          subtotal: 'Sous-total: ',\n          subtotalFor: 'Sous-total pour {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total pour {{var}}: ',\n          totalPurchases: 'Achats totaux',\n          transfer1: '{{quantity}} de {{location}}',\n          trasnfer2: 'De: {{source}} A: {{target}}'\n        },\n        adjustment: 'Ajustement détaillée',\n        daysSupply: 'Stock restant (en nombre de jours)',\n        expenseDetail: 'Détails des dépenses',\n        expenseSum: 'Résumé des dépenses',\n        expiration: 'Date d\\'expiration',\n        'export': 'Exporter un rapport',\n        fields: 'Champs à inclure',\n        finance: 'Résumé des finances',\n        generate: 'Créer un rapport',\n        invLocation: 'Inventaire par emplacement',\n        invValuation: 'Valorisation de l\\'inventaire',\n        purchaseDetail: 'Détails de l\\'achat',\n        purchaseSum: 'Résumé de l\\'achat',\n        reportType: 'Type de rapport',\n        stockTransferDetail: 'Transfert détaillé du stock',\n        stockTransferSum: 'Résumé du transfert du stock',\n        stockUsageDetail: 'Utilisation détaillée du stock',\n        stockUsageSum: 'Résumé de l\\'utilisation du stock'\n      },\n      titles: {\n        addPurchase: 'Ajouter un achat',\n        addRequest: 'Nouvelle demande',\n        adjustment: 'Ajustement',\n        editPurchase: 'Modifier l\\'achat',\n        editRequest: 'Modifier la demande',\n        inventoryItem: 'Nouvel article d\\'inventaire',\n        inventoryReport: 'Rapport d\\'inventaire',\n        purchaseSaved: 'Achats d\\'inventaire enregistrés',\n        quickAddTitle: 'Nouvel article d\\'inventaire',\n        removeItem: 'Retirer l\\'article',\n        requestFulfilled: 'Demande traitée',\n        requestUpdated: 'Demande mis à jour',\n        transfer: 'Transférer les articles',\n        warning: 'Attention!!!!!'\n      }\n    },\n    imaging: {\n      pageTitle: 'Demandes d\\'imagerie',\n      sectionTitle: 'Imagerie',\n      buttons: {\n        newButton: '+ nouvelle imagerie'\n      },\n      labels: {\n        radiologist: 'Radiologiste',\n        addNewVisit: '--Ajouter une nouvelle visite--'\n      },\n      messages: {\n        noCompleted: 'Aucun article traité retrouvé.'\n      },\n      titles: {\n        completedImaging: 'Imagerie traitée',\n        editTitle: 'Modifier la demande d\\'imagerie',\n        newTitle: 'Nouvelle demande d\\'imagerie'\n      },\n      alerts: {\n        completedTitle: 'Demande d\\'imagerie traitée',\n        completedMessage: 'La demande d\\'imagerie a été traitée.',\n        savedTitle: 'Demande d\\'imagerie enregistrée',\n        savedMessage: 'La demande d\\'imagerie a été enregistrée.'\n      }\n    },\n    medication: {\n      pageTitle: 'Demandes de médicament',\n      sectionTitle: 'Médicament',\n      returnMedication: 'Retourner un médicament',\n      buttons: {\n        dispenseMedication: 'dispenser un médicament',\n        newButton: '+ nouvelle demande',\n        returnMedication: 'retourner un médicament'\n      },\n      titles: {\n        completedMedication: 'Médicament traitée',\n        editMedicationRequest: 'Modifier une demande de médicament',\n        newMedicationRequest: 'Nouvelle demande de médicament'\n      },\n      messages: {\n        createNew: 'Créer une nouvelle demande de médicament?',\n        confirmDeletion: 'Êtes-vous sûr de vouloir supprimer cette demande de médicaments?'\n      },\n      labels: {\n        refills: 'Renouvellements',\n        quantityRequested: 'Quantité demandé',\n        quantityDispensed: 'Quantité dispensé',\n        quantityDistributed: 'Quantité distribué',\n        quantityToReturn: 'Quantité à retourner',\n        returnLocation: 'Emplacement de retour',\n        returnAisle: 'Rayon de retour',\n        returnReason: 'Motif/notes du retour',\n        adjustmentDate: 'Date d\\'ajustement',\n        creditToAccount: 'Créditer le compte'\n      },\n      alerts: {\n        returnedTitle: 'Médicament retourné',\n        returnedMessage: 'Le médicament a été marqué comme retourné.',\n        savedTitle: 'Demande de médicament enregistrée',\n        savedMessage: 'Le dossier de médicament a été enregistré.',\n        fulfilledTitle: 'Demande de médicament traitée'\n      }\n    },\n    appointments: {\n      currentScreenTitle: 'Liste des rendez-vous',\n      editTitle: 'Modifier le rendez-vous',\n      newTitle: 'Nouveau rendez-vous',\n      sectionTitle: 'Rendez-vous',\n      thisWeek: 'Rendez-vous de la semaine',\n      missed: 'Rendez-vous manqués',\n      searchTitle: 'Rechercher les rendez-vous',\n      todayTitle: 'Rendez-vous d\\'aujourd\\'hui',\n      messages: {\n        deleteAppointmentMessage: 'Etes-vous sûr de vouloir supprimer ce rendez-vous?',\n        endTimeLaterThanStart: 'Veuillez sélectionnez une heure de fin plus tard que l\\'heure de début.'\n      },\n      buttons: {\n        newButton: '+ nouveau rendez-vous'\n      }\n    },\n    visits: {\n      edit: {\n        buttons: {\n          newAppointment: 'Nouveau rendez-vous',\n          addDiagnosis: 'Ajoute un diagnostic',\n          newProcedure: 'Nouvelle procédure',\n          newLab: 'Nouveau labo',\n          newImaging: 'Nouvelle imagerie',\n          newMedication: 'Nouveau médicament'\n        },\n        labels: {\n          diagnosis: 'Diagnostic',\n          procedure: 'Procédure',\n          authoredBy: 'Crée par',\n          labs: 'Labos',\n          imaging: 'Imagerie',\n          visitInformation: 'Détails de la visite'\n        }\n      }\n    },\n    labs: {\n      sectionTitle: 'Labos',\n      requestsTitle: 'Demandes de labo',\n      editTitle: 'Modifier la demande de labo',\n      newTitle: 'Nouvelle demande de labo',\n      deleteTitle: 'Supprimer la demande',\n      completedTitle: 'Labos traités',\n      labels: {\n        labType: 'Type de labo',\n        addNewVisit: '--Ajouter une nouvelle visite--'\n      },\n      messages: {\n        noItemsFound: 'Aucun labo retrouvé.',\n        createNewRecord: 'Créer un nouveau dossier?',\n        confirmDeletion: 'Etes-vous sûr de vouloir supprimer cette demande de labo?',\n        noCompleted: 'Aucun article traité retrouvé.'\n      },\n      buttons: {\n        newButton: '+ nouveau labo'\n      },\n      alerts: {\n        requestCompletedTitle: 'Demande de labo traitée',\n        requestCompletedMessage: 'La demande de labo a été traitée.',\n        requestSavedTitle: 'Demande de labo enregistrée',\n        requestSavedMessage: 'La demande de labo a été enregistrée.'\n      }\n    },\n    common: {\n      actions: 'Actions'\n    },\n    patients: {\n      notes: {\n        onBehalfOfLabel: 'De la part de',\n        onBehalfOfCopy: 'de la part de',\n        pleaseSelectAVisit: 'Veuillez sélectionner une visite',\n        noteLabel: 'Note'\n      }\n    }\n  };\n});","define('hospitalrun/tests/locales/fr/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/fr/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/fr/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/pt-BR/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n\n    dashboard: {\n      title: 'O que você gostaria de fazer?'\n    },\n    errors: {\n      inclusion: 'não está na lista',\n      exclusion: 'é reservado',\n      invalid: 'é inválido',\n      confirmation: '{{attribute}} não corresponde',\n      accepted: 'deve ser aceito',\n      empty: 'não pode ser vazio',\n      blank: 'não pode ser branco',\n      present: 'pode ser branco',\n      tooLong: 'é muito longo (quantidade máxima de caracteres é {{count}} )',\n      tooShort: 'é muito curta (quantidade mínima de caracteres é {{count}})',\n      wrongLength: 'o tamanho está errado (são esperados {{count}} caracteres)',\n      notANumber: 'não é um número',\n      notAnInteger: 'deve ser um número inteiro',\n      greaterThan: 'deve ser maior do que {{count}}',\n      greaterThanOrEqualTo: 'deve ser maior ou igual à {{count}}',\n      equalTo: 'deve ser igual à {{count}}',\n      lessThan: 'deve ser menor do que {{count}}',\n      lessThanOrEqualTo: 'deve ser menor ou igual à {{count}}',\n      otherThan: 'deve ser diferente de {{count}}',\n      odd: 'deve ser ímpar',\n      even: 'deve ser até',\n      invalidNumber: 'número não é valido'\n    },\n    navigation: {\n      imaging: 'Imagem',\n      inventory: 'Inventário',\n      patients: 'Pacientes',\n      appointments: 'Compromisso',\n      medication: 'Medicação',\n      labs: 'Laboratórios',\n      billing: 'Faturamento',\n      administration: 'Administração',\n      subnav: {\n        actions: 'Ações',\n        requests: 'Requisições',\n        items: 'Itens',\n        completed: 'Concluídos',\n        newRequest: 'Nova Requisição',\n        inventoryReceived: 'Inventário Recebido',\n        reports: 'Relatórios',\n        patientListing: 'Lista de Pacientes',\n        newPatient: 'Novo Paciente',\n        thisWeek: 'Essa Semana',\n        today: 'Hoje',\n        search: 'Pesquisa',\n        addAppointment: 'Adicionar Compromisso',\n        dispense: 'Dispensar',\n        returnMedication: 'Retorno de Medicação',\n        invoices: 'Faturas',\n        newInvoice: 'Nova Fatura',\n        prices: 'Preços',\n        priceProfiles: 'Perfis de Preços',\n        lookupLists: 'Listas de Pesquisa',\n        addressFields: 'Campos de Endereço',\n        loadDB: 'Carregar BD',\n        users: 'Usuários',\n        newUser: 'Novo Usuário',\n        admittedPatients: 'Pacientes Admitidos',\n        missed: 'Perdidos',\n        userRoles: 'Perfis de Usuário',\n        workflow: 'Workflow'\n      },\n      actions: {\n        logout: 'Sair',\n        login: 'Entrar'\n      },\n      about: 'Sobre HospitalRun'\n    },\n    user: {\n      plusNewUser: '+ novo usuário',\n      usersPageTile: 'Lista de Usuários'\n    },\n    admin: {\n      addressOptions: 'Opções de Endereço',\n      lookupLists: 'Lista de Pesquisas',\n      loadDb: 'Carregar DB',\n      userRoles: 'Perfis de Usuários',\n      users: 'Usuários',\n      address: {\n        address1Label: 'Rótulo Endereço 1',\n        address2Label: 'Rótulo Endereço 2',\n        address3Label: 'Rótulo Endereço 3',\n        address4Label: 'Rótulo Endereço 4',\n        include1Label: 'Rótulo Include 1',\n        include2Label: 'Rótulo Include 2',\n        include3Label: 'Rótulo Include 3',\n        include4Label: 'Rótulo Include 4',\n        titles: {\n          optionsSaved: 'Opções Salvas'\n        },\n        messages: {\n          addressSaved: 'As opções de endereço foram salvas'\n        },\n\n        newTitle: 'Opções de Endereço',\n        editTitle: 'Opções de Endereço',\n        addressLabel: 'Endereço'\n      },\n      loaddb: {\n        progressMessage: 'Por favor aguarde enquanto o seu banco de dados é carregado.',\n        progressTitle: 'Carregando Banco de Dados',\n        displayAlertTitle: 'Selecione o Arquivo para Carregar',\n        displayAlertMessage: 'Por favor Selecione o Arquivo para Carregar.',\n        errorDisplayAlertTitle: 'Erro ao carregar',\n        errorDisplayAlertMessage: 'O banco de dados não foi carregado. O erro foi: {{error}}',\n        editTitle: 'Carregando BD'\n      },\n      lookup: {\n        deleteValueInventoryTypeMedicationTitle: 'Medicação Não Pode ser Excluída',\n        deleteValueInventoryTypeMedicationMessage: 'O tipo de inventário Medicação não pode ser excluído por que é necessário para o Módulo de Medicação.',\n        deleteValueLabPricingTypeProcedureTitle: 'Tipo de Preço Laboratório Não Pode Ser Excluído',\n        deleteValueLabPricingTypeProcedureMessage: 'O tipo de preço Procedimento Laboratorial não pode ser excluído por que é necessário para o Módulo de Laboratório.',\n        deleteValueImagingPricingTypeProcedureTitle: 'Tipo de Preço Imagem Não Pode Ser Excluído',\n        deleteValueImagingPricingTypeProcedureMessage: 'O tipo de preço Imagem não pode ser excluído por que é necessário para o Módulo de Imagem.',\n        deleteValueVisitTypeAdmissionTitle: 'Tipo de Visita Admissão Não Pode Ser Excluído',\n        deleteValueVisitTypeAdmissionMessage: 'O Tipo de Visita Admissão não pode ser excluído por que é necessário para o Módulo de Visitas.',\n        deleteValueVisitTypeImagingTitle: 'Tipo de Visita Imagem Não Pode Ser Excluído',\n        deleteValueVisitTypeImagingMessage: 'O Tipo de Visita Imagem não pode ser excluído por que é necessário para o Módulo de Imagem.',\n        deleteValueVisitTypeLabTitle: 'Tipo de Visita Laboratório Não Pode Ser Excluído',\n        deleteValueVisitTypeLabMessage: 'O Tipo de Visita Laboratório  não pode ser excluído por que é necessário para o Módulo de Laboratório',\n        deleteValueVisitTypePharmacyTitle: 'Tipo de Visita Farmácia Não Pode Ser Excluído',\n        deleteValueVisitTypePharmacyMessage: 'Tipo de Visita Farmácia não pode ser excluído por que é necessário para o Módulo de Medicação.',\n        alertImportListTitle: 'Selecione o arquivo para importação',\n        alertImportListMessage: 'Por favor Selecione o arquivo para importação.',\n        alertImportListSaveTitle: 'Lista Importdada',\n        alertImportListSaveMessage: 'A lista de pesquisa foi importada.',\n        alertImportListUpdateTitle: 'Lista Salva',\n        alertImportListUpdateMessage: 'A lista de pesquisa foi salva.',\n        pageTitle: 'Listas de Pesquisa',\n        edit: {\n          template: {\n            addTitle: 'Adicionar Valor',\n            editTitle: 'Editar Valor',\n            updateButtonTextAdd: 'Adicionar',\n            updateButtonTextUpdate: 'Atualizar',\n            labelTitle: 'Valor'\n          }\n        },\n        anesthesiaTypes: 'Tipos de Anestesia',\n        anesthesiologists: 'Anestesiologista',\n        billingCategories: 'Categorias de Faturamento',\n        clinicList: 'Localização de Clínicas',\n        countryList: 'Países',\n        diagnosisList: 'Diagnósticos',\n        cptCodeList: 'Códigos CPT',\n        expenseAccountList: 'Contas de Despesas',\n        aisleLocationList: 'Localização de Corredores no Inventário',\n        warehouseList: 'Locais de Inventário',\n        inventoryTypes: 'Tipos de Inventário',\n        imagingPricingTypes: 'Tipos de Preço Imagem',\n        labPricingTypes: 'Tipos de Preço Laboratório',\n        patientStatusList: 'Lista de Situação do Paciente',\n        physicianList: 'Médicos',\n        procedureList: 'Procedimentos',\n        procedureLocations: 'Localização de Procedimentos',\n        procedurePricingTypes: 'Tipos de Preço Procedimento',\n        radiologists: 'Radiologista',\n        unitTypes: 'Tipos de Unidade',\n        vendorList: 'Fornecedor',\n        visitLocationList: 'Localização dos Visitantes',\n        visitTypes: 'Tipos de Visita',\n        wardPricingTypes: 'Tipos de Preços Enfermaria'\n      },\n      roles: {\n        capability: {\n          admin: 'Administração',\n          loadDb: 'Carregar Banco de Dados',\n          updateConfig: 'Atualizar Configurações',\n          appointments: 'Compromissos',\n          addAppointment: 'Adicionar Compromissos',\n          billing: 'Faturamentos',\n          addCharge: 'Adicionar Cobrança',\n          addPricing: 'Adicionar Preço',\n          addPricingProfile: 'Adicionar Perfil de Preço',\n          addInvoice: 'Adicionar Fatura',\n          addPayment: 'Adicionar Pagamentos',\n          deleteInvoice: 'Excluir Fatura',\n          deletePricing: 'Excluir Preço',\n          deletePricingProfile: 'Excluir Perfil de Preço',\n          editInvoice: 'Editar Fatura',\n          invoices: 'Faturas',\n          overrideInvoice: 'Substituir Fatura',\n          pricing: 'Preço',\n          patients: 'Pacientes',\n          addDiagnosis: 'Adicionar Diagnóstico',\n          addPhoto: 'Adicionar Foto',\n          addPatient: 'Adicionar Paciente',\n          addProcedure: 'Adicionar Procedimento',\n          addVisit: 'Adicionar Visita',\n          addVitals: 'Adicionar Sinais Vitais',\n          admitPatient: 'Admitir Paciente',\n          deletePhoto: 'Excluir Paciente',\n          deletePatient: 'Excluir Paciente',\n          deleteAppointment: 'Excluir Compromisso',\n          deleteDiagnosis: 'Excluir Diagnóstico',\n          deleteProcedure: 'Excluir Procedimento',\n          deleteSocialwork: 'Excluir Trabalho Social',\n          deleteVitals: 'Excluir Sinais Vitais',\n          deleteVisit: 'Excluir Visita',\n          dischargePatient: 'Alta do Paciente',\n          patientReports: 'Relatório do Paciente',\n          visits: 'Visita',\n          medication: 'Medicação',\n          addMedication: 'Adicionar Medicação',\n          deleteMedication: 'Excluir Medicação',\n          fulfillMedication: 'Preencher Medicação',\n          labs: 'Laboratório',\n          addLab: 'Adicionar Laboratório',\n          completeLab: 'Laboratório Concluído',\n          deleteLab: 'Excluir Laboratório',\n          imaging: 'Imagem',\n          addImaging: 'Adicionar Imagem',\n          completeImaging: 'Imagem Concluída',\n          deleteImaging: 'Excluir Imagem',\n          inventory: 'Inventário',\n          addInventoryRequest: 'Adicionar Requisição de Inventário',\n          addInventoryItem: 'Adicionar Item de Inventário',\n          addInventoryPurchase: 'Adicionar Compra de Inventário',\n          adjustInventoryLocation: 'Ajustar Localização de Inventário',\n          deleteInventoryItem: 'Excluir Item de Inventário',\n          fulfillInventory: 'Preencher Inventário',\n          userRoles: 'Perfis de Usuários'\n        },\n        messages: {\n          roleSaved: 'O perfil {{roleName}} foi salvo.'\n        },\n        titles: {\n          roleSaved: 'Perfil Salvo'\n        }\n      },\n      workflow: {\n        admissionDepositLabel: 'Depósito de Admissão é exigido',\n        clinicPrepaymentLabel: 'Pagamento Antecipado da Clínica é exigido',\n        followupPrepaymentLabel: 'Pagamento Antecipado do Acompanhamento é exigido',\n        outpatientLabLabel: 'Pagamento Antecipado do Laboratório Ambulatorial é exigido',\n        outpatientImagingLabel: 'Pagamento Antecipado do Ambulatorio de Imagem é exigido',\n        outpatientMedicationLabel: 'Pagamento Antecipado do Ambulatorio de Medicação é exigido',\n\n        titles: {\n          optionsSaved: 'Opções Salvas'\n        },\n        messages: {\n          optionsSaved: 'As opções de WorkFlow foram salvas'\n        },\n\n        newTitle: 'Opções de Workflow',\n        editTitle: 'Opções de Workflow',\n        workflowLabel: 'Workflow'\n\n      }\n    },\n    labels: {\n      cptcode: 'Código CPT*',\n      loading: 'Carregando',\n      name: 'Nome',\n      note: 'Note',\n      patient: 'Paciente',\n      prescriber: 'Médico Responsável pela Prescrição',\n      quantity: 'Quantidade',\n      requestedOn: 'Solicitado em',\n      date: 'Data',\n      dateOfBirth: 'Data de Nascimento',\n      dateOfBirthShort: 'DtNasc',\n      dateRequested: 'Data da Requisição',\n      dateCompleted: 'Data da Conclusão',\n      description: 'Descrição',\n      requestedBy: 'Requisitado por',\n      fulfill: 'Preencha',\n      fulfillRequest: 'Preencha a Requisição',\n      fulfillRequestNow: 'Preencha a Requisição Agora',\n      actions: 'Ações',\n      action: 'Ação',\n      notes: 'Notas',\n      edit: 'Editar',\n      imageOrders: 'Pedido de Imagem',\n      labOrders: 'Pedidos de Laboratório',\n      patientHistory: 'Histórico do Paciente',\n      imagingType: 'Tipo de Imagem',\n      result: 'Resultado',\n      results: 'Resultados',\n      visit: 'Visita',\n      requests: 'Requisições',\n      completed: 'Completo',\n      id: 'Id',\n      on: 'ligado',\n      type: 'Tipo',\n      sex: 'Sexo',\n      age: 'Idade',\n      search: 'Pesquisa',\n      username: 'Usuário',\n      email: 'Email',\n      role: 'Papel',\n      'delete': 'Excluir',\n      userCanAddNewValue: 'O usuário pode adicionar novos valores',\n      value: 'Valor',\n      lookupType: 'Tipo de Pesquisa',\n      importFile: 'Importar Arquivo',\n      fileLoadSuccessful: 'Arquivo Carregado com Sucesso',\n      fileToLoad: 'Carregar Arquivo',\n      startTime: 'Hora Início',\n      startDate: 'Data de Início',\n      endTime: 'Hora de Término',\n      endDate: 'Data de Término',\n      docRead: 'Documentos Lidos',\n      docWritten: 'Documentos Escritos',\n      displayName: 'Nome de Exibição',\n      password: 'Senha',\n      editUser: 'Editar Usuário',\n      newUser: 'Novo Usuário',\n      deleteUser: 'Excluir Usuário',\n      medication: 'Medicação',\n      status: 'Situação',\n      addNewOutpatientVisit: '--Adicionar Nova Visita Ambulatorial--',\n      prescription: 'Prescrição',\n      prescriptionDate: 'Data da Prescrição',\n      billTo: 'Conta Para',\n      pullFrom: 'Puxar De',\n      fulfilled: 'Preenchido',\n      deleteRequest: 'Excluir Requisição',\n      location: 'Localização',\n      provider: 'Fornecedor',\n      'with': 'Com',\n      allDay: 'Todo Dia',\n      physician: 'Médico',\n      assisting: 'Ajudante',\n      anesthesia: 'Anestesia',\n      procedures: 'Procedimentos',\n      number: 'Número',\n      billDate: 'Data da Conta',\n      balanceDue: 'Saldo Devedor',\n      amount: 'Quantidade',\n      datePaid: 'Data de Pagamento',\n      creditTo: 'Crédito Para',\n      invoiceId: 'ID da Fatura',\n      lineItems: 'Itens de Linha',\n      discount: 'Desconto',\n      excess: 'Excesso',\n      price: 'Preço',\n      total: 'Total',\n      expenseTo: 'Despesa Para',\n      grandTotal: 'Total Geral',\n      remarks: 'Observações',\n      payments: 'Pagamentos',\n      category: 'Categoria',\n      department: 'Departamento',\n      address: 'Endereço',\n      country: 'País'\n    },\n    messages: {\n      noItemsFound: 'Nenhum item encontrado',\n      noHistoryAvailable: 'Histórico não disponível.',\n      createNewRecord: 'Criar uma nova gravação?',\n      createNewUser: 'Criar um novo usuário?',\n      noUsersFound: 'Nenhum usuário encontrado.',\n      areYouSureDelete: 'Você tem certeza que deseja excluir o usuário {{user}}?',\n      userHasBeenSaved: 'O usuário foi salvo.',\n      userSaved: 'Usuário Salvo',\n      onBehalfOf: 'em nome de',\n      newPatientHasToBeCreated: 'Um novo paciente precisa ser criado... Por favor aguarde...',\n      noNotesAvailable: 'Nenhuma nota clinica adicional está diponível para essa visita.',\n      sorry: 'Desculpe, algo deu errado...',\n      forAuthorizedPersons: 'Este relatório é somente para pessoas autorizadas.'\n    },\n    alerts: {\n      pleaseWait: 'Por Favor Aguarde'\n    },\n    headings: {\n      chargedItems: 'Itens Carregados'\n    },\n    buttons: {\n      addItem: 'Adicionar Item',\n      complete: 'Completo',\n      cancel: 'Cancelar',\n      close: 'Fechar',\n      returnButton: 'Retornar',\n      barcode: 'Código de Barras',\n      add: 'Adicionar',\n      update: 'Atualizar',\n      ok: 'Ok',\n      fulfill: 'Preencher',\n      remove: 'Remover',\n      'delete': 'Excluir',\n      newUser: 'Novo Usuário',\n      addValue: 'Adicionar Valor',\n      newNote: 'Nova Nota',\n      'import': 'Importar',\n      loadFile: 'Carregar Arquivo',\n      newRequest: 'Nova Requisição',\n      allRequests: 'Todas as Requisições',\n      dispense: 'Dispensar',\n      newItem: '+ novo item',\n      newRequestPlus: '+ nova requisição',\n      addVisit: 'Adicionar Visita',\n      search: 'Pesquisa',\n      edit: 'Editar',\n      addLineItem: 'Adicionar Item de Linha'\n    },\n    login: {\n      messages: {\n        signIn: 'inscreva-se',\n        error: 'Nome de usuário ou senha está incorreta.'\n      },\n      labels: {\n        password: 'Senha',\n        username: 'Usuário',\n        signIn: 'Entrar'\n      }\n    },\n    loading: {\n      progressBar: {\n        progress: '{{progressBarValue}}% concluído'\n      },\n      messages: {\n        0: 'A velocidade de vôo borboleta superior é de 12 milhas por hora. Alguns meses pode voar 25 milhas por hora!',\n        1: 'As corujas são os únicos pássaros que podem ver a cor azul.',\n        2: 'Os gatos têm mais de 100 sons vocais; cachorros têm apenas 10.',\n        3: 'Os Humanos usam um total de 72 músculos diferentes na fala.',\n        4: 'Mais de 1.000 idiomas diferentes são falados no continente africano',\n        5: 'Uma eritrofobo é alguém que fica vermelho facilmente.',\n        6: 'A fobia mais comum do mundo é a Odinofobia que é o medo da dor.',\n        7: 'Seu corpo utiliza 300 músculo para manter o equilíbrio quando você está parado.',\n        8: 'Alguns sapos podem ser congelados e depois de serem descongelados continuarem a viver.',\n        9: 'Nossos olhos estão sempre do mesmo tamanho de quando nascemos, mas nossas orelhas e nariz nunca param de crescer.',\n        10: 'Sua língua é o único músculo em seu corpo qu está ligado apenas em uma extremidade.',\n        11: 'Camelos tem três pálpebras para se protegerem das tempestades de areia.'\n      }\n    },\n    inventory: {\n      edit: {\n        cost: 'Preço por Unidade:',\n        delivered: 'Entregue a:',\n        location: 'Localização Ajustada:',\n        prescription: 'Prescrição para:',\n        pulled: 'Retirado de:',\n        quantity: 'Quantidade na Conclusão:',\n        reason: 'Motivo:',\n        returned: 'Devolvido do Paciente:',\n        transferredFrom: 'Transferido de:',\n        transferredTo: 'Transferido para:'\n      },\n      labels: {\n        action: 'Ação',\n        add: 'Adicionar',\n        adjust: 'Ajustar',\n        adjustmentDate: 'Data de Ajuste',\n        adjustmentFor: 'Ajuste Para',\n        adjustmentType: 'Tipo de Ajuste',\n        aisle: 'Corredor',\n        aisleLocation: 'Localização do Corredor',\n        allInventory: 'Todo Inventário',\n        billTo: 'Conta Para',\n        consumePurchases: 'Compras para Consumo',\n        consumptionRate: 'Taxa de Consumo',\n        cost: 'Preço',\n        costPerUnit: 'Preço por Unidade',\n        crossReference: 'Referência Cruzada',\n        currentQuantity: 'Quantidade Atual',\n        dateCompleted: 'Data de Conclusao',\n        dateEffective: 'Data Efetiva',\n        dateEnd: 'Data de Término',\n        dateStart: 'Data de Início',\n        dateReceived: 'Data Recebida',\n        dateTransferred: 'Data Transferida',\n        daysLeft: 'Dias Restantes',\n        deliveryAisle: 'Corredor de Entrega',\n        deliveryLocation: 'Local de Entrega',\n        distributionUnit: 'Centro de Distribuição',\n        deleteItem: 'Deletar Item',\n        details: 'Detalhes',\n        editItem: 'Editar Item',\n        expense: 'Despesa para',\n        expirationDate: 'Data de Expiração',\n        fulfillRequest: 'Preencher Requisição',\n        fulfillRequestNow: 'Preencher Requisição Agora',\n        gift: 'Doação em Espécie',\n        giftUsage: 'Uso de Doação em Espécie',\n        giftInKindNo: 'N',\n        giftInKindYes: 'S',\n        inventoryConsumed: 'Inventário Consumido',\n        inventoryItem: 'Item de Inventário',\n        inventoryObsolence: 'Obsolescência de Inventário',\n        invoiceItems: 'Itens da Fatura',\n        invoiceLineItem: 'Item de Linha da Fatura',\n        invoiceNumber: 'Número da Fatura',\n        item: 'Item',\n        items: 'Itens',\n        itemNumber: 'Número de Item',\n        location: 'Localização',\n        locations: 'Localizações',\n        name: 'Nome',\n        markAsConsumed: 'Marcar como Consumido',\n        newItem: 'Novo Item',\n        allItems: 'Todos os Itens',\n        originalQuantity: 'Quantidade Original',\n        print: 'Imprimir',\n        printBarcode: 'Imprimir Código Barras',\n        printer: 'Impressora',\n        pullFrom: 'Retirar de',\n        purchases: 'Compras',\n        purchaseCost: 'Custo da Compra',\n        purchaseInfo: 'Informações da Compra',\n        quantity: 'Quantity ({{unit}})',\n        quantityAvailable: 'Quantity Available',\n        quantityOnHand: 'Quantidade on Hand',\n        quantityRequested: 'Quantidade Solicitada',\n        rank: 'Classificação',\n        reason: 'Motivo',\n        remove: 'Remover',\n        reorderPoint: 'Ponto de Reabastecimento',\n        requestedItems: 'Itens Solicitados',\n        salePricePerUnit: 'Preço de Venda por Unidade',\n        save: 'Salvar',\n        serialNumber: 'Lote/Número de Série',\n        total: 'Total',\n        totalCost: 'Preço Total',\n        totalReceived: 'Total Recebido: {{total}}',\n        transaction: 'Transação',\n        transactions: 'Transações',\n        transfer: 'Transferir',\n        transferFrom: 'Transferir de',\n        transferTo: 'Transferir para Localização',\n        transferToAisle: 'Transferir para Localização de Corredor',\n        unit: 'Unidade',\n        unitCost: 'Preço Unitário',\n        vendor: 'Fornecedor',\n        vendorItemNumber: 'Número de Item do Fornecedor',\n        xref: 'RefX'\n      },\n      messages: {\n        adjust: 'Por favor ajustar as quantidades no(s) local(is) apropriado(s) da conta para a diferença de {{difference}}.',\n        createRequest: 'Criar uma nova requisição?',\n        'delete': 'Você tem certeza que deseja excluir {{name}}?',\n        itemNotFound: 'O item de inventário <strong>{{item}}</strong> não pode ser encontrado.<br>Se você quiser criar um novo item de inventário, preencha as informações abaixo.<br>Caso o contrário, pressione o botão Cancelar para voltar.',\n        loading: 'Carregando transações ...',\n        purchaseSaved: 'As compras de inventário foram salvas com sucesso.',\n        noRequests: 'Nenhuma requisição encontrada.',\n        noItems: 'Nenhum item encontrado.',\n        quantity: 'A quantidade total de <strong>({{quantity}})</strong> não corresponde com a quantidade total nas localizações<strong>({{locationQuantity}})</strong>.',\n        removeItem: 'Você tem certeza de que deseja remover este item desta fatura?',\n        removeItemRequest: 'Você tem certeza de que deseja remover este item desta requisição?',\n        requestFulfilled: 'A requisição de invenário foi preenchida.',\n        requestUpdated: 'A requisição de invenário foi atualizada.',\n        warning: 'Por favor preencher campos obrigatório (marcado(s) com *) e corrija os erros antes de adicionar.'\n      },\n      reports: {\n        rows: {\n          adjustments: 'Ajustes',\n          adjustmentsTotal: 'Total dos Ajustes',\n          balanceBegin: 'Balanço Inicial',\n          balanceEnd: 'Balanço Final',\n          category: 'Categoria',\n          consumed: 'Consumidos',\n          consumedGik: 'Doações Consumidas',\n          consumedGikTotal: 'Total Doações Consumidas',\n          consumedPuchases: 'Compras Consumidas',\n          consumedPurchasesTotal: 'Total Compras Consumidas',\n          consumedTotal: 'Total Consumido',\n          errInFinSum: 'Erro em _generateFinancialSummaryReport: ',\n          errInFindPur: 'Erro em _findInventoryItemsByPurchase: ',\n          errInFindReq: 'Erro em _findInventoryItemsByRequest: ',\n          expensesFor: 'Despesas para: ',\n          noAccount: '(Sem Conta)',\n          subtotal: 'Subtotal: ',\n          subtotalFor: 'Subtotal para {{category}} - {{account}}: ',\n          total: 'Total: ',\n          totalFor: 'Total para {{var}}: ',\n          totalPurchases: 'Total de Compras',\n          transfer1: '{{quantity}} de {{location}}',\n          trasnfer2: 'De: {{source}} Para: {{target}}'\n        },\n        adjustment: 'Ajuste Detalhado',\n        daysSupply: 'Dias de Abastecimento Deixado no Estoque',\n        expenseDetail: 'Despesas Detalhadas',\n        expenseSum: 'Sumário de Despesas',\n        expiration: 'Data de Expiração',\n        'export': 'Exportar Relatório',\n        fields: 'Campos para Incluir',\n        finance: 'Sumário Financeiro',\n        generate: 'Gerar Relatório',\n        invLocation: 'Inventário por Localização',\n        invValuation: 'Valorização do Inventário',\n        purchaseDetail: 'Compras Detalhadas',\n        purchaseSum: 'Sumário de Compras',\n        reportType: 'Tipo de Relatório',\n        stockTransferDetail: 'Tranferências de Estoque Detalhadas',\n        stockTransferSum: 'Sumário de Tranferências de Estoque',\n        stockUsageDetail: 'Uso de Estoque Detalhado',\n        stockUsageSum: 'Sumário de Uso de Estoque'\n      },\n      titles: {\n        addPurchase: 'Adicionar Compra',\n        addRequest: 'Nova Requisição',\n        adjustment: 'Ajuste',\n        editPurchase: 'Editar Compra',\n        editRequest: 'Editar Requisição',\n        inventoryItem: 'Novo Item de Inventário',\n        inventoryReport: 'Relatório de Inventário',\n        purchaseSaved: 'Compras de Invenários Salvas',\n        quickAddTitle: 'Novo Item de Inventário',\n        removeItem: 'Remover Item',\n        requestFulfilled: 'Requisição Preenchida',\n        requestUpdated: 'Requisição Atualizada',\n        transfer: 'Itens de Transferência',\n        warning: 'Atenção!!!!!'\n      }\n    },\n    imaging: {\n      pageTitle: 'Requisição de imagens',\n      sectionTitle: 'Imagem',\n      buttons: {\n        newButton: '+ nova imagem'\n      },\n      labels: {\n        radiologist: 'Radiologista',\n        addNewVisit: '--Adicionar novo visitante--'\n      },\n      messages: {\n        'delete': 'Você tem certeza que deseja excluir essa requisição de imagem?',\n        noCompleted: 'Nenhum item completo encontrado.'\n      },\n      titles: {\n        completedImaging: 'Imagem completa',\n        editTitle: 'Requisição de edição de imagem',\n        newTitle: 'Nova requisição de imagem'\n      },\n      alerts: {\n        completedTitle: 'Requisição de Imagem Completa',\n        completedMessage: 'A requisição de imagem esta completa.',\n        savedTitle: 'Requisição de imagem salva',\n        savedMessage: 'A requisição de imagem foi salva.'\n      }\n    },\n    medication: {\n      pageTitle: 'Requisição de Medicação',\n      sectionTitle: 'Medicação',\n      returnMedication: 'Retorno de Medicação',\n      buttons: {\n        dispenseMedication: 'dispensar medicação',\n        newButton: '+ nova requisição',\n        returnMedication: 'retorno de medicação'\n      },\n      titles: {\n        completedMedication: 'Medicação Concluída',\n        editMedicationRequest: 'Editar Requisição de Medicação',\n        newMedicationRequest: 'Nova Requisição de Medicação'\n      },\n      messages: {\n        createNew: 'Criar uma nova requisição de medicação?',\n        confirmDeletion: 'Você tem certeza que deseja excluir essa requisição de medicação?'\n      },\n      labels: {\n        refills: 'Recargas',\n        quantityRequested: 'Quantidade Requisitada',\n        quantityDispensed: 'Quantidade Dispensada',\n        quantityDistributed: 'Quantidade Distribuída',\n        quantityToReturn: 'Quantidade Retornada',\n        returnLocation: 'Localização de Retorno',\n        returnAisle: 'Corredor de Retorno',\n        returnReason: 'Razão/Notas de Retorno',\n        adjustmentDate: 'Data de Ajuste',\n        creditToAccount: 'Crédito na Conta'\n      },\n      alerts: {\n        returnedTitle: 'Medicação Retornada',\n        returnedMessage: 'A medicação foi marcada como retornada.',\n        savedTitle: 'Requisição de Medicação foi Salva',\n        savedMessage: 'O registro de medicação foi salvo.',\n        fulfilledTitle: 'Requisição de Medicação Preenchido'\n      }\n    },\n    appointments: {\n      currentScreenTitle: 'Lista de Compromisso',\n      editTitle: 'Editar Compromisso',\n      newTitle: 'Novo Compromisso',\n      sectionTitle: 'Compromissos',\n      thisWeek: 'Compromissos dessa Semana',\n      missed: 'Compromissos Esquecidos',\n      searchTitle: 'Pesquisar Compromissos',\n      todayTitle: 'Compromissos de Hoje',\n      messages: {\n        deleteAppointmentMessage: 'Você tem certeza que deseja excluir esse compromisso?',\n        endTimeLaterThanStart: 'Por favor, selecione um horário de término mais tarde do que a hora de início.'\n      },\n      buttons: {\n        newButton: '+ novo compromisso'\n      },\n      labels: {\n        selectedStartingDate: 'Mostrar Compromisso em ou após'\n      }\n    },\n    vitals: {\n      messages: {\n        'delete': 'Você tem certeza que deseja excluir esses sinais vitais?'\n      },\n      labels: {\n        dateRecorded: 'Data de Gravação',\n        temperature: 'Temperatura',\n        weight: 'Peso',\n        height: 'Altura',\n        sbp: 'PAS',\n        dbp: 'PAD',\n        heartRate: 'Frequência Cardíaca',\n        respiratoryRate: 'Frequência Respiratória'\n      }\n    },\n    visits: {\n      titles: {\n        additionalDiagnoses: 'Diagnósticos Adicionais'\n      },\n      messages: {\n        'delete': 'Você tem certeza que deseja excluir essa visita?'\n      },\n      buttons: {\n        newProcedure: 'Novo Procedimento',\n        newLab: 'Novo Laboratório',\n        newAppointment: 'Novo Compromisso',\n        addDiagnosis: 'Adicionar Diagnóstico',\n        newImaging: 'Nova Imagem',\n        newMedication: 'Nova Medicação',\n        newVitals: 'Novos Sinais Vitais'\n      },\n      labels: {\n        diagnosis: 'Diagnósticos',\n        procedure: 'Procedimentos',\n        authoredBy: 'Autorizado Por',\n        labs: 'Laboratório',\n        imaging: 'Imagem',\n        visitInformation: 'Imformação de Visita',\n        examiner: 'Examinador',\n        medication: 'Medicação',\n        status: 'Situação de Visita',\n        admittingDiagnosis: 'Diagnósticos de Admisão',\n        finalDiagnosis: 'Diagnósticos de Finais/Faturamento',\n        visitType: 'Tipo de Visita',\n        vitals: 'Sinais Vitais'\n      }\n    },\n    labs: {\n      sectionTitle: 'Laboratório',\n      requestsTitle: 'Requisições de Laboratório',\n      editTitle: 'Editar Requisição de Laboratório',\n      newTitle: 'Nova Requisição de Laboratório',\n      deleteTitle: 'Excluir Requisição',\n      completedTitle: 'Laboratórios Concluídos',\n      labels: {\n        labType: 'Tipo de Laboratório',\n        addNewVisit: '--Adicionar Nova Visita--'\n      },\n      messages: {\n        noItemsFound: 'Nenhum laboratório encontrado.',\n        createNewRecord: 'Criar novo registro?',\n        confirmDeletion: 'VOcê tem certeza que deseja excluir essa requisição de laboratório?',\n        noCompleted: 'Items concluídos não econtrados.'\n      },\n      buttons: {\n        newButton: '+ novo laboratório'\n      },\n      alerts: {\n        requestCompletedTitle: 'Requisições de Laboratório Concluída',\n        requestCompletedMessage: 'Requisição de laboratório foi concluída.',\n        requestSavedTitle: 'Requisição de Laboratório Salva',\n        requestSavedMessage: 'A requisição de laboratório foi salva.'\n      }\n    },\n    patients: {\n      navigation: {\n        photos: 'Fotos',\n        general: 'Geral',\n        history: 'Histórico',\n        appointments: 'Compromissos',\n        visits: 'Visitas',\n        medication: 'Medicação',\n        imaging: 'Imagem',\n        labs: 'Laboratórios',\n        socialWork: 'Assitência Social'\n      },\n      titles: {\n        expenses: 'Despesas',\n        additionalContacts: 'Contatos Adicionais',\n        familyInformation: 'Informação Familiar',\n        'delete': 'Excluir Paciente',\n        'new': 'Novo Paciente',\n        edit: 'Editar Paciente',\n        patient: 'Relatório de Paciente',\n        patientListing: 'Lista de Pacientes',\n        addPhoto: 'Adicionar Foto',\n        editPhoto: 'Editar Foto',\n        socialWork: 'Despesa',\n        familyInfo: 'Informação Familiar',\n        deleteFamilyMember: 'Excluir Membro Familiar',\n        deleteExpense: 'Excluir Despesa',\n        deletePhoto: 'Excluir Foto',\n        deleteContact: 'Excluir Contato',\n        savedPatient: 'Paciente Salvo'\n      },\n      messages: {\n        areYouSureDelete: 'Você tem certeza que deseja excluir este(a) {{object}}?',\n        deletePatient: 'Você tem certeza que deseja excluir {{firstName}} {{lastName}}?',\n        noPatientsFound: 'Nenhum paciente encontrado.',\n        savedPatient: 'O registro de paciente para {{displayName}} foi salvo.',\n        notFoundQuickAdd: 'O paciente <strong>{{patientFullName}}</strong> não pode ser encontrato.  Se você deseja cadastras um novo paciente, preencha as informações abaixo.  Caso contrário clique em Cancelar para voltar.',\n        createNewPatient: 'Criar novos registro de paciente?'\n      },\n      buttons: {\n        addExpense: 'Adicionar Despesa',\n        addContact: 'Adicionar Contato',\n        newLab: 'Novo Laboratório',\n        newVisit: 'Nova Visita',\n        newMedication: 'Nova Medicação',\n        newImaging: 'Nova Imagem',\n        addFamilyMember: 'Adicionar Membro Familiar',\n        newPhoto: 'Nova Foto',\n        newAppointment: 'Novo Compromisso',\n        backToPatients: 'Voltar para Lista de Pacientes',\n        newPatient: '+ novo paciente'\n      },\n      headings: {\n        history: 'Histórico',\n        historySince: 'Histórico Desde'\n      },\n      labels: {\n        primaryDiagnosis: 'Diagnósticos Primários',\n        secondaryDiagnosis: 'Diagnósticos Secundários',\n        monthlyCost: 'Custo Mensal',\n        totalMontlyExpense: 'Total de Despesas Mensais',\n        patientType: 'Tipo de Paciente',\n        admissionDate: 'Data de Admissão',\n        patientDays: 'Dias do Paciente',\n        dischargeDate: 'Data de Pagamento',\n        discharge: 'Pagamento',\n        admit: 'Admitir',\n        relationships: 'Relação',\n        phone: 'Telefone',\n        email: 'Email',\n        firstName: 'Primeiro Nome',\n        middleName: 'Nome do meio',\n        lastName: 'Último Nome',\n        sex: 'Sexo',\n        dob: 'DatNasc',\n        dateOfBirth: 'Data de Nascimento',\n        placeOfBirth: 'Local de Nascimento',\n        sources: 'Fontes',\n        costs: 'Custos',\n        civilStatus: 'Estado Civil',\n        relationship: 'Relação com Paciente',\n        education: 'Educação',\n        occupation: 'Ocupação',\n        income: 'Renda',\n        insurance: 'Seguro',\n        dateProcessed: 'Data de Processamento',\n        status: 'Situação do Paciente',\n        externalPatientId: 'ID de Paciente Externo',\n        bloodType: 'Tipo Sanguíneo',\n        clinic: 'Site(Filial) da Clínica',\n        referredBy: 'Indicado Por',\n        referredDate: 'Data de Indicação',\n        religion: 'Religião',\n        parent: 'Responsável Legal'\n      },\n      notes: {\n        newNote: 'Nova Nota para',\n        updateNote: 'Atualizando Nota de',\n        onBehalfOfLabel: 'Em Nome de',\n        onBehalfOfCopy: 'em nome de',\n        pleaseSelectAVisit: 'Por favor selecione uma visita'\n      }\n    },\n    billing: {\n      alerts: {\n        noInvoiceFound: 'Nenhuma fatura encontrada',\n        deleteItem: 'Você tem certeza que deseja excluir {{item}}?',\n        noPricingItems: 'Nenhum item de preço encontrado.',\n        noPricingProfiles: 'Nenhum perfil de preço encontrado.'\n      },\n      buttons: {\n        createInvoice: 'Criar nova fatura?',\n        addOverride: 'Adicionar Substituir'\n      },\n      labels: {\n        externalInvoiceNumber: 'Fatura Externa #',\n        paymentProfile: 'Perfil de Pagamento',\n        actualCharges: 'Cobranças Atuais',\n        insurance: 'Seguro Nacional',\n        hmoCom: 'HMO/COM',\n        paymentsDeposits: 'Pagamentos/Depositos',\n        pricingPanelOverrides: 'Substituição e Perfil de Preços',\n        pricingProfile: 'Perfil de Preços',\n        discountAmount: 'Quantidade de Desconto',\n        discountPercentage: 'Porcentagem de Desconto'\n      }\n    },\n    print: {\n      invoice: {\n        labels: {\n          patientName: 'NOME DO PACIENTE:',\n          patientId: 'PACIENTE #:',\n          patientAge: 'IDADE:',\n          patientAddress: 'ENDEREÇO:',\n          dateAdmitted: 'ADMITIDO:',\n          dateDischarged: 'PAGAMENTO:',\n          dischargeNotes: 'Notas de Pagamento:',\n          remarks: 'Observações:',\n          billedBy: 'Faturado por:',\n          billedDate: 'Data de Faturamento:',\n          spacer: '__________________________________________'\n        },\n        messages: {\n          whereConducted: 'foram deduzidos durante minha internação'\n        },\n        titles: {\n          patientMember: 'Paciente-Membro',\n          relContact: 'Relações/Contato',\n          patients: 'DO PACIENTE',\n          billingStatement: 'DECLARAÇÃO DO FATURAMENTO'\n        }\n      }\n    },\n    procedures: {\n      titles: {\n        addChargeItem: 'Adicionar Item de Cobrança',\n        deleteChargeItem: 'Excluir Item de Cobrança',\n        editChargeItem: 'Editar Item de Cobrança',\n        medicationUsed: 'Medicação Usada',\n        deleteMedicationUsed: 'Excluir Medicação Usada',\n        addMedicationUsed: 'Adicionar Medicação Usada',\n        editMedicationUsed: 'Editar Medicação Usada',\n        edit: 'Editar Procedimento',\n        saved: 'Procedimento Salvo',\n        'new': 'Novo Procedimento'\n      },\n      labels: {\n        medicationUsed: 'Medicação Usada'\n      },\n      messages: {\n        deleteMedication: 'Você tem certeza que deseja excluir esta medicação?',\n        'delete': 'Você tem certeza que deseja excluir este procedimento?',\n        saved: 'O registro de procedimento foi salvo.'\n      },\n      buttons: {\n        addMedication: 'Adicionar Medicação'\n      }\n    },\n    components: {\n      chargesByTypeTab: {\n        charges: 'cobranças'\n      },\n      takePhoto: {\n        how: 'Como você quer adicionar um Foto?',\n        takePhoto: 'Tirar um Foto',\n        uploadPhoto: 'Upload de Foto',\n        uploadFile: 'Upload de Arquivo',\n        camera: 'Câmera',\n        photo: 'foto',\n        preview: 'pré visualização'\n      },\n      quantityConv: {\n        unit: 'Unidade',\n        conversion: 'O que significa contém 1 {{name}}?'\n      },\n      quantityCalc: {\n        result: '{{targetUnit}} total: {{calculated}}'\n      },\n      priceList: {\n        charges: 'cobranças de {{pricingType}}'\n      }\n    }\n  };\n});","define('hospitalrun/tests/locales/pt-BR/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/pt-BR/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/pt-BR/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/ru/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    dashboard: {\n      title: 'Что вы хотите сделать?'\n    },\n    labels: {\n      name: 'Имя',\n      patient: 'Пациент',\n      quantity: 'Количество',\n      requestedOn: 'Запрошен',\n      dateRequested: 'Дата Запроса',\n      dateCompleted: 'Дата Выполнения',\n      requestedBy: 'Запрошен',\n      fulfill: 'Отправить',\n      actions: 'Действия',\n      action: 'Действие',\n      notes: 'Заметки',\n      edit: 'Редактировать',\n      imagingType: 'Тип визуализации',\n      result: 'Результат',\n      results: 'Результаты',\n      visit: 'Осмотр',\n      requests: 'Ожидающие',\n      completed: 'Выполненые',\n      id: 'Номер',\n      sex: 'Пол',\n      age: 'Возраст'\n    },\n    messages: {\n      noItemsFound: 'Ничего не найдено.',\n      createNewRecord: 'Создать новую запись?',\n      forAuthorizedPersons: 'Этот отчет предназначен только для уполномоченных лиц.'\n    },\n    buttons: {\n      complete: 'Готово',\n      cancel: 'Отметить',\n      returnButton: 'Вернутся',\n      add: 'Добавить',\n      update: 'Обновить',\n      ok: 'Ок'\n    },\n    login: {\n      messages: {\n        signIn: 'войдите в систему',\n        error: 'Неверное имя пользователя или пароль.'\n      },\n      labels: {\n        password: 'Пароль',\n        username: 'Имя пользователя',\n        signIn: 'Войти'\n      }\n    },\n    inventory: {\n      messages: {\n        noRequests: 'Запросов не найдено.',\n        createRequest: 'Создать новый запрос?'\n      }\n    },\n    imaging: {\n      pageTitle: 'Запросы на визуализацию',\n      sectionTitle: 'Визуализация',\n      buttons: {\n        newButton: '+ новый запрос'\n      },\n      labels: {\n        radiologist: 'Радиолог',\n        addNewVisit: '--Добавить новый тип осмотра--'\n      },\n      messages: {\n        noCompleted: 'Не найдено выполненых запросов.'\n      },\n      titles: {\n        completedImaging: 'Выполненые запросы',\n        editTitle: 'Редактировать запрос на визуализацию',\n        newTitle: 'Новый запрос на визуализацию'\n      },\n      alerts: {\n        completedTitle: 'Визуализация выполнена',\n        completedMessage: 'Запрос на визуализацию удовлетворён.',\n        savedTitle: 'Запрос сохранён',\n        savedMessage: 'Запрос на визуализацию сохранён.'\n      }\n    }\n  };\n});","define('hospitalrun/tests/locales/ru/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/ru/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/locales/tr/translations', ['exports'], function (exports) {\n  'use strict';\n\n  exports['default'] = {\n    dashboard: {\n      title: 'Ne yapmak istersiniz?'\n    },\n    labels: {\n      name: 'Ad',\n      patient: 'Hasta',\n      quantity: 'Miktar',\n      requestedOn: 'Açık Talep',\n      dateRequested: 'Talep Tarihi',\n      dateCompleted: 'Bitiş tarihi',\n      requestedBy: 'Talep sahibi',\n      fulfill: 'Fulfill',\n      actions: 'İşlemler',\n      action: 'İşlem',\n      notes: 'Notlar',\n      edit: 'Düzenle',\n      imagingType: 'Görüntüleme Tipi',\n      result: 'Sonuç',\n      results: 'Sonuçlar',\n      visit: 'Ziyaret',\n      requests: 'Talepler',\n      completed: 'Tamamlandı',\n      id: 'Id',\n      sex: 'Cinsiyet',\n      age: 'Yaş'\n    },\n    messages: {\n      noItemsFound: 'Hiçbir öğe bulunamadı.',\n      createNewRecord: 'Yeni bir kayıt oluştur?',\n      forAuthorizedPersons: 'Bu rapor yetkili kişiler içindir.'\n    },\n    buttons: {\n      complete: 'Bitir',\n      cancel: 'Vazgeç',\n      returnButton: 'Geri Dön',\n      add: 'Ekle',\n      update: 'Güncelle',\n      ok: 'Tamam'\n    },\n    login: {\n      messages: {\n        signIn: 'GİRİŞ YAPIN',\n        error: 'Kullanıcı adı veya parola hatalı.'\n      },\n      labels: {\n        password: 'Parola',\n        username: 'Kullanıcı Adı',\n        signIn: 'Giriş yap'\n      }\n    },\n    inventory: {\n      messages: {\n        noRequests: 'Talep bulunamadı',\n        createRequest: 'Yeni talep oluştur?'\n      }\n    },\n    imaging: {\n      pageTitle: 'Görüntüleme talepleri',\n      sectionTitle: 'Görüntüleme',\n      buttons: {\n        newButton: '+ yeni görüntüleme'\n      },\n      labels: {\n        radiologist: 'Radyolog',\n        addNewVisit: '--Yeni Ziyaret Ekle--'\n      },\n      messages: {\n        noCompleted: 'Tamamlanmayan öğe bulunamadı.'\n      },\n      titles: {\n        completedImaging: 'Görüntüleme Tamamlandı',\n        editTitle: 'Görüntüleme Talebini Düzenle',\n        newTitle: 'Yeni Görüntüleme Talebi'\n      },\n      alerts: {\n        completedTitle: 'Görüntüleme Talebi Tamamlandı',\n        completedMessage: 'Görüntüleme talebi başarıyla tamamlandı.',\n        savedTitle: 'Görüntüleme Talebi Kaydedildi',\n        savedMessage: 'Görüntüleme Talebi başarıyla kaydedildi.'\n      }\n    }\n  };\n});","define('hospitalrun/tests/locales/tr/translations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - locales/tr/translations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/tr/translations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/completed/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    showActions: false,\n    startKey: []\n  });\n});","define('hospitalrun/tests/medication/completed/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/completed/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/completed/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/completed/route', ['exports', 'ember-i18n', 'hospitalrun/medication/index/route'], function (exports, _emberI18n, _hospitalrunMedicationIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunMedicationIndexRoute['default'].extend({\n    modelName: 'medication',\n    pageTitle: (0, _emberI18n.translationMacro)('medication.titles.completedMedication'),\n    searchStatus: 'Fulfilled'\n  });\n});","define('hospitalrun/tests/medication/completed/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/completed/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/completed/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/delete/controller', ['exports', 'ember-i18n', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-submodule'], function (exports, _emberI18n, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientSubmodule['default'], {\n    title: (0, _emberI18n.translationMacro)('labels.delete_request'),\n\n    actions: {\n      'delete': function _delete() {\n        this.deleteChildFromVisit('medication');\n      }\n    }\n  });\n});","define('hospitalrun/tests/medication/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'hospitalrun/mixins/patient-id', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventorySelection, _hospitalrunMixinsPatientId, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventorySelection['default'], _hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsPatientId['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsUserSession['default'], {\n    medicationController: _ember['default'].inject.controller('medication'),\n    newPatientId: null,\n\n    expenseAccountList: _ember['default'].computed.alias('medicationController.expenseAccountList'),\n\n    canFulfill: (function () {\n      return this.currentUserCan('fulfill_medication');\n    }).property(),\n\n    isFulfilled: (function () {\n      var status = this.get('model.status');\n      return status === 'Fulfilled';\n    }).property('model.status'),\n\n    isFulfilling: (function () {\n      var canFulfill = this.get('canFulfill');\n      var isRequested = this.get('model.isRequested');\n      var fulfillRequest = this.get('model.shouldFulfillRequest');\n      var isFulfilling = canFulfill && (isRequested || fulfillRequest);\n      this.get('model').set('isFulfilling', isFulfilling);\n      return isFulfilling;\n    }).property('canFulfill', 'model.isRequested', 'model.shouldFulfillRequest'),\n\n    isFulfilledOrRequested: (function () {\n      return this.get('isFulfilled') || this.get('model.isRequested');\n    }).property('isFulfilled', 'model.isRequested'),\n\n    prescriptionClass: (function () {\n      var quantity = this.get('model.quantity');\n      this.get('model').validate()['catch'](_ember['default'].K);\n      if (_ember['default'].isEmpty(quantity)) {\n        return 'required';\n      }\n    }).property('model.quantity'),\n\n    quantityClass: (function () {\n      var prescription = this.get('model.prescription');\n      var returnClass = 'col-xs-3';\n      var isFulfilling = this.get('isFulfilling');\n      if (isFulfilling || _ember['default'].isEmpty(prescription)) {\n        returnClass += ' required';\n      }\n      return returnClass + ' test-quantity-input';\n    }).property('isFulfilling', 'model.prescription'),\n\n    quantityLabel: (function () {\n      var i18n = this.get('i18n');\n      var returnLabel = i18n.t('medication.labels.quantityRequested');\n      var isFulfilled = this.get('isFulfilled');\n      var isFulfilling = this.get('isFulfilling');\n      if (isFulfilling) {\n        returnLabel = i18n.t('medication.labels.quantityDispensed');\n      } else if (isFulfilled) {\n        returnLabel = i18n.t('medication.labels.quantityDistributed');\n      }\n      return returnLabel;\n    }).property('isFulfilled'),\n\n    medicationList: [],\n    updateCapability: 'add_medication',\n\n    afterUpdate: function afterUpdate() {\n      var i18n = this.get('i18n');\n      var alertTitle = undefined,\n          alertMessage = undefined;\n      var isFulfilled = this.get('isFulfilled');\n      if (isFulfilled) {\n        alertTitle = i18n.t('medication.alerts.fulfilledTitle');\n        alertMessage = 'The medication request has been fulfilled.';\n        this.set('model.selectPatient', false);\n      } else {\n        alertTitle = i18n.t('medication.alerts.savedTitle');\n        alertMessage = i18n.t('medication.alerts.savedMessage');\n      }\n      this.saveVisitIfNeeded(alertTitle, alertMessage);\n    },\n\n    _addNewPatient: function _addNewPatient() {\n      var i18n = this.get('i18n');\n      this.displayAlert(i18n.t('alerts.pleaseWait'), i18n.t('messages.newPatientHasToBeCreated'));\n      this._getNewPatientId().then((function (friendlyId) {\n        var patientTypeAhead = this.get('model.patientTypeAhead');\n        var nameParts = patientTypeAhead.split(' ');\n        var patientDetails = {\n          friendlyId: friendlyId,\n          patientFullName: patientTypeAhead,\n          requestingController: this\n        };\n        var patient = undefined;\n        if (nameParts.length >= 3) {\n          patientDetails.firstName = nameParts[0];\n          patientDetails.middleName = nameParts[1];\n          patientDetails.lastName = nameParts.splice(2, nameParts.length).join(' ');\n        } else if (nameParts.length === 2) {\n          patientDetails.firstName = nameParts[0];\n          patientDetails.lastName = nameParts[1];\n        } else {\n          patientDetails.firstName = patientTypeAhead;\n        }\n        patient = this.store.createRecord('patient', patientDetails);\n        this.send('openModal', 'patients.quick-add', patient);\n      }).bind(this));\n    },\n\n    _getNewPatientId: function _getNewPatientId() {\n      var newPatientId = this.get('newPatientId');\n      if (_ember['default'].isEmpty(newPatientId)) {\n        return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n          this.generateFriendlyId().then((function (friendlyId) {\n            this.set('newPatientId', friendlyId);\n            resolve(friendlyId);\n          }).bind(this), reject);\n        }).bind(this));\n      } else {\n        return _ember['default'].RSVP.resolve(newPatientId);\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var isFulfilling = this.get('isFulfilling');\n      var isNew = this.get('model.isNew');\n      if (isNew || isFulfilling) {\n        return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n          var newMedication = this.get('model');\n          newMedication.validate().then((function () {\n            if (newMedication.get('isValid')) {\n              if (isNew) {\n                if (_ember['default'].isEmpty(newMedication.get('patient'))) {\n                  this._addNewPatient();\n                  reject({\n                    ignore: true,\n                    message: 'creating new patient first'\n                  });\n                } else {\n                  newMedication.set('medicationTitle', newMedication.get('inventoryItem.name'));\n                  newMedication.set('priceOfMedication', newMedication.get('inventoryItem.price'));\n                  newMedication.set('status', 'Requested');\n                  newMedication.set('requestedBy', newMedication.getUserName());\n                  newMedication.set('requestedDate', new Date());\n                  this.addChildToVisit(newMedication, 'medication', 'Pharmacy').then((function () {\n                    this.finishBeforeUpdate(isFulfilling, resolve);\n                  }).bind(this), reject);\n                }\n              } else {\n                this.finishBeforeUpdate(isFulfilling, resolve);\n              }\n            } else {\n              this.send('showDisabledDialog');\n              reject('invalid model');\n            }\n          }).bind(this))['catch']((function () {\n            this.send('showDisabledDialog');\n            reject('invalid model');\n          }).bind(this));\n        }).bind(this));\n      } else {\n        return _ember['default'].RSVP.resolve();\n      }\n    },\n\n    finishBeforeUpdate: function finishBeforeUpdate(isFulfilling, resolve) {\n      if (isFulfilling) {\n        var inventoryLocations = this.get('model.inventoryLocations');\n        var inventoryRequest = this.get('store').createRecord('inv-request', {\n          expenseAccount: this.get('model.expenseAccount'),\n          dateCompleted: new Date(),\n          inventoryItem: this.get('model.inventoryItem'),\n          inventoryLocations: inventoryLocations,\n          quantity: this.get('model.quantity'),\n          transactionType: 'Fulfillment',\n          patient: this.get('model.patient'),\n          markAsConsumed: true\n        });\n        this.performFulfillRequest(inventoryRequest, false, false, true).then((function () {\n          this.set('model.status', 'Fulfilled');\n          resolve();\n        }).bind(this));\n      } else {\n        resolve();\n      }\n    },\n\n    showUpdateButton: (function () {\n      var isFulfilled = this.get('isFulfilled');\n      if (isFulfilled) {\n        return false;\n      } else {\n        return this._super();\n      }\n    }).property('updateCapability', 'isFulfilled'),\n\n    updateButtonText: (function () {\n      var i18n = this.get('i18n');\n      if (this.get('model.hideFulfillRequest')) {\n        return i18n.t('buttons.dispense');\n      } else if (this.get('isFulfilling')) {\n        return i18n.t('labels.fulfill');\n      }\n      return this._super();\n    }).property('model.isNew', 'isFulfilling', 'model.hideFulfillRequest'),\n\n    actions: {\n      addedNewPatient: function addedNewPatient(record) {\n        this.send('closeModal');\n        this.set('model.patient', record);\n        this.set('newPatientId');\n        this.send('update');\n      }\n    }\n\n  });\n});\n// inventory-locations mixin is needed for fulfill-request mixin!","define('hospitalrun/tests/medication/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/edit/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/patient-list-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractEditRoute, _ember, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsPatientListRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsPatientListRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('medication.titles.editMedicationRequest'),\n    modelName: 'medication',\n    newTitle: (0, _emberI18n.translationMacro)('medication.titles.newMedicationRequest'),\n    database: _ember['default'].inject.service(),\n    getNewData: function getNewData(params) {\n      var idParam = this.get('idParam');\n      var newData = {\n        selectPatient: true,\n        prescriptionDate: moment().startOf('day').toDate()\n      };\n      if (params[idParam] === 'dispense') {\n        newData.shouldFulfillRequest = true;\n        newData.hideFulfillRequest = true;\n      }\n      newData.id = uuid.v4();\n      return _ember['default'].RSVP.resolve(newData);\n    },\n\n    model: function model(params) {\n      var idParam = this.get('idParam');\n      if (!_ember['default'].isEmpty(idParam) && params[idParam] === 'new' || params[idParam] === 'dispense') {\n        return this._createNewRecord(params);\n      } else {\n        return this._super(params);\n      }\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      var inventoryQuery = {\n        key: 'Medication',\n        include_docs: true\n      };\n      var inventoryItemId = model.get('inventoryItem.id');\n      var patient = model.get('patient');\n      if (_ember['default'].isEmpty(inventoryItemId)) {\n        this.get('database').queryMainDB(inventoryQuery, 'inventory_by_type').then(function (result) {\n          var medicationList = result.rows.map(function (medication) {\n            return medication.doc;\n          });\n          controller.set('medicationList', medicationList);\n        });\n      }\n      if (_ember['default'].isEmpty(patient)) {\n        this._fetchPatientList(controller);\n      }\n    }\n  });\n});\n// inventory-locations mixin is needed for fulfill-request mixin!","define('hospitalrun/tests/medication/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    startKey: [],\n    canAdd: (function () {\n      return this.currentUserCan('add_medication');\n    }).property(),\n\n    showActions: (function () {\n      return this.currentUserCan('fulfill_medication');\n    }).property()\n  });\n});","define('hospitalrun/tests/medication/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/index/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-index-route'], function (exports, _emberI18n, _hospitalrunRoutesAbstractIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'medication',\n    pageTitle: (0, _emberI18n.translationMacro)('medication.pageTitle'),\n    searchStatus: 'Requested',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var prescriptionDateAsTime = item.get('prescriptionDateAsTime');\n      var id = this._getPouchIdFromItem(item);\n      var requestedDateAsTime = item.get('requestedDateAsTime');\n      var searchStatus = this.get('searchStatus');\n      return [searchStatus, requestedDateAsTime, prescriptionDateAsTime, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var maxId = this._getMaxPouchId();\n      var maxValue = this.get('maxValue');\n      var minId = this._getMinPouchId();\n      var searchStatus = this.get('searchStatus');\n      return {\n        options: {\n          startkey: [searchStatus, null, null, minId],\n          endkey: [searchStatus, maxValue, maxValue, maxId]\n        },\n        mapReduce: 'medication_by_status'\n      };\n    }\n  });\n});","define('hospitalrun/tests/medication/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/return/controller', ['exports', 'ember-i18n', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/fulfill-request', 'hospitalrun/mixins/inventory-locations', 'hospitalrun/mixins/inventory-selection', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/utils/select-values'], function (exports, _emberI18n, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsFulfillRequest, _hospitalrunMixinsInventoryLocations, _hospitalrunMixinsInventorySelection, _hospitalrunMixinsPatientSubmodule, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsFulfillRequest['default'], _hospitalrunMixinsInventoryLocations['default'], _hospitalrunMixinsInventorySelection['default'], _hospitalrunMixinsPatientSubmodule['default'], {\n    medicationController: _ember['default'].inject.controller('medication'),\n    medicationList: [],\n\n    lookupListsToUpdate: [{\n      name: 'aisleLocationList', // Name of property containing lookup list\n      property: 'model.aisleLocation', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'aisle_location_list' // Id of the lookup list to update\n    }, {\n      name: 'expenseAccountList', // Name of property containing lookup list\n      property: 'model.expenseAccount', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'expense_account_list' // Id of the lookup list to update\n    }, {\n      name: 'warehouseList', // Name of property containing lookup list\n      property: 'model.location', // Corresponding property on model that potentially contains a new value to add to the list\n      id: 'warehouse_list' // Id of the lookup list to update\n    }],\n\n    patientMedicationList: [],\n    setNewMedicationList: false,\n\n    aisleLocationList: _ember['default'].computed.alias('medicationController.aisleLocationList'),\n    expenseAccountList: _ember['default'].computed.alias('medicationController.expenseAccountList'),\n    warehouseList: _ember['default'].computed.alias('medicationController.warehouseList'),\n    updateCapability: 'add_medication',\n\n    medicationChanged: (function () {\n      var medication = this.get('model.medication');\n      if (!_ember['default'].isEmpty(medication)) {\n        var inventoryItem = medication.get('inventoryItem');\n        this.set('model.inventoryItemTypeAhead', inventoryItem.get('name') + ' - ' + inventoryItem.get('friendlyId'));\n        this.set('model.inventoryItem', inventoryItem);\n      } else {\n        this.set('model.inventoryItem');\n      }\n      _ember['default'].run.later((function () {\n        this.get('model').validate()['catch'](_ember['default'].K);\n      }).bind(this));\n    }).observes('model.medication'),\n\n    patientVisitsChanged: (function () {\n      var patientVisits = this.get('patientVisits');\n      if (!_ember['default'].isEmpty(patientVisits)) {\n        this.set('model.visit', patientVisits.get('firstObject'));\n      }\n    }).observes('patientVisits'),\n\n    showPatientMedicationList: (function () {\n      var patientMedicationList = this.get('patientMedicationList');\n      this.get('patientMedication'); // Request patient medication be updated\n      return !_ember['default'].isEmpty(patientMedicationList);\n    }).property('patientMedicationList', 'model.patient', 'model.visit'),\n\n    patientMedication: (function () {\n      var setNewMedicationList = this.get('setNewMedicationList');\n      var visit = this.get('model.visit');\n      if (setNewMedicationList) {\n        this.set('setNewMedicationList', false);\n      } else if (!_ember['default'].isEmpty(visit)) {\n        visit.get('medication').then((function (medication) {\n          medication = medication.filterBy('status', 'Fulfilled');\n          this.set('model.medication', medication.get('firstObject'));\n          this.set('patientMedicationList', medication.map(_hospitalrunUtilsSelectValues['default'].selectObjectMap));\n          this.set('setNewMedicationList', true);\n        }).bind(this));\n      }\n      return this.get('patientMedicationList');\n    }).property('setNewMedicationList', 'model.patient', 'model.visit'),\n\n    _finishUpdate: function _finishUpdate() {\n      var aisle = this.get('model.deliveryAisle');\n      var location = this.get('model.deliveryLocation');\n      var inventoryItem = this.get('model.inventoryItem');\n\n      // find location on inventoryItem\n      this._findOrCreateLocation(inventoryItem, location, aisle).then((function (inventoryLocation) {\n        this.set('model.adjustPurchases', true);\n        this.set('model.inventoryLocations', [inventoryLocation]);\n        this.set('model.markAsConsumed', true);\n        // Make sure inventory item is resolved first.\n        this.get('model.inventoryItem').then((function () {\n          this.send('fulfillRequest', this.get('model'), false, true, true);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    actions: {\n      doneFulfillRequest: function doneFulfillRequest() {\n        var i18n = this.get('i18n');\n        this.updateLookupLists();\n        this.displayAlert(i18n.t('medication.alerts.returnedTitle'), i18n.t('medication.alerts.returnedMessage'), 'allItems');\n      },\n      update: function update() {\n        var medication = this.get('model.medication');\n        var quantity = this.get('model.quantity');\n        if (!_ember['default'].isEmpty(medication)) {\n          medication.reload().then((function () {\n            medication.decrementProperty('quantity', quantity);\n            if (medication.get('quantity') < 0) {\n              medication.set('quantity', 0);\n            }\n            medication.save().then(this._finishUpdate.bind(this));\n          }).bind(this));\n        } else {\n          this._finishUpdate();\n        }\n      }\n    },\n\n    updateButtonText: (0, _emberI18n.translationMacro)('medication.returnMedication')\n  });\n});\n// inventory-locations mixin is needed for fulfill-request mixin!","define('hospitalrun/tests/medication/return/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/return/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/return/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/return/route', ['exports', 'ember-i18n', 'hospitalrun/tests/medication/edit/route', 'ember'], function (exports, _emberI18n, _hospitalrunTestsMedicationEditRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunTestsMedicationEditRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('medication.returnMedication'),\n    modelName: 'inv-request',\n    newTitle: (0, _emberI18n.translationMacro)('medication.returnMedication'),\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        dateCompleted: new Date(),\n        selectPatient: true,\n        transactionType: 'Return'\n      });\n    }\n  });\n});","define('hospitalrun/tests/medication/return/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/return/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/return/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/route', ['exports', 'ember-i18n', 'hospitalrun/routes/abstract-module-route', 'ember'], function (exports, _emberI18n, _hospitalrunRoutesAbstractModuleRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_medication',\n    moduleName: 'medication',\n    newButtonText: (0, _emberI18n.translationMacro)('medication.buttons.newButton'),\n    sectionTitle: (0, _emberI18n.translationMacro)('medication.sectionTitle'),\n\n    additionalButtons: (function () {\n      var i18n = this.get('i18n');\n      var additionalButtons = [];\n      if (this.currentUserCan('fulfill_medication')) {\n        additionalButtons.push({\n          buttonIcon: 'octicon octicon-checklist',\n          buttonAction: 'dispenseMedication',\n          buttonText: i18n.t('medication.buttons.dispenseMedication'),\n          'class': 'btn btn-primary'\n        });\n      }\n      if (this.currentUserCan(this.get('addCapability'))) {\n        additionalButtons.push({\n          buttonIcon: 'octicon octicon-mail-reply',\n          buttonAction: 'returnMedication',\n          buttonText: i18n.t('medication.buttons.returnMedication'),\n          'class': 'btn btn-primary'\n        });\n      }\n      if (!_ember['default'].isEmpty(additionalButtons)) {\n        return additionalButtons;\n      }\n    }).property(),\n\n    additionalModels: [{\n      name: 'aisleLocationList',\n      findArgs: ['lookup', 'aisle_location_list']\n    }, {\n      name: 'expenseAccountList',\n      findArgs: ['lookup', 'expense_account_list']\n    }, {\n      name: 'sexList',\n      findArgs: ['lookup', 'sex']\n    }, {\n      name: 'warehouseList',\n      findArgs: ['lookup', 'warehouse_list']\n    }],\n\n    actions: {\n      dispenseMedication: function dispenseMedication() {\n        if (this.currentUserCan('fulfill_medication')) {\n          this.transitionTo('medication.edit', 'dispense');\n        }\n      },\n\n      returnMedication: function returnMedication() {\n        if (this.currentUserCan(this.get('addCapability'))) {\n          this.transitionTo('medication.return', 'new');\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/medication/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/medication/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'medication',\n    searchKeys: [{\n      name: 'prescription',\n      type: 'contains'\n    }],\n    searchModel: 'medication'\n  });\n});","define('hospitalrun/tests/medication/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - medication/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'medication/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/appointment-statuses', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    appointmentStatusList: ['Scheduled', 'Canceled', 'Missed'],\n    appointmentStatuses: _ember['default'].computed.map('appointmentStatusList', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n\n    appointmentStatusesWithEmpty: (function () {\n      return _hospitalrunUtilsSelectValues['default'].selectValues(this.get('appointmentStatusList'), true);\n    }).property()\n  });\n});","define('hospitalrun/tests/mixins/appointment-statuses.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/appointment-statuses.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/appointment-statuses.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/billing-categories', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultBillingCategories: ['Hospital Charges']\n  });\n});","define('hospitalrun/tests/mixins/billing-categories.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/billing-categories.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/billing-categories.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/blood-types', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    bloodTypes: ['A+', 'A-', 'AB-', 'AB+', 'B+', 'B-', 'O+', 'O-'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap)\n  });\n});","define('hospitalrun/tests/mixins/blood-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/blood-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/blood-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/can-edit-requested', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    canEdit: (function () {\n      var status = this.get('status');\n      return status === 'Requested';\n    }).property('status')\n  });\n});","define('hospitalrun/tests/mixins/can-edit-requested.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/can-edit-requested.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/can-edit-requested.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/charge-actions', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    chargePricingCategory: null,\n    pricingList: null,\n    pricingTypeForObjectType: null,\n    pricingTypes: null,\n    _createNewChargeRecord: function _createNewChargeRecord(quantityCharged, pricingId) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this.store.find('pricing', pricingId).then((function (item) {\n          var newCharge = this.store.createRecord('proc-charge', {\n            dateCharged: new Date(),\n            quantity: quantityCharged,\n            pricingItem: item\n          });\n          newCharge.save().then((function (chargeRecord) {\n            var charges = this.get('model.charges');\n            charges.addObject(chargeRecord);\n            resolve();\n          }).bind(this), reject);\n        }).bind(this), reject);\n      }).bind(this), '_createNewChargeRecord with pricingId:' + pricingId);\n    },\n\n    actions: {\n      addCharge: function addCharge(charge) {\n        var charges = this.get('model.charges');\n        charges.addObject(charge);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      deleteCharge: function deleteCharge(model) {\n        var chargeToDelete = model.get('chargeToDelete');\n        var charges = this.get('model.charges');\n        charges.removeObject(chargeToDelete);\n        chargeToDelete.destroyRecord();\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      showAddCharge: function showAddCharge() {\n        var newCharge = this.get('store').createRecord('proc-charge', {\n          dateCharged: new Date(),\n          quantity: 1,\n          pricingCategory: this.get('chargePricingCategory')\n        });\n        this.send('openModal', this.get('chargeRoute'), newCharge);\n      },\n\n      showEditCharge: function showEditCharge(charge) {\n        charge.set('itemName', charge.get('pricingItem.name'));\n        charge.set('pricingCategory', this.get('chargePricingCategory'));\n        this.send('openModal', this.get('chargeRoute'), charge);\n      },\n\n      showDeleteCharge: function showDeleteCharge(charge) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deleteCharge',\n          title: 'Delete Charge Item',\n          message: 'Are you sure you want to delete this charged item?',\n          chargeToDelete: charge,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      setChargeQuantity: function setChargeQuantity(id, quantity) {\n        var model = this.get('model');\n        model.set(id, quantity);\n      }\n    },\n\n    canAddCharge: (function () {\n      return this.currentUserCan('add_charge');\n    }).property(),\n\n    /**\n     * Returns pricing list without object types\n     * Used for labs and imaging where the labs and imaging types are\n     * directly in the price list.\n     */\n    chargesPricingList: (function () {\n      var pricingList = this.get('pricingList');\n      var pricingTypeForObjectType = this.get('pricingTypeForObjectType');\n      return pricingList.filter(function (item) {\n        return item.type !== pricingTypeForObjectType;\n      });\n    }).property('pricingList', 'pricingTypeForObjectType'),\n\n    chargeRoute: null,\n\n    findChargeForPricingItem: function findChargeForPricingItem(pricingItem, charges) {\n      var chargeForItem = charges.find(function (charge) {\n        var chargePricingItemId = charge.get('pricingItem.id');\n        return pricingItem.id === chargePricingItemId;\n      });\n      return chargeForItem;\n    },\n    /**\n     * Returns object types out of the pricing list.\n     * Used for labs and imaging where the labs and imaging types are\n     * directly in the price list.\n     */\n    objectTypeList: (function () {\n      var pricingList = this.get('pricingList');\n      var pricingTypeForObjectType = this.get('pricingTypeForObjectType');\n      var userCanAddPricingTypes = this.get('userCanAddPricingTypes');\n      var returnList = _ember['default'].Object.create({\n        value: [],\n        userCanAdd: userCanAddPricingTypes\n      });\n      if (!_ember['default'].isEmpty(pricingList)) {\n        returnList.set('value', pricingList.filterBy('pricingType', pricingTypeForObjectType));\n      }\n      return returnList;\n    }).property('pricingList', 'pricingTypeForObjectType', 'pricingTypeValues'),\n\n    organizeByType: _ember['default'].computed.alias('pricingTypes.organizeByType'),\n\n    pricingTypeList: (function () {\n      var pricingList = this.get('pricingList');\n      var pricingTypeValues = this.get('pricingTypeValues');\n      var pricingTypeForObjectType = this.get('pricingTypeForObjectType');\n      if (!_ember['default'].isEmpty(pricingTypeValues)) {\n        pricingTypeValues = pricingTypeValues.filter(function (pricingType) {\n          var havePricing = false;\n          if (!_ember['default'].isEmpty(pricingList)) {\n            havePricing = !_ember['default'].isEmpty(pricingList.findBy('pricingType', pricingType));\n          }\n          return havePricing && pricingType !== pricingTypeForObjectType;\n        });\n        pricingTypeValues = pricingTypeValues.sortBy('name');\n        return pricingTypeValues;\n      }\n    }).property('pricingTypeValues', 'pricingTypeForObjectType', 'pricingList'),\n\n    pricingTypeValues: _ember['default'].computed.alias('pricingTypes.value'),\n\n    /**\n     * Create multiple new request records from the pricing records passed in.  This function\n     * will also add those new records to the specified visit.\n     * @param {array} pricingRecords the list of pricing records to use to create request records from.\n     * @param {string} pricingField the name of the field on the request record to set the pricing record on.\n     * @param {string} visitChildName the name of the child object on the visit to add to.\n     * @param {string} newVisitType if a new visit needs to be created, what type of visit\n     * should be created.\n     */\n    createMultipleRequests: function createMultipleRequests(pricingRecords, pricingField, visitChildName, newVisitType) {\n      var firstRecord = pricingRecords.get('firstObject');\n      var modelToSave = this.get('model');\n      modelToSave.set(pricingField, firstRecord);\n      this.addChildToVisit(modelToSave, visitChildName, newVisitType).then((function (visit) {\n        modelToSave.save().then((function () {\n          this._finishCreateMultipleRequests(pricingRecords, pricingField, visitChildName, newVisitType, visit);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    _finishCreateMultipleRequests: function _finishCreateMultipleRequests(pricingRecords, pricingField, visitChildName, newVisitType, visit) {\n      var attributesToSave = {};\n      var baseModel = this.get('model');\n      var modelToSave = undefined;\n      var modelsToAdd = [];\n      var patient = this.get('model.patient');\n      var savePromises = [];\n\n      baseModel.eachAttribute(function (name) {\n        attributesToSave[name] = baseModel.get(name);\n      });\n\n      pricingRecords.forEach((function (pricingRecord, index) {\n        if (index > 0) {\n          modelToSave = this.store.createRecord(newVisitType.toLowerCase(), attributesToSave);\n          modelToSave.set(pricingField, pricingRecord);\n          modelToSave.set('patient', patient);\n          modelToSave.set('visit', visit);\n          modelsToAdd.push(modelToSave);\n          savePromises.push(modelToSave.save());\n        }\n      }).bind(this));\n\n      _ember['default'].RSVP.all(savePromises).then((function () {\n        var addPromises = [];\n        modelsToAdd.forEach((function (modelToSave) {\n          addPromises.push(this.addChildToVisit(modelToSave, visitChildName, newVisitType));\n        }).bind(this));\n        _ember['default'].RSVP.all(addPromises).then((function (addResults) {\n          this.afterUpdate(addResults, true);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    saveNewPricing: function saveNewPricing(pricingName, pricingCategory, priceObjectToSet) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var newPricing = undefined;\n        var pricingTypeForObjectType = this.get('pricingTypeForObjectType');\n        newPricing = this.store.createRecord('pricing', {\n          name: pricingName,\n          category: pricingCategory,\n          pricingType: pricingTypeForObjectType\n        });\n        newPricing.save().then((function (savedNewPricing) {\n          this.get('pricingList').addObject({\n            id: savedNewPricing.get('id'),\n            name: newPricing.get('name')\n          });\n          this.set(priceObjectToSet, newPricing);\n          resolve();\n        }).bind(this), reject);\n      }).bind(this), 'saveNewPricing for: ' + pricingName);\n    },\n\n    getSelectedPricing: function getSelectedPricing(selectedField) {\n      var selectedItem = this.get(selectedField);\n      if (!_ember['default'].isEmpty(selectedItem)) {\n        return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n          if (_ember['default'].isArray(selectedItem)) {\n            this.store.findByIds('pricing', selectedItem).then(resolve, reject);\n          } else {\n            this.store.find('pricing', selectedItem.id).then(resolve, reject);\n          }\n        }).bind(this));\n      } else {\n        return _ember['default'].RSVP.resolve();\n      }\n    },\n\n    showAddCharge: (function () {\n      var canAddCharge = this.get('canAddCharge');\n      var organizeByType = this.get('organizeByType');\n      if (canAddCharge) {\n        return !organizeByType;\n      } else {\n        return false;\n      }\n    }).property('canAddCharge', 'organizeByType'),\n\n    showEditCharges: (function () {\n      var canAddCharge = this.get('canAddCharge');\n      var organizeByType = this.get('organizeByType');\n      if (canAddCharge) {\n        return organizeByType;\n      } else {\n        return false;\n      }\n    }).property('canAddCharge', 'organizeByType'),\n\n    showPricingTypeTabs: (function () {\n      var pricingTypeList = this.get('pricingTypeList');\n      return !_ember['default'].isEmpty(pricingTypeList) && pricingTypeList.get('length') > 1;\n    }).property('pricingTypeList'),\n\n    userCanAddPricingTypes: (function () {\n      var pricingTypes = this.get('pricingTypes');\n      if (_ember['default'].isEmpty(pricingTypes)) {\n        return true;\n      } else {\n        return pricingTypes.get('userCanAdd');\n      }\n    }).property('pricingTypes'),\n\n    /**\n     * When using organizeByType charges need to be mapped over from the price lists\n     */\n    updateCharges: function updateCharges() {\n      var charges = this.get('model.charges');\n      var organizeByType = this.get('organizeByType');\n      var pricingList = this.get('pricingList');\n\n      if (!organizeByType) {\n        return _ember['default'].RSVP.resolve();\n      }\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var chargePromises = [];\n        var model = this.get('model');\n        pricingList.forEach((function (pricingItem) {\n          var currentCharge = this.findChargeForPricingItem(pricingItem, model.get('charges'));\n          var quantityCharged = model.get(pricingItem.id);\n          if (_ember['default'].isEmpty(quantityCharged)) {\n            if (currentCharge) {\n              // Remove existing charge because quantity is blank\n              charges.removeObject(currentCharge);\n              chargePromises.push(currentCharge.destroyRecord());\n            }\n          } else {\n            if (currentCharge) {\n              if (currentCharge.get('quantity') !== quantityCharged) {\n                currentCharge.set('quantity', quantityCharged);\n                chargePromises.push(currentCharge.save());\n              }\n            } else {\n              chargePromises.push(this._createNewChargeRecord(quantityCharged, pricingItem.id));\n            }\n          }\n        }).bind(this));\n        _ember['default'].RSVP.all(chargePromises, 'Charges updated for current record: ' + this.get('model.id')).then(resolve, reject);\n      }).bind(this), 'updateCharges for current record: ' + this.get('model.id'));\n    }\n  });\n});","define('hospitalrun/tests/mixins/charge-actions.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/charge-actions.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/charge-actions.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/charge-route', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    database: _ember['default'].inject.service(),\n    actions: {\n      deleteCharge: function deleteCharge(model) {\n        this.controller.send('deleteCharge', model);\n      }\n    },\n    pricingList: null,\n\n    afterModel: function afterModel() {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var database = this.get('database');\n        var maxId = database.getPouchId({}, 'pricing');\n        var minId = database.getPouchId(null, 'pricing');\n        var pricingCategory = this.get('pricingCategory');\n        var pricingQuery = {\n          startkey: [pricingCategory, null, null, minId],\n          endkey: [pricingCategory, {}, {}, maxId],\n          include_docs: true\n        };\n        database.queryMainDB(pricingQuery, 'pricing_by_category').then((function (result) {\n          var pricingList = result.rows.map(function (item) {\n            return item.doc;\n          });\n          this.set('pricingList', pricingList);\n          resolve();\n        }).bind(this))['catch'](reject);\n      }).bind(this));\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      controller.set('pricingList', this.get('pricingList'));\n    }\n  });\n});","define('hospitalrun/tests/mixins/charge-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/charge-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/charge-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/date-format', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    _dateFormat: function _dateFormat(value, dateFormat) {\n      if (_ember['default'].isEmpty(dateFormat)) {\n        dateFormat = 'l';\n      }\n      if (!_ember['default'].isEmpty(value)) {\n        return moment(value).format(dateFormat);\n      }\n    },\n\n    dateToTime: function dateToTime(date) {\n      if (!_ember['default'].isEmpty(date) && date.getTime) {\n        return date.getTime();\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/date-format.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/date-format.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/date-format.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/dob-days', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    convertDOBToText: function convertDOBToText(birthDate, shortFormat, omitDays) {\n      var today = new Date();\n      var years = 0;\n      var months = 0;\n      var days = 0;\n\n      if (birthDate) {\n        if (birthDate.getFullYear === undefined) {\n          birthDate = moment(birthDate, 'l').toDate();\n        }\n        if (birthDate.getFullYear !== undefined) {\n          years = today.getFullYear() - birthDate.getFullYear();\n          if (today.getMonth() < birthDate.getMonth() || today.getMonth() === birthDate.getMonth() && today.getDate() < birthDate.getDate()) {\n            years--;\n          }\n        }\n\n        if (birthDate.getMonth) {\n          months = today.getMonth() - birthDate.getMonth();\n          days = today.getDate() - birthDate.getDate();\n          if (months <= 0) {\n            if (days < 0) {\n              months += 11;\n            } else if (months < 0) {\n              months += 12;\n            }\n          } else {\n            if (days < 0) {\n              months = months - 1;\n            }\n          }\n        }\n\n        if (birthDate.getDate) {\n          days = today.getDate() - birthDate.getDate();\n          if (days < 0) {\n            days += 30;\n          }\n        }\n      }\n\n      var formatString = '';\n      var options = {\n        years: years,\n        days: days,\n        months: months\n      };\n      var i18n = this.get('i18n');\n      if (shortFormat) {\n        if (years > 0) {\n          formatString = i18n.t('dates.short', options);\n        } else {\n          formatString = i18n.t('dates.shortOmitYears', options);\n        }\n      } else if (omitDays) {\n        if (years > 1) {\n          formatString = i18n.t('dates.longOmitDaysPlural', options);\n        } else if (years === 1) {\n          formatString = i18n.t('dates.longOmitDays', options);\n        } else {\n          formatString = i18n.t('dates.longOmitDaysYears', options);\n        }\n      } else {\n        if (years > 1) {\n          formatString = i18n.t('dates.longPlural', options);\n        } else if (years === 1) {\n          formatString = i18n.t('dates.long', options);\n        } else {\n          formatString = i18n.t('dates.longOmitYears', options);\n        }\n      }\n      return formatString;\n    }\n  });\n});","define('hospitalrun/tests/mixins/dob-days.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/dob-days.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/dob-days.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/edit-panel-props', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n\n    additionalButtons: null,\n    cancelButtonText: null,\n    disabledAction: null,\n    hideCancelButton: null,\n    isUpdateDisabled: null,\n    showUpdateButton: null,\n    updateButtonAction: null,\n    updateButtonText: null,\n\n    editPanelProps: (function () {\n      return this.getProperties(['additionalButtons', 'cancelButtonText', 'disabledAction', 'hideCancelButton', 'isUpdateDisabled', 'showUpdateButton', 'updateButtonAction', 'updateButtonText']);\n    }).property('additionalButtons', 'cancelButtonText', 'disabledAction', 'hideCancelButton', 'isUpdateDisabled', 'showUpdateButton', 'updateButtonAction', 'updateButtonText')\n  });\n});","define('hospitalrun/tests/mixins/edit-panel-props.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/edit-panel-props.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/edit-panel-props.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/fulfill-request', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  // NOTE!!! inventory-locations mixin is needed for fulfill-request mixin!\n  exports['default'] = _ember['default'].Mixin.create({\n    actions: {\n      doneFulfillRequest: function doneFulfillRequest() {\n        // Placeholder function; override if you need to know when fulfillrequest is complete.\n      },\n\n      fulfillRequest: function fulfillRequest(request, closeModal, increment, skipTransition) {\n        this.performFulfillRequest(request, closeModal, increment, skipTransition);\n      }\n    },\n\n    performFulfillRequest: function performFulfillRequest(request, closeModal, increment, skipTransition) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var markAsConsumed = request.get('markAsConsumed');\n        var transactionType = request.get('transactionType');\n        if (transactionType === 'Request') {\n          transactionType = null; // reset the transaction type so that it gets set below.\n        }\n        request.get('inventoryItem').then((function (inventoryItem) {\n          if (markAsConsumed) {\n            request.set('adjustPurchases', true);\n            if (_ember['default'].isEmpty(transactionType)) {\n              request.set('transactionType', 'Fulfillment');\n            }\n            this._performFulfillment(request, inventoryItem, increment).then((function () {\n              this._finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition);\n              resolve();\n            }).bind(this), reject);\n          } else {\n            request.set('adjustPurchases', false);\n            if (_ember['default'].isEmpty(transactionType)) {\n              request.set('transactionType', 'Transfer');\n            }\n            this._finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition);\n            resolve();\n          }\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    /**\n     * @private\n     */\n    _findQuantity: function _findQuantity(request, purchases, item, increment) {\n      var costPerUnit = undefined;\n      var requestPurchases = [];\n      var quantityOnHand = item.get('quantity');\n      var quantityRequested = parseInt(request.get('quantity'));\n      var quantityNeeded = quantityRequested;\n      var purchaseInfo = [];\n      var totalCost = 0;\n      if (increment) {\n        var purchase = purchases.get('lastObject');\n        costPerUnit = purchase.get('costPerUnit');\n        purchase.incrementProperty('currentQuantity', quantityRequested);\n        totalCost += costPerUnit * quantityNeeded;\n        purchaseInfo.push({\n          id: purchase.get('id'),\n          quantity: quantityRequested\n        });\n        requestPurchases.addObject(purchase);\n      } else {\n        var foundQuantity = purchases.any(function (purchase) {\n          var currentQuantity = purchase.get('currentQuantity');\n          if (purchase.get('expired') || currentQuantity <= 0) {\n            return false;\n          }\n          costPerUnit = purchase.get('costPerUnit');\n          if (increment) {\n\n            return true;\n          } else {\n            if (quantityNeeded > currentQuantity) {\n              totalCost += costPerUnit * currentQuantity;\n              quantityNeeded = quantityNeeded - currentQuantity;\n              purchaseInfo.push({\n                id: purchase.get('id'),\n                quantity: parseInt(currentQuantity)\n              });\n              currentQuantity = 0;\n            } else {\n              totalCost += costPerUnit * quantityNeeded;\n              currentQuantity = currentQuantity - quantityNeeded;\n              purchaseInfo.push({\n                id: purchase.get('id'),\n                quantity: parseInt(quantityNeeded)\n              });\n              quantityNeeded = 0;\n            }\n            purchase.set('currentQuantity', currentQuantity);\n            requestPurchases.addObject(purchase);\n            return quantityNeeded === 0;\n          }\n        });\n        if (!foundQuantity) {\n          return 'Could not find any purchases that had the required quantity: ' + quantityRequested;\n        }\n      }\n      request.set('costPerUnit', (totalCost / quantityRequested).toFixed(2));\n      request.set('quantityAtCompletion', quantityOnHand);\n      request.set('purchasesAffected', purchaseInfo);\n      request.set('purchases', requestPurchases); // Not saved permanently, just set here so that purchases get saved later.\n      item.updateQuantity();\n      return true;\n    },\n\n    /**\n     * @private\n     * Finish the fulfillment request.\n     * @param {object} request the request to fulfill.\n     * @param {object} inventoryItem the inventoryItem that should be used for fulfillment.\n     * @param {boolean} closeModal if the modal should be closed.\n     * @param {boolean} increment if the request should increment, not decrement\n     * @param {boolean} skipTransition if the transition should not run after fulfillment.\n     */\n    _finishFulfillRequest: function _finishFulfillRequest(request, inventoryItem, closeModal, increment, skipTransition) {\n      var inventoryLocations = request.get('inventoryLocations');\n      var locationsAffected = [];\n      var markAsConsumed = request.get('markAsConsumed');\n      var promises = [];\n      var quantity = parseInt(request.get('quantity'));\n      var requestPurchases = request.get('purchases');\n      if (increment) {\n        var locationToIncrement = inventoryLocations.get('firstObject');\n        locationToIncrement.incrementProperty('quantity', quantity);\n        promises.push(locationToIncrement.save());\n        locationsAffected.push({\n          name: locationToIncrement.get('locationName'),\n          quantity: quantity\n        });\n      } else {\n        inventoryLocations.reduce((function (quantityNeeded, location) {\n          var deliveryLocation = request.get('deliveryLocation');\n          var deliveryAisle = request.get('deliveryAisle');\n          var locationQuantity = parseInt(location.get('quantity'));\n          if (quantityNeeded > 0) {\n            if (!markAsConsumed) {\n              location.set('transferAisleLocation', deliveryAisle);\n              location.set('transferLocation', deliveryLocation);\n            }\n            if (locationQuantity >= quantityNeeded) {\n              if (markAsConsumed) {\n                location.decrementProperty('quantity', quantityNeeded);\n                promises.push(location.save());\n              } else {\n                location.set('adjustmentQuantity', quantityNeeded);\n                promises.push(this.transferToLocation(inventoryItem, location));\n              }\n              locationsAffected.push({\n                name: location.get('locationName'),\n                quantity: quantityNeeded\n              });\n              return 0;\n            } else {\n              if (markAsConsumed) {\n                location.decrementProperty('quantity', locationQuantity);\n                promises.push(location.save());\n              } else {\n                location.set('adjustmentQuantity', locationQuantity);\n                promises.push(this.transferToLocation(inventoryItem, location));\n              }\n              locationsAffected.push({\n                name: location.get('locationName'),\n                quantity: locationQuantity\n              });\n              return quantityNeeded - locationQuantity;\n            }\n          }\n        }).bind(this), quantity);\n      }\n      request.set('locationsAffected', locationsAffected);\n      if (markAsConsumed) {\n        requestPurchases.forEach(function (purchase) {\n          promises.push(purchase.save());\n        });\n      }\n      _ember['default'].RSVP.all(promises, 'Preliminary saving done for inventory fulfillment').then((function () {\n        var savePromises = [];\n        savePromises.push(inventoryItem.save());\n        request.set('status', 'Completed');\n        request.set('completedBy', request.getUserName());\n        savePromises.push(request.save());\n        _ember['default'].RSVP.all(savePromises, 'All saving done for inventory fulfillment').then((function () {\n          this.send('doneFulfillRequest');\n          if (closeModal) {\n            this.send('closeModal');\n          }\n          if (!skipTransition) {\n            this.transitionTo('inventory.index');\n          }\n        }).bind(this));\n      }).bind(this));\n    },\n\n    /**\n     * @private\n     * Fulfill the request, decrementing from the purchases available on the inventory item\n     * This function doesn't save anything, it just updates the objects in memory, so\n     * a route will need to ensure that the models affected here get updated.\n     * @param {object} request the request to fulfill.\n     * @param {object} inventoryItem the inventoryItem that should be used for fulfillment.\n     * @param {boolean} increment if the request should increment, not decrement\n     * @returns true if the request is fulfilled; false if it cannot be fulfilled due to a lack\n     * of stock.\n     */\n    _performFulfillment: function _performFulfillment(request, inventoryItem, increment) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var purchases = inventoryItem.get('purchases');\n        var quantityOnHand = inventoryItem.get('quantity');\n        var quantityRequested = request.get('quantity');\n        if (increment || quantityOnHand >= quantityRequested) {\n          var findResult = this._findQuantity(request, purchases, inventoryItem, increment);\n          if (findResult === true) {\n            resolve();\n          } else {\n            reject(findResult);\n          }\n        } else {\n          reject('The quantity on hand, ' + quantityOnHand + ' is less than the requested quantity of ' + quantityRequested + '.');\n        }\n      }).bind(this));\n    }\n\n  });\n});","define('hospitalrun/tests/mixins/fulfill-request.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/fulfill-request.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/fulfill-request.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/hospitalrun-version', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    version: '0.9.16'\n  });\n});","define('hospitalrun/tests/mixins/hospitalrun-version.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/hospitalrun-version.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/hospitalrun-version.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/imaging-pricing-types', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultImagingPricingTypes: ['Imaging Procedure']\n  });\n});","define('hospitalrun/tests/mixins/imaging-pricing-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/imaging-pricing-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/imaging-pricing-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/inventory-adjustment-types', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    adjustmentTypes: [{\n      name: 'Add',\n      type: 'Adjustment (Add)'\n    }, {\n      name: 'Remove',\n      type: 'Adjustment (Remove)'\n    }, {\n      name: 'Return To Vendor',\n      type: 'Return To Vendor'\n    }, {\n      name: 'Return',\n      type: 'Return'\n    }, {\n      name: 'Write Off',\n      type: 'Write Off'\n    }]\n  });\n});","define('hospitalrun/tests/mixins/inventory-adjustment-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/inventory-adjustment-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/inventory-adjustment-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/inventory-id', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    /**\n     * Calculate a new id based on time stamp and randomized number\n     * @return a generated id in base 36 so that its a shorter barcode.\n     */\n    generateId: function generateId() {\n      var min = 1;\n      var max = 999;\n      var part1 = new Date().getTime();\n      var part2 = Math.floor(Math.random() * (max - min + 1)) + min;\n      return _ember['default'].RSVP.resolve(part1.toString(36) + '_' + part2.toString(36));\n    }\n  });\n});","define('hospitalrun/tests/mixins/inventory-id.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/inventory-id.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/inventory-id.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/inventory-locations', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    aisleToFind: null,\n    locationToFind: null,\n\n    _addQuantityToLocation: function _addQuantityToLocation(inventoryItem, quantity, location, aisle) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this._findOrCreateLocation(inventoryItem, location, aisle).then(function (foundLocation) {\n          foundLocation.incrementProperty('quantity', quantity);\n          foundLocation.save().then(resolve, reject);\n        });\n      }).bind(this));\n    },\n\n    _findOrCreateLocation: function _findOrCreateLocation(inventoryItem, location, aisle) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var _this = this;\n\n        var foundLocation = false;\n        var locations = inventoryItem.get('locations');\n        this.set('aisleToFind', aisle);\n        this.set('locationToFind', location);\n\n        foundLocation = locations.find(this.findLocation, this);\n        if (foundLocation) {\n          resolve(foundLocation);\n        } else {\n          (function () {\n            var locationRecord = _this.get('store').createRecord('inv-location', {\n              id: uuid.v4(),\n              aisleLocation: aisle,\n              location: location,\n              quantity: 0\n            });\n            locations.addObject(locationRecord);\n            locationRecord.save().then(function () {\n              resolve(locationRecord);\n            }, reject);\n          })();\n        }\n      }).bind(this));\n    },\n\n    findLocation: function findLocation(inventoryLocation) {\n      var aisleLocation = inventoryLocation.get('aisleLocation');\n      var aisleToFind = this.get('aisleToFind');\n      var itemLocation = inventoryLocation.get('location');\n      var locationToFind = this.get('locationToFind');\n      if ((_ember['default'].isEmpty(aisleLocation) && _ember['default'].isEmpty(aisleToFind) || aisleLocation === aisleToFind) && (_ember['default'].isEmpty(itemLocation) && _ember['default'].isEmpty(locationToFind) || itemLocation === locationToFind)) {\n        return true;\n      }\n    },\n\n    /**\n     * Process a new purchase, updating the corresponding location\n     * with the number of items available.\n     * @returns {Promise} a promise that fulfills once location has been updated.\n     */\n    newPurchaseAdded: function newPurchaseAdded(inventoryItem, newPurchase) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var aisle = newPurchase.get('aisleLocation');\n        var location = newPurchase.get('location');\n        var quantity = parseInt(newPurchase.get('originalQuantity'));\n        this._addQuantityToLocation(inventoryItem, quantity, location, aisle).then(resolve, reject);\n      }).bind(this));\n    },\n\n    /**\n     * Save the location if the quantity is greater than zero, otherwise remove the empty location.\n     * @param {Object} location the location to update or remove.\n     * @param {Object} inventoryItem the inventory item the location belongs to.\n     * @return {Promise} promise for save or remove\n     */\n    saveLocation: function saveLocation(location, inventoryItem) {\n      if (location.get('quantity') === 0) {\n        var locations = inventoryItem.get('locations');\n        locations.removeObject(location);\n        return location.destroyRecord();\n      } else {\n        return location.save();\n      }\n    },\n\n    /**\n     * Transfer items from the current location to the specified location.\n     * @param {Object} inventoryItem the inventory item that items are being transferred from\n     * @param {Object} transferLocation the inventory location to transfer from (also includes\n     * attributes about where to transfer to.\n     * @returns {Promise} a promise that fulfills once the transfer to location has been saved.\n     */\n    transferToLocation: function transferToLocation(inventoryItem, transferLocation) {\n      var aisle = transferLocation.get('transferAisleLocation');\n      var location = transferLocation.get('transferLocation');\n      var quantity = parseInt(transferLocation.get('adjustmentQuantity'));\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this._addQuantityToLocation(inventoryItem, quantity, location, aisle).then(function () {\n          transferLocation.decrementProperty('quantity', quantity);\n          transferLocation.save().then(resolve, reject);\n        }, reject);\n      }).bind(this));\n    }\n  });\n});","define('hospitalrun/tests/mixins/inventory-locations.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/inventory-locations.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/inventory-locations.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/inventory-selection', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    selectedInventoryItem: null,\n\n    /**\n     * For use with the inventory-type ahead.  When an inventory item is selected, resolve the selected\n     * inventory item into an actual model object and set is as inventoryItem.\n     */\n    inventoryItemChanged: (function () {\n      var selectedInventoryItem = this.get('selectedInventoryItem') || this.get('model.selectedInventoryItem');\n      if (!_ember['default'].isEmpty(selectedInventoryItem)) {\n        this.store.find('inventory', selectedInventoryItem.id).then((function (inventoryItem) {\n          var model = this.get('model');\n          model.set('inventoryItem', inventoryItem);\n          _ember['default'].run.once(this, function () {\n            model.validate()['catch'](_ember['default'].K);\n          });\n        }).bind(this));\n      }\n    }).observes('selectedInventoryItem', 'model.selectedInventoryItem')\n  });\n});","define('hospitalrun/tests/mixins/inventory-selection.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/inventory-selection.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/inventory-selection.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/inventory-type-list', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultInventoryTypes: ['Medication', 'Supply'],\n\n    inventoryTypes: (function () {\n      var defaultInventoryTypes = this.get('defaultInventoryTypes');\n      var inventoryTypeList = this.get('inventoryTypeList');\n      var typeList = undefined;\n      if (_ember['default'].isEmpty(inventoryTypeList)) {\n        typeList = defaultInventoryTypes;\n      } else {\n        typeList = inventoryTypeList;\n      }\n      typeList = _hospitalrunUtilsSelectValues['default'].selectValues(typeList);\n      return typeList;\n    }).property('inventoryTypeList', 'defaultInventoryTypes')\n  });\n});","define('hospitalrun/tests/mixins/inventory-type-list.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/inventory-type-list.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/inventory-type-list.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/is-update-disabled', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    isUpdateDisabled: (function () {\n      if (!_ember['default'].isNone(this.get('model.isValid'))) {\n        return !this.get('model.isValid');\n      } else {\n        return false;\n      }\n    }).property('model.isValid')\n  });\n});","define('hospitalrun/tests/mixins/is-update-disabled.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/is-update-disabled.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/is-update-disabled.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/lab-pricing-types', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultLabPricingTypes: ['Lab Procedure']\n  });\n});","define('hospitalrun/tests/mixins/lab-pricing-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/lab-pricing-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/lab-pricing-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/location-name', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    getDisplayLocationName: function getDisplayLocationName(location, aisleLocation) {\n      var locationName = this.formatLocationName(location, aisleLocation);\n      if (_ember['default'].isEmpty(locationName)) {\n        locationName = 'No Location';\n      }\n      return locationName;\n    },\n\n    formatLocationName: function formatLocationName(location, aisleLocation) {\n      var locationName = '';\n      if (!_ember['default'].isEmpty(location)) {\n        locationName += location;\n        if (!_ember['default'].isEmpty(aisleLocation)) {\n          locationName += ' : ';\n        }\n      }\n      if (!_ember['default'].isEmpty(aisleLocation)) {\n        locationName += aisleLocation;\n      }\n      return locationName;\n    },\n\n    locationName: (function () {\n      var aisleLocation = this.get('aisleLocation');\n      var location = this.get('location');\n      return this.getDisplayLocationName(location, aisleLocation);\n    }).property('location', 'aisleLocation')\n  });\n});","define('hospitalrun/tests/mixins/location-name.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/location-name.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/location-name.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/medication-details', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    // Denormalized medication details so that inventory records do not need to be retrieved\n    getMedicationName: function getMedicationName(inventoryAttribute) {\n      var _this = this;\n\n      var medicationTitle = this.get('medicationTitle');\n      if (!_ember['default'].isEmpty(medicationTitle)) {\n        return medicationTitle;\n      } else {\n        var inventoryObject = this.get(inventoryAttribute);\n        if (inventoryObject.then) {\n          this.get(inventoryAttribute).then(function (inventoryItem) {\n            _this.set('medicationTitle', inventoryItem.get('name'));\n          });\n        } else {\n          this.set('medicationTitle', inventoryObject.get('name'));\n        }\n      }\n    },\n\n    getMedicationPrice: function getMedicationPrice(inventoryAttribute) {\n      var _this2 = this;\n\n      var priceOfMedication = this.get('priceOfMedication');\n      if (!_ember['default'].isEmpty(priceOfMedication)) {\n        return priceOfMedication;\n      } else {\n        this.get(inventoryAttribute).then(function (inventoryItem) {\n          _this2.set('priceOfMedication', inventoryItem.get('price'));\n        });\n      }\n    },\n\n    getMedicationDetails: function getMedicationDetails(inventoryAttribute) {\n      var _this3 = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        var medicationTitle = _this3.get('medicationTitle');\n        var priceOfMedication = _this3.get('priceOfMedication');\n        if (!_ember['default'].isEmpty(medicationTitle) && !_ember['default'].isEmpty(priceOfMedication)) {\n          resolve({\n            name: medicationTitle,\n            price: priceOfMedication\n          });\n        } else {\n          var objectInventoryItem = _this3.get(inventoryAttribute);\n          if (objectInventoryItem.then) {\n            _this3.get(inventoryAttribute).then(function (inventoryItem) {\n              resolve({\n                name: inventoryItem.get('name'),\n                price: inventoryItem.get('price')\n              });\n            });\n          } else {\n            resolve({\n              name: objectInventoryItem.get('name'),\n              price: objectInventoryItem.get('price')\n            });\n          }\n        }\n      });\n    },\n\n    medicationTitle: _emberData['default'].attr('string'),\n    priceOfMedication: _emberData['default'].attr('number')\n  });\n});","define('hospitalrun/tests/mixins/medication-details.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/medication-details.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/medication-details.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/modal-helper', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    /**\n     * Display a message in a closable modal.\n     * @param title string containing the title to display.\n     * @param message string containing the message to display.\n     */\n    displayAlert: function displayAlert(title, message, okAction) {\n      var i18n = this.get('i18n');\n      var modalOptions = _ember['default'].Object.extend({\n        updateButtonText: i18n.t('buttons.ok')\n      });\n      this.send('openModal', 'dialog', modalOptions.create({\n        title: title,\n        message: message,\n        okAction: okAction,\n        hideCancelButton: true,\n        updateButtonAction: 'ok'\n      }));\n    },\n\n    displayConfirm: function displayConfirm(title, message, confirmAction, model) {\n      if (_ember['default'].isEmpty(model)) {\n        model = _ember['default'].Object.create();\n      }\n      model.set('confirmAction', confirmAction);\n      model.set('title', title);\n      model.set('message', message);\n      model.set('updateButtonAction', 'confirm');\n      model.set('updateButtonText', 'Ok');\n      this.send('openModal', 'dialog', model);\n    }\n  });\n});","define('hospitalrun/tests/mixins/modal-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/modal-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/modal-helper.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/navigation', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var camelize = _ember['default'].String.camelize;\n  exports['default'] = _ember['default'].Mixin.create({\n    navItems: [{\n      title: 'Inventory',\n      iconClass: 'octicon-package',\n      route: 'inventory',\n      capability: 'inventory',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.index',\n        capability: 'add_inventory_request'\n      }, {\n        title: 'Items',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.listing',\n        capability: 'inventory'\n      }, {\n        title: 'Inventory Received',\n        iconClass: 'octicon-plus',\n        route: 'inventory.batch',\n        subroute: 'new',\n        capability: 'add_inventory_item'\n      }, {\n        title: 'Reports',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.reports',\n        capability: 'inventory'\n      }]\n    }, {\n      title: 'Patients',\n      iconClass: 'octicon-organization',\n      route: 'patients',\n      capability: 'patients',\n      subnav: [{\n        title: 'Patient Listing',\n        iconClass: 'octicon-chevron-right',\n        route: 'patients',\n        capability: 'patients'\n      }, {\n        title: 'Admitted Patients',\n        iconClass: 'octicon-chevron-right',\n        route: 'patients.admitted',\n        capability: 'patients'\n      }, {\n        title: 'New Patient',\n        iconClass: 'octicon-plus',\n        route: 'patients.edit',\n        subroute: 'new',\n        capability: 'add_patient'\n      }, {\n        title: 'Reports',\n        iconClass: 'octicon-chevron-right',\n        route: 'patients.reports',\n        capability: 'patients'\n      }]\n    }, {\n      title: 'Appointments',\n      iconClass: 'octicon-calendar',\n      route: 'appointments.index',\n      capability: 'appointments',\n      subnav: [{\n        title: 'This Week',\n        iconClass: 'octicon-chevron-right',\n        route: 'appointments.index',\n        capability: 'appointments'\n      }, {\n        title: 'Today',\n        iconClass: 'octicon-chevron-right',\n        route: 'appointments.today',\n        capability: 'appointments'\n      }, {\n        title: 'Missed',\n        iconClass: 'octicon-chevron-right',\n        route: 'appointments.missed',\n        capability: 'appointments'\n      }, {\n        title: 'Search',\n        iconClass: 'octicon-search',\n        route: 'appointments.search',\n        capability: 'appointments'\n      }, {\n        title: 'Add Appointment',\n        iconClass: 'octicon-plus',\n        route: 'appointments.edit',\n        subroute: 'new',\n        capability: 'add_appointment'\n      }]\n    }, {\n      title: 'Imaging',\n      iconClass: 'octicon-device-camera',\n      route: 'imaging.index',\n      capability: 'imaging',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'imaging.index',\n        capability: 'imaging'\n      }, {\n        title: 'Completed',\n        iconClass: 'octicon-chevron-right',\n        route: 'imaging.completed',\n        capability: 'imaging'\n      }, {\n        title: 'New Request',\n        iconClass: 'octicon-plus',\n        route: 'imaging.edit',\n        subroute: 'new',\n        capability: 'add_imaging'\n      }]\n    }, {\n      title: 'Medication',\n      iconClass: 'octicon-file-text',\n      route: 'medication.index',\n      capability: 'medication',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'medication.index',\n        capability: 'medication'\n      }, {\n        title: 'Completed',\n        iconClass: 'octicon-chevron-right',\n        route: 'medication.completed',\n        capability: 'medication'\n      }, {\n        title: 'New Request',\n        iconClass: 'octicon-plus',\n        route: 'medication.edit',\n        subroute: 'new',\n        capability: 'add_medication'\n      }, {\n        title: 'Dispense',\n        iconClass: 'octicon-checklist',\n        route: 'medication.edit',\n        subroute: 'dispense',\n        capability: 'fulfill_medication'\n      }, {\n        title: 'Return Medication',\n        iconClass: 'octicon-mail-reply',\n        route: 'medication.return',\n        subroute: 'new',\n        capability: 'add_medication'\n      }]\n    }, {\n      title: 'Labs',\n      iconClass: 'octicon-microscope',\n      route: 'labs.index',\n      capability: 'labs',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'labs.index',\n        capability: 'labs'\n      }, {\n        title: 'Completed',\n        iconClass: 'octicon-chevron-right',\n        route: 'labs.completed',\n        capability: 'labs'\n      }, {\n        title: 'New Request',\n        iconClass: 'octicon-plus',\n        route: 'labs.edit',\n        subroute: 'new',\n        capability: 'add_lab'\n      }]\n    }, {\n      title: 'Billing',\n      iconClass: 'octicon-credit-card',\n      route: 'invoices.index',\n      capability: 'invoices',\n      subnav: [{\n        title: 'Invoices',\n        iconClass: 'octicon-chevron-right',\n        route: 'invoices.index',\n        capability: 'invoices'\n      }, {\n        title: 'New Invoice',\n        iconClass: 'octicon-plus',\n        route: 'invoices.edit',\n        subroute: 'new',\n        capability: 'invoices'\n      }, {\n        title: 'Prices',\n        iconClass: 'octicon-chevron-right',\n        route: 'pricing.index',\n        capability: 'invoices'\n      }, {\n        title: 'Price Profiles',\n        iconClass: 'octicon-chevron-right',\n        route: 'pricing.profiles',\n        capability: 'invoices'\n      }]\n    }, {\n      title: 'Administration',\n      iconClass: 'octicon-person',\n      route: 'admin.lookup',\n      capability: 'admin',\n      subnav: [{\n        title: 'Lookup Lists',\n        iconClass: 'octicon-chevron-right',\n        route: 'admin.lookup',\n        capability: 'update_config'\n      }, {\n        title: 'Address Fields',\n        iconClass: 'octicon-chevron-right',\n        route: 'admin.address',\n        capability: 'update_config'\n      }, {\n        title: 'Load DB',\n        iconClass: 'octicon-plus',\n        route: 'admin.loaddb',\n        capability: 'load_db'\n      }, {\n        title: 'Users',\n        iconClass: 'octicon-chevron-right',\n        route: 'users',\n        capability: 'users'\n      }, {\n        title: 'New User',\n        iconClass: 'octicon-plus',\n        route: 'users.edit',\n        subroute: 'new',\n        capability: 'add_user'\n      }, {\n        title: 'User Roles',\n        iconClass: 'octicon-chevron-right',\n        route: 'admin.roles',\n        capability: 'user_roles'\n      }, {\n        title: 'Workflow',\n        iconClass: 'octicon-chevron-right',\n        route: 'admin.workflow',\n        capability: 'update_config'\n      }]\n    }],\n\n    // Navigation items get mapped localizations\n    localizedNavItems: _ember['default'].computed('navItems.[]', function () {\n      var _this = this;\n\n      var localizationPrefix = 'navigation.';\n      // Supports unlocalized keys for now, otherwise we would get:\n      // \"Missing translation: key.etc.path\"\n      var translationOrOriginal = function translationOrOriginal(translation, original) {\n        // Check for typeof string, because if it's found in localization,\n        // i18n will return a SafeString object, not a string\n        return typeof translation === 'string' ? original : translation;\n      };\n      return this.get('navItems').map(function (nav) {\n        var sectionKey = localizationPrefix + camelize(nav.title).toLowerCase();\n        var navTranslated = _this.get('i18n').t(sectionKey);\n\n        nav.localizedTitle = translationOrOriginal(navTranslated, nav.title);\n        // Map all of the sub navs, too\n        nav.subnav = nav.subnav.map(function (sub) {\n          var subItemKey = localizationPrefix + 'subnav.' + camelize(sub.title);\n          var subTranslated = _this.get('i18n').t(subItemKey);\n\n          sub.localizedTitle = translationOrOriginal(subTranslated, sub.title);\n          return sub;\n        });\n\n        return nav;\n      });\n    })\n  });\n});","define('hospitalrun/tests/mixins/navigation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/navigation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/navigation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/number-format', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    /**\n     * Given an array and property, total all of the property values in the array and return the value.\n     * @param array Array|String either the actual array or the property name of the array on this object.\n     * @param propertyName String the property name in the array values to total.\n     * @param number that contains at most two decimal places.\n     */\n    _calculateTotal: function _calculateTotal(array, propertyName) {\n      var arrayItems = undefined;\n      var total = 0;\n      if (_ember['default'].isArray(array)) {\n        arrayItems = array;\n      } else {\n        arrayItems = this.get(array);\n      }\n      total = arrayItems.reduce((function (previousValue, lineItem) {\n        return previousValue += this._getValidNumber(_ember['default'].get(lineItem, propertyName));\n      }).bind(this), 0);\n      return this._numberFormat(total, true);\n    },\n\n    /**\n     * Determine if number passed in is actually a number.  If it is, return the number; otherwise return 0.\n     * @param number the number to valdiate.\n     * @returns number a valid number.\n     */\n    _getValidNumber: function _getValidNumber(number) {\n      if (_ember['default'].isEmpty(number) || isNaN(number)) {\n        return 0;\n      } else {\n        return Number(number);\n      }\n    },\n\n    /**\n     * Return a formatted number with a maximum of two digits\n     * @param value number to format\n     * @param returnAsNumber boolean to denote if formatted number should be returned\n     * as a number instead of a string\n     * @returns String|Number a formatted String or number containing the formatted number.\n     */\n    _numberFormat: function _numberFormat(value, returnAsNumber) {\n      var returnValue = undefined;\n      if (!_ember['default'].isEmpty(value)) {\n        if (isNaN(value)) {\n          return;\n        }\n        if (Math.round(value) === value) {\n          returnValue = Number(value).toString();\n        } else {\n          returnValue = Number(value).toFixed(2);\n        }\n        if (returnAsNumber) {\n          return Number(returnValue);\n        } else {\n          return returnValue.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,');\n        }\n      }\n    },\n\n    _validNumber: function _validNumber(number) {\n      return !_ember['default'].isEmpty(number) && !isNaN(number) && number > 0;\n    }\n\n  });\n});","define('hospitalrun/tests/mixins/number-format.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/number-format.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/number-format.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/pagination-props', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    paginationProps: (function () {\n      var paginationProperties = ['disableNextPage', 'disablePreviousPage', 'showFirstPageButton', 'showLastPageButton', 'showPagination'];\n      return this.getProperties(paginationProperties);\n    }).property('disableNextPage', 'disablePreviousPage', 'showFirstPageButton', 'showLastPageButton', 'showPagination')\n  });\n});","define('hospitalrun/tests/mixins/pagination-props.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/pagination-props.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/pagination-props.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/paging-actions', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    firstPage: 'firstPage',\n    lastPage: 'lastPage',\n    nextPage: 'nextPage',\n    previousPage: 'previousPage',\n    actions: {\n      firstPage: function firstPage() {\n        this.sendAction('firstPage');\n      },\n      lastPage: function lastPage() {\n        this.sendAction('lastPage');\n      },\n      nextPage: function nextPage() {\n        this.sendAction('nextPage');\n      },\n      previousPage: function previousPage() {\n        this.sendAction('previousPage');\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/paging-actions.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/paging-actions.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/paging-actions.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-appointments', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, _ember, _hospitalrunMixinsPouchdb) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPouchdb['default'], {\n    getPatientAppointments: function getPatientAppointments(patient) {\n      var patientId = patient.get('id');\n      var maxValue = this.get('maxValue');\n      return this.store.query('appointment', {\n        options: {\n          startkey: [patientId, null, null, 'appointment_'],\n          endkey: [patientId, maxValue, maxValue, maxValue]\n        },\n        mapReduce: 'appointments_by_patient'\n      });\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-appointments.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-appointments.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-appointments.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-diagnosis', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    _addDiagnosisToList: function _addDiagnosisToList(diagnosis, diagnosesList, visit) {\n      if (!_ember['default'].isEmpty(diagnosis)) {\n        if (_ember['default'].isEmpty(diagnosesList.findBy('description', diagnosis))) {\n          diagnosesList.addObject({\n            date: visit.get('startDate'),\n            description: diagnosis\n          });\n        }\n      }\n    },\n\n    getPrimaryDiagnoses: function getPrimaryDiagnoses(visits) {\n      var diagnosesList = [];\n      if (!_ember['default'].isEmpty(visits)) {\n        visits.forEach((function (visit) {\n          this._addDiagnosisToList(visit.get('primaryDiagnosis'), diagnosesList, visit);\n          this._addDiagnosisToList(visit.get('primaryBillingDiagnosis'), diagnosesList, visit);\n        }).bind(this));\n      }\n      var firstDiagnosis = diagnosesList.get('firstObject');\n      if (!_ember['default'].isEmpty(firstDiagnosis)) {\n        firstDiagnosis.first = true;\n      }\n      return diagnosesList;\n    },\n\n    getSecondaryDiagnoses: function getSecondaryDiagnoses(visits) {\n      var diagnosesList = [];\n      if (!_ember['default'].isEmpty(visits)) {\n        visits.forEach(function (visit) {\n          if (!_ember['default'].isEmpty(visit.get('additionalDiagnoses'))) {\n            diagnosesList.addObjects(visit.get('additionalDiagnoses'));\n          }\n        });\n      }\n\n      var firstDiagnosis = diagnosesList.get('firstObject');\n      if (!_ember['default'].isEmpty(firstDiagnosis)) {\n        firstDiagnosis.first = true;\n      }\n      return diagnosesList;\n    }\n\n  });\n});","define('hospitalrun/tests/mixins/patient-diagnosis.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-diagnosis.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-diagnosis.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-id', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, _ember, _hospitalrunMixinsPouchdb) {\n  'use strict';\n\n  exports.sequenceId = sequenceId;\n  var inject = _ember['default'].inject;\n  var isEmpty = _ember['default'].isEmpty;\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPouchdb['default'], {\n    idPrefix: null,\n    database: inject.service(),\n    config: inject.service(),\n\n    /**\n    * Override this function to generate an id for a new record\n    * @return a generated id;default is null which means that an\n    * id will be automatically generated via Ember data.\n    */\n    generateFriendlyId: function generateFriendlyId() {\n      var _this = this;\n\n      var config = this.get('config');\n      var database = this.get('database');\n      var maxValue = this.get('maxValue');\n\n      var findUnusedId = function findUnusedId(sequence) {\n        var current = undefined,\n            id = undefined;\n        return config.getPatientPrefix().then(function (prefix) {\n          current = sequence.get('value');\n          id = sequenceId(prefix, current);\n          var query = {\n            startkey: [id, null],\n            endkey: [id, maxValue]\n          };\n          return database.queryMainDB(query, 'patient_by_display_id');\n        }).then(function (found) {\n          if (!isEmpty(found.rows)) {\n            sequence.incrementProperty('value');\n            return findUnusedId(sequence);\n          }\n          if (sequence.get('hasDirtyAttributes')) {\n            return sequence.save().then(function () {\n              return id;\n            });\n          }\n          return id;\n        });\n      };\n\n      return this.store.find('sequence', 'patient').then(findUnusedId)['catch'](function () {\n        var store = _this.get('store');\n        var sequence = store.push(store.normalize('sequence', {\n          id: 'patient',\n          value: 1\n        }));\n        return findUnusedId(sequence);\n      });\n    }\n  });\n\n  function sequenceId(prefix, sequence) {\n    if (sequence < 100000) {\n      sequence = ('00000' + sequence).slice(-5);\n    }\n    return '' + prefix + sequence;\n  }\n});","define('hospitalrun/tests/mixins/patient-id.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-id.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-id.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-invoices', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, _ember, _hospitalrunMixinsPouchdb) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPouchdb['default'], {\n    getPatientInvoices: function getPatientInvoices(patient) {\n      var patientId = patient.get('id');\n      return this.store.query('invoice', {\n        options: {\n          key: patientId\n        },\n        mapReduce: 'invoice_by_patient'\n      });\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-invoices.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-invoices.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-invoices.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-list-route', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    database: _ember['default'].inject.service(),\n\n    /**\n     * Lazily load patient list so that it doesn't impact performance.\n     */\n    _fetchPatientList: function _fetchPatientList(controller) {\n      var patientQuery = {\n        startkey: 'patient_',\n        endkey: 'patient_￿',\n        include_docs: true\n      };\n      var database = this.get('database');\n      database.queryMainDB(patientQuery).then(function (result) {\n        if (result.rows) {\n          var list = result.rows.map(function (row) {\n            return row.doc;\n          });\n          controller.set('patientList', list);\n        }\n      });\n    },\n\n    actions: {\n      returnToPatient: function returnToPatient() {\n        this.controller.send('returnToPatient');\n        this.controller.send('closeModal');\n      },\n\n      returnToVisit: function returnToVisit() {\n        this.controller.send('returnToVisit');\n      }\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      this._fetchPatientList(controller);\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-list-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-list-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-list-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-name', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    getPatientDisplayId: function getPatientDisplayId(patient) {\n      var externalPatientId = _ember['default'].get(patient, 'externalPatientId');\n      var friendlyId = _ember['default'].get(patient, 'friendlyId');\n      var id = _ember['default'].get(patient, 'id');\n      if (!_ember['default'].isEmpty(friendlyId)) {\n        return friendlyId;\n      } else if (!_ember['default'].isEmpty(externalPatientId)) {\n        return externalPatientId;\n      } else {\n        return id;\n      }\n    },\n\n    getPatientDisplayName: function getPatientDisplayName(patient) {\n      var firstName = _ember['default'].get(patient, 'firstName');\n      var lastName = _ember['default'].get(patient, 'lastName');\n      var middleName = _ember['default'].get(patient, 'middleName');\n      var nameArray = [];\n      if (!_ember['default'].isEmpty(firstName)) {\n        nameArray.push(firstName);\n      }\n      if (!_ember['default'].isEmpty(middleName)) {\n        nameArray.push(middleName);\n      }\n      if (!_ember['default'].isEmpty(lastName)) {\n        nameArray.push(lastName);\n      }\n      return nameArray.join(' ');\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-name.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-name.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-name.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-notes', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n\n    canAddNote: function canAddNote() {\n      return this.currentUserCan('add_note') && (!_ember['default'].isEmpty(this.get('visits')) || !_ember['default'].isEmpty(this.get('model.visits')));\n    },\n\n    canDeleteNote: function canDeleteNote() {\n      return this.currentUserCan('delete_note');\n    },\n\n    _computeNoteType: function _computeNoteType(visit) {\n      switch (visit.get('visitType')) {\n        case 'Admission':\n          if (_ember['default'].isEmpty(visit.get('procedures'))) {\n            return 'Pre-op';\n          } else {\n            return 'Post-op';\n          }\n        case 'Clinic':\n        case 'Followup':\n          return 'General';\n        default:\n          return visit.get('visitType');\n      }\n    },\n\n    _setNoteType: function _setNoteType() {\n      var model = this.get('model');\n      if (model.get('noteType') == null) {\n        model.set('noteType', this._computeNoteType(model.get('visit')));\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-notes.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-notes.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-notes.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-submodule', ['exports', 'ember-data', 'ember', 'hospitalrun/mixins/patient-visits', 'hospitalrun/utils/select-values'], function (exports, _emberData, _ember, _hospitalrunMixinsPatientVisits, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPatientVisits['default'], {\n    findPatientVisits: true, // Override to false if visits shouldn't be set when patient is selected.\n    needToUpdateVisit: false,\n    patientList: null,\n    selectedPatient: null,\n    newVisitAdded: null,\n\n    actions: {\n      showPatient: function showPatient(patient) {\n        this.transitionToRoute('patients.edit', patient);\n      },\n\n      returnToAllItems: function returnToAllItems() {\n        this._cancelUpdate();\n        this.send('allItems');\n      },\n      returnToPatient: function returnToPatient() {\n        this._cancelUpdate();\n        this.transitionToRoute('patients.edit', this.get('returnPatientId'));\n      },\n      returnToVisit: function returnToVisit() {\n        this._cancelUpdate();\n        this.transitionToRoute('visits.edit', this.get('returnVisitId'));\n      }\n    },\n\n    /**\n     * Add the specified child to the current visit and then save the visit.  If a visit\n     * has not been selected, create a new visit and add it to the selected patient.\n     * @param {Object} objectToAdd the object to add.\n     * @param {string} childName the name of the child object on the visit to add to.\n     * @param {string} newVisitType if a new visit needs to be created, what type of visit\n     * should be created.\n     * @returns {Promise} promise that will resolve or reject depending on whether or\n     * not the add and subsequent saves were successful.\n     */\n    addChildToVisit: function addChildToVisit(objectToAdd, childName, newVisitType) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var visit = this.get('model.visit');\n        if (_ember['default'].isEmpty(visit)) {\n          visit = this.createNewVisit(newVisitType).then((function (savedVisit) {\n            this._finishAddChildToVisit(objectToAdd, childName, savedVisit, resolve, reject);\n          }).bind(this), reject);\n        } else {\n          this._finishAddChildToVisit(objectToAdd, childName, visit, resolve, reject);\n        }\n      }).bind(this));\n    },\n\n    _finishAddChildToVisit: function _finishAddChildToVisit(objectToAdd, childName, visit, resolve, reject) {\n      visit.get(childName).then((function (visitChildren) {\n        visitChildren.addObject(objectToAdd);\n        this.set('needToUpdateVisit', true);\n        resolve(visit);\n      }).bind(this), reject);\n    },\n\n    cancelAction: (function () {\n      var returnToPatient = this.get('model.returnToPatient');\n      var returnToVisit = this.get('model.returnToVisit');\n      if (returnToVisit) {\n        return 'returnToVisit';\n      } else if (returnToPatient) {\n        return 'returnToPatient';\n      } else {\n        return 'returnToAllItems';\n      }\n    }).property('model.returnToPatient', 'model.returnToVisit'),\n\n    createNewVisit: function createNewVisit(newVisitType) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var model = this.get('model');\n        var patient = model.get('patient');\n        var visit = this.get('store').createRecord('visit', {\n          startDate: new Date(),\n          endDate: new Date(),\n          outPatient: true,\n          patient: patient,\n          visitType: newVisitType\n        });\n        model.set('visit', visit);\n        visit.save().then((function () {\n          visit.reload().then((function (updatedVisit) {\n            this.set('newVisitAdded', updatedVisit);\n            model.set('visit', updatedVisit);\n            resolve(updatedVisit);\n          }).bind(this), reject);\n        }).bind(this), reject)['catch']((function (err) {\n          console.log('Error creating new visit');\n          reject(err);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    deleteChildFromVisit: function deleteChildFromVisit(childName) {\n      var _this = this;\n\n      var recordToDelete = this.get('model');\n      recordToDelete.set('archived', true);\n      this.removeChildFromVisit(recordToDelete, childName).then(function () {\n        recordToDelete.save().then(function () {\n          recordToDelete.unloadRecord();\n          _this.send('closeModal');\n        });\n      });\n    },\n\n    patientId: _ember['default'].computed.alias('model.patient.id'),\n\n    patientVisits: (function () {\n      var patient = this.get('model.patient');\n      var visitPromise = undefined;\n\n      if (!_ember['default'].isEmpty(patient) && this.get('findPatientVisits')) {\n        visitPromise = this.getPatientVisits(patient);\n      } else if (_ember['default'].isEmpty(patient) && this.get('findPatientVisits')) {\n        visitPromise = _ember['default'].RSVP.resolve([]);\n      }\n      return _emberData['default'].PromiseArray.create({\n        promise: visitPromise\n      });\n    }).property('model.patient.id', 'newVisitAdded'),\n\n    selectedPatientChanged: (function () {\n      var selectedPatient = this.get('selectedPatient');\n      if (!_ember['default'].isEmpty(selectedPatient)) {\n        this.store.find('patient', selectedPatient.id).then((function (item) {\n          this.set('model.patient', item);\n          _ember['default'].run.once(this, function () {\n            this.get('model').validate()['catch'](_ember['default'].K);\n          });\n        }).bind(this));\n      } else {\n        this.set('model.patient', null);\n      }\n    }).observes('selectedPatient'),\n\n    patientIdChanged: (function () {\n      var patientId = this.get('patientId');\n      if (!_ember['default'].isEmpty(patientId)) {\n        this.set('returnPatientId', patientId);\n      }\n    }).observes('patientId').on('init'),\n\n    returnPatientId: null,\n    returnVisitId: null,\n    patientVisitsForSelect: (function () {\n      return _emberData['default'].PromiseArray.create({\n        promise: this.get('patientVisits').then(function (patientVisits) {\n          return patientVisits.map(_hospitalrunUtilsSelectValues['default'].selectObjectMap);\n        })\n      });\n    }).property('patientVisits.[]'),\n\n    /**\n     * Removes the specified child from the current visit object and then saves the visit.\n     * @param {Object} objectToRemove the object to remove.\n     * @param {string} childName the name of the child object on the visit to remove from.\n     * @returns {Promise} promise that will resolve or reject depending on whether or\n     * not the remove and subsequent save were successful.\n     */\n    removeChildFromVisit: function removeChildFromVisit(objectToRemove, childName) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var childPromises = [];\n        var visit = this.get('model.visit');\n        childPromises.addObjects(this.resolveVisitChildren());\n        _ember['default'].RSVP.all(childPromises, 'Resolved visit children before removing ' + childName).then((function () {\n          visit.get(childName).then((function (visitChildren) {\n            visitChildren.removeObject(objectToRemove);\n            visit.save().then(resolve, reject);\n          }).bind(this), reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    /**\n     * Observer on visits to make sure async relationships are resolved.\n     * @returns {array} of promises which can be used to ensure\n     * all relationships have resolved.\n     */\n    resolveVisitChildren: function resolveVisitChildren() {\n      var promises = [];\n      var visit = this.get('model.visit');\n      if (!_ember['default'].isEmpty(visit)) {\n        // Make sure all the async relationships are resolved\n        promises.push(visit.get('imaging'));\n        promises.push(visit.get('labs'));\n        promises.push(visit.get('medication'));\n        promises.push(visit.get('procedures'));\n        promises.push(visit.get('vitals'));\n      }\n      return promises;\n    },\n\n    /**\n     * If visit needs to saved, save it and then display an alert message; otherwise\n     * just display the alert message.\n     * @param alertTitle String the title to use on the alert.\n     * @param alertMessage String the message to display in the alert.\n     */\n    saveVisitIfNeeded: function saveVisitIfNeeded(alertTitle, alertMessage, alertAction) {\n      if (this.get('needToUpdateVisit')) {\n        this.get('model.visit').save().then((function () {\n          this.set('needToUpdateVisit', false);\n          this.displayAlert(alertTitle, alertMessage, alertAction);\n        }).bind(this));\n      } else {\n        this.displayAlert(alertTitle, alertMessage, alertAction);\n      }\n    },\n\n    visitIdChanged: (function () {\n      var visitId = this.get('visitId');\n      if (!_ember['default'].isEmpty(visitId)) {\n        this.set('returnVisitId', visitId);\n      }\n    }).observes('visitId').on('init'),\n\n    visitId: _ember['default'].computed.alias('model.visit.id'),\n    visitsController: _ember['default'].computed.alias('controllers.visits')\n  });\n});","define('hospitalrun/tests/mixins/patient-submodule.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-submodule.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-submodule.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/patient-visits', ['exports', 'ember', 'hospitalrun/mixins/pouchdb'], function (exports, _ember, _hospitalrunMixinsPouchdb) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create(_hospitalrunMixinsPouchdb['default'], {\n    getPatientVisits: function getPatientVisits(patient) {\n      var maxValue = this.get('maxValue');\n      var patientId = patient.get('id');\n      return this.store.query('visit', {\n        options: {\n          startkey: [patientId, null, null, null, 'visit_'],\n          endkey: [patientId, maxValue, maxValue, maxValue, maxValue]\n        },\n        mapReduce: 'visit_by_patient',\n        debug: true\n      });\n    }\n  });\n});","define('hospitalrun/tests/mixins/patient-visits.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/patient-visits.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/patient-visits.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/payment-profiles', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    paymentProfiles: ['Private', 'Discounted', 'Free']\n  });\n});","define('hospitalrun/tests/mixins/payment-profiles.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/payment-profiles.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/payment-profiles.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/pouch-adapter-utils', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    session: _ember['default'].inject.service(),\n    _pouchError: function _pouchError(reject) {\n      return (function (err) {\n        if (err.status === 401) {\n          // User is unauthorized; reload to force login.\n          var session = this.get('session');\n          if (!_ember['default'].isEmpty(session) && session.get('isAuthenticated')) {\n            session.invalidate();\n          }\n        }\n        var errmsg = [err.status, (err.name || err.error) + ':', err.message || err.reason].join(' ');\n        _ember['default'].run(null, reject, errmsg);\n      }).bind(this);\n    }\n  });\n});","define('hospitalrun/tests/mixins/pouch-adapter-utils.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/pouch-adapter-utils.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/pouch-adapter-utils.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/pouchdb', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    maxValue: '￿'\n  });\n});","define('hospitalrun/tests/mixins/pouchdb.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/pouchdb.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/pouchdb.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/progress-dialog', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    progressDialog: null,\n    progressDialogDefaults: {\n      showProgress: true,\n      hideCancelButton: true,\n      hideUpdateButton: true,\n      progressBarValue: 0,\n      progressBarStyle: 'width: 0%;'\n    },\n    progressInterval: 500,\n    progressMessage: null,\n    progressTimer: null,\n    progressTitle: null,\n\n    scheduleProgress: function scheduleProgress(f) {\n      return _ember['default'].run.later(this, function () {\n        f.apply(this);\n        this.set('progressTimer', this.scheduleProgress(f));\n      }, this.get('progressInterval'));\n    },\n\n    updateProgressBar: function updateProgressBar() {\n      var progressDialog = this.get('progressDialog');\n      var progressBarValue = progressDialog.get('progressBarValue');\n      progressBarValue += 10;\n      if (progressBarValue > 100) {\n        progressBarValue = 0;\n      }\n      progressDialog.set('progressBarValue', progressBarValue);\n      var progressBarStyle = _ember['default'].String.htmlSafe('width: ' + progressBarValue + '%');\n      progressDialog.set('progressBarStyle', progressBarStyle);\n    },\n\n    closeProgressModal: function closeProgressModal() {\n      _ember['default'].run.cancel(this.get('progressTimer'));\n      this.send('closeModal');\n    },\n\n    showProgressModal: function showProgressModal() {\n      var progressDialog = _ember['default'].Object.create(this.get('progressDialogDefaults'));\n      progressDialog.progressBarStyle = new _ember['default'].String.htmlSafe(progressDialog.progressBarStyle);\n      progressDialog.set('title', this.get('progressTitle'));\n      progressDialog.set('message', this.get('progressMessage'));\n      this.set('progressDialog', progressDialog);\n      this.set('progressTimer', this.scheduleProgress(this.get('updateProgressBar')));\n      this.send('openModal', 'dialog', progressDialog);\n    }\n  });\n});","define('hospitalrun/tests/mixins/progress-dialog.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/progress-dialog.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/progress-dialog.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/publish-statuses', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    publishStatuses: ['Draft', 'Published', 'Private', 'Archived']\n  });\n});","define('hospitalrun/tests/mixins/publish-statuses.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/publish-statuses.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/publish-statuses.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/result-validation', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    validations: {\n      result: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!object.get('hasDirtyAttributes')) {\n              return false;\n            }\n            var status = object.get('status');\n            var result = object.get('result');\n            if (status === 'Completed' && _ember['default'].isEmpty(result)) {\n              // force validation to fail\n              return true;\n            }\n            return false;\n          },\n          message: (0, _emberI18n.translationMacro)('errors.result')\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/mixins/result-validation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/result-validation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/result-validation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/return-to', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    cancelAction: (function () {\n      var returnTo = this.get('model.returnTo');\n      if (_ember['default'].isEmpty(returnTo)) {\n        return 'allItems';\n      } else {\n        return 'returnTo';\n      }\n    }).property('returnTo')\n  });\n});","define('hospitalrun/tests/mixins/return-to.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/return-to.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/return-to.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/setup-user-role', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    setupUserRole: function setupUserRole() {\n      var session = this.get('session');\n      var userRole = session.get('data.authenticated.role');\n      return this.get('store').find('user-role', userRole.dasherize()).then(function (userCaps) {\n        session.set('data.authenticated.userCaps', userCaps.get('capabilities'));\n        var sessionStore = session.get('store');\n        var sessionData = session.get('data');\n        sessionStore.persist(sessionData);\n        return true;\n      })['catch'](_ember['default'].K);\n    }\n  });\n});","define('hospitalrun/tests/mixins/setup-user-role.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/setup-user-role.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/setup-user-role.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/unit-types', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultUnitList: ['ampoule', 'bag', 'bottle', 'box', 'bundle', 'capsule', 'case', 'container', 'cream', 'each', 'gel', 'nebule', 'ointment', 'pack', 'pair', 'pallet', 'patch', 'pcs', 'pill', 'plastic', 'polyamp', 'roll', 'spray', 'suppository', 'suspension', 'set', 'syrup', 'tablet', 'tray', 'tube', 'vial'],\n\n    unitList: (function () {\n      var defaultUnitList = this.get('defaultUnitList');\n      var inventoryUnitList = this.get('inventoryUnitList');\n      if (_ember['default'].isEmpty(inventoryUnitList)) {\n        return defaultUnitList;\n      } else {\n        return inventoryUnitList;\n      }\n    }).property('inventoryUnitList', 'defaultUnitList'),\n\n    unitListForSelect: _ember['default'].computed.map('unitList', _hospitalrunUtilsSelectValues['default'].selectValuesMap)\n  });\n});","define('hospitalrun/tests/mixins/unit-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/unit-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/unit-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/user-roles', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    userRoles: [{ name: 'Data Entry', roles: ['Data Entry', 'user'] }, { name: 'Doctor', roles: ['Doctor', 'user'] }, { name: 'Finance', roles: ['Finance', 'user'] }, { name: 'Finance Manager', roles: ['Finance Manager', 'user'] }, { name: 'Hospital Administrator', roles: ['Hospital Administrator', 'user'] }, { name: 'Inventory Manager', roles: ['Inventory Manager', 'user'] }, { name: 'Imaging Technician', roles: ['Imaging Technician', 'user'] }, { name: 'Lab Technician', roles: ['Lab Technician', 'user'] }, { name: 'Medical Records Officer', roles: ['Medical Records Officer', 'user'] }, { name: 'Nurse', roles: ['Nurse', 'user'] }, { name: 'Nurse Manager', roles: ['Nurse Manager', 'user'] }, { name: 'Patient Administration', roles: ['Patient Administration', 'user'] }, { name: 'Pharmacist', roles: ['Pharmacist', 'user'] }, { name: 'Social Worker', roles: ['Social Worker', 'user'] }, { name: 'System Administrator', roles: ['System Administrator', 'admin', 'user'] }, { name: 'User Administrator', roles: ['User Administrator', 'admin', 'user'] }]\n  });\n});","define('hospitalrun/tests/mixins/user-roles.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/user-roles.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/user-roles.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/user-session', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    session: _ember['default'].inject.service(),\n    defaultCapabilities: {\n      admin: ['User Administrator', 'System Administrator'],\n      appointments: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      add_appointment: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      add_charge: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      add_diagnosis: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],\n      add_medication: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Pharmacist', 'System Administrator'],\n      add_photo: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      add_patient: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      add_pricing: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      add_pricing_profile: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      add_lab: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Lab Technician', 'System Administrator'],\n      add_imaging: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Imaging Technician', 'Medical Records Officer', 'System Administrator'],\n      add_inventory_request: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'Nurse Manager', 'Pharmacist', 'System Administrator'],\n      add_inventory_item: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],\n      add_inventory_purchase: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],\n      add_invoice: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      add_payment: ['Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      add_procedure: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'System Administrator'],\n      add_socialwork: ['Hospital Administrator', 'Medical Records Officer', 'Social Worker', 'System Administrator'],\n      add_user: ['User Administrator', 'System Administrator'],\n      add_visit: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      add_vitals: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'System Administrator'],\n      admit_patient: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      adjust_inventory_location: ['Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],\n      billing: ['Hospital Administrator', 'Finance', 'Finance Manager', 'System Administrator'],\n      complete_imaging: ['Imaging Technician', 'Medical Records Officer', 'System Administrator'],\n      complete_lab: ['Lab Technician', 'Medical Records Officer', 'System Administrator'],\n      delete_appointment: ['Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      delete_diagnosis: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],\n      delete_inventory_item: ['Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'System Administrator'],\n      delete_imaging: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_invoice: ['Hospital Administrator', 'System Administrator'],\n      delete_lab: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_medication: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_photo: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      delete_patient: ['Hospital Administrator', 'Medical Records Officer', 'Patient Administration', 'System Administrator'],\n      delete_pricing: ['Finance', 'Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_pricing_profile: ['Finance', 'Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      delete_procedure: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'System Administrator'],\n      delete_socialwork: ['Hospital Administrator', 'Medical Records Officer', 'Social Worker', 'System Administrator'],\n      delete_vitals: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'System Administrator'],\n      delete_visit: ['Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      delete_user: ['User Administrator', 'System Administrator'],\n      discharge_patient: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      edit_invoice: ['Data Entry', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      fulfill_inventory: ['Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'Pharmacist', 'System Administrator'],\n      fulfill_medication: ['Medical Records Officer', 'Pharmacist', 'System Administrator'],\n      imaging: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Imaging Technician', 'Medical Records Officer', 'System Administrator'],\n      invoices: ['Hospital Administrator', 'Finance', 'Finance Manager', 'System Administrator'],\n      labs: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Lab Technician', 'Medical Records Officer', 'System Administrator'],\n      medication: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Pharmacist', 'System Administrator'],\n      inventory: ['Data Entry', 'Hospital Administrator', 'Inventory Manager', 'Medical Records Officer', 'Nurse Manager', 'Pharmacist', 'System Administrator'],\n      load_db: ['System Administrator'],\n      override_invoice: ['Hospital Administrator', 'System Administrator'],\n      query_db: ['System Administrator'],\n      patients: ['Data Entry', 'Doctor', 'Finance', 'Finance Manager', 'Hospital Administrator', 'Imaging Technician', 'Lab Technician', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'Social Worker', 'System Administrator'],\n\n      patient_reports: ['Hospital Administrator', 'Patient Administration', 'System Administrator'],\n\n      pricing: ['Data Entry', 'Finance', 'Hospital Administrator', 'Medical Records Officer', 'System Administrator'],\n      visits: ['Data Entry', 'Doctor', 'Hospital Administrator', 'Medical Records Officer', 'Nurse Manager', 'Nurse', 'Patient Administration', 'Social Worker', 'System Administrator'],\n      update_config: ['System Administrator'],\n      users: ['User Administrator', 'System Administrator'],\n      add_note: ['Doctor', 'Medical Records Officer', 'Nurse', 'Nurse Manager', 'Patient Administration', 'System Administrator'],\n      delete_note: ['Medical Records Officer', 'Nurse Manager', 'Patient Administration', 'System Administrator'],\n      'user_roles': ['System Administrator']\n    },\n\n    _getUserSessionVars: function _getUserSessionVars() {\n      var session = this.get('session');\n      if (!_ember['default'].isEmpty(session) && session.get('isAuthenticated')) {\n        return session.get('data.authenticated');\n      }\n    },\n\n    currentUserCan: function currentUserCan(capability) {\n      var sessionVars = this._getUserSessionVars();\n      if (!_ember['default'].isEmpty(sessionVars) && !_ember['default'].isEmpty(sessionVars.role)) {\n        var userCaps = this.get('session').get('data.authenticated.userCaps');\n        if (_ember['default'].isEmpty(userCaps)) {\n          var capabilities = this.get('defaultCapabilities');\n          var supportedRoles = capabilities[capability];\n          if (!_ember['default'].isEmpty(supportedRoles)) {\n            return supportedRoles.includes(sessionVars.role);\n          }\n        } else {\n          return userCaps.includes(capability);\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Returns the display name of the user or the username if\n     * the display name is not set or if the username is explictly requested.\n     * @param {boolean} returnUserName if true, always return the username instead\n     * of the display name even if the display name is set.\n     */\n    getUserName: function getUserName(returnUserName) {\n      var returnName = undefined;\n      var sessionVars = this._getUserSessionVars();\n      if (!_ember['default'].isEmpty(sessionVars)) {\n        if (returnUserName) {\n          returnName = sessionVars.name;\n        } else if (!_ember['default'].isEmpty(sessionVars.displayName)) {\n          returnName = sessionVars.displayName;\n        } else if (!_ember['default'].isEmpty(sessionVars.name)) {\n          returnName = sessionVars.name;\n        }\n      }\n      return returnName;\n    }\n  });\n});","define('hospitalrun/tests/mixins/user-session.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/user-session.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/user-session.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/mixins/visit-types', ['exports', 'ember', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Mixin.create({\n    defaultVisitTypes: ['Admission', 'Clinic', 'Followup', 'Imaging', 'Lab', 'Pharmacy'],\n\n    _getVisitTypes: function _getVisitTypes(includeEmpty) {\n      var defaultVisitTypes = this.get('defaultVisitTypes');\n      var visitTypesList = this.get('visitTypesList');\n      var visitList = undefined;\n      if (_ember['default'].isEmpty(visitTypesList)) {\n        visitList = defaultVisitTypes;\n      } else {\n        visitList = visitTypesList.get('value');\n      }\n      visitList = _hospitalrunUtilsSelectValues['default'].selectValues(visitList, includeEmpty);\n      return visitList;\n    },\n\n    visitTypes: (function () {\n      return this._getVisitTypes();\n    }).property('visitTypesList', 'defaultVisitTypes').volatile(),\n\n    visitTypesWithEmpty: (function () {\n      return this._getVisitTypes(true);\n    }).property('visitTypesList', 'defaultVisitTypes').volatile()\n  });\n});","define('hospitalrun/tests/mixins/visit-types.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - mixins/visit-types.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/visit-types.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/abstract', ['exports', 'ember-data', 'ember', 'ember-validations', 'ember-pouch', 'hospitalrun/mixins/user-session'], function (exports, _emberData, _ember, _emberValidations, _emberPouch, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend(_hospitalrunMixinsUserSession['default'], _emberValidations['default'], {\n    session: _ember['default'].inject.service(),\n    archived: _emberData['default'].attr('boolean'),\n    lastModified: _emberData['default'].attr('date'),\n    modifiedBy: _emberData['default'].attr(),\n    modifiedFields: _emberData['default'].attr(),\n\n    /**\n    * Before saving the record, update the modifiedFields attribute to denote what fields were changed when.\n    * Also, if the save failed because of a conflict, reload the record and reapply the changed attributes and\n    * attempt to save again.\n    */\n    save: function save(options) {\n      var attribute = undefined;\n      var changedAttributes = this.changedAttributes();\n      var modifiedDate = new Date();\n      var modifiedFields = this.get('modifiedFields');\n      var session = this.get('session');\n\n      if (!session || !session.get('isAuthenticated')) {\n        return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n          _ember['default'].run(null, reject, 'ERROR you must be logged in to save');\n        });\n      }\n\n      if (this.get('hasDirtyAttributes') && !this.get('isDeleted')) {\n        if (_ember['default'].isEmpty(modifiedFields)) {\n          modifiedFields = {};\n        }\n        this.set('lastModified', modifiedDate);\n        for (attribute in changedAttributes) {\n          modifiedFields[attribute] = modifiedDate;\n        }\n        this.set('modifiedFields', modifiedFields);\n        this.set('modifiedBy', this.getUserName());\n      }\n      return this._super(options)['catch']((function (error) {\n        if (!_ember['default'].isEmpty(options) && options.retry) {\n          throw error;\n        } else {\n          if (error.name && error.name.indexOf && error.name.indexOf('conflict') > -1) {\n            // Conflict encountered, so rollback, reload and then save the record with the changed attributes.\n            this.rollbackAttributes();\n            return this.reload().then(function (record) {\n              for (var _attribute in changedAttributes) {\n                record.set(_attribute, changedAttributes[_attribute][1]);\n              }\n              if (_ember['default'].isEmpty(options)) {\n                options = {};\n              }\n              options.retry = true;\n              return record.save(options);\n            });\n          } else {\n            throw error;\n          }\n        }\n      }).bind(this));\n    }\n  });\n});","define('hospitalrun/tests/models/abstract.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/abstract.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/abstract.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/add-diagnosis', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {\n  /**\n   * Stub model for adding new patient diagnoses; needed for validation.\n   */\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {\n    diagnosis: _emberData['default'].attr('string'),\n    validations: {\n      diagnosis: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/add-diagnosis.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/add-diagnosis.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/add-diagnosis.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/appointment', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/utils/patient-validation'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunUtilsPatientValidation) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    allDay: _emberData['default'].attr(),\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    visits: _emberData['default'].hasMany('visit'),\n    provider: _emberData['default'].attr('string'),\n    location: _emberData['default'].attr('string'),\n    appointmentType: _emberData['default'].attr('string'),\n    startDate: _emberData['default'].attr('date'),\n    endDate: _emberData['default'].attr('date'),\n    notes: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string', { defaultValue: 'Scheduled' }),\n\n    longDateFormat: 'l h:mm A',\n    shortDateFormat: 'l',\n    timeFormat: 'h:mm A',\n\n    _getDateSpan: function _getDateSpan(startDate, endDate, format) {\n      var formattedStart = startDate.format(format);\n      var formattedEnd = endDate.format(format);\n      return formattedStart + ' - ' + formattedEnd;\n    },\n\n    appointmentDate: (function () {\n      var startDate = this.get('startDate');\n      return startDate;\n    }).property('startDate'),\n\n    displayStatus: (function () {\n      var status = this.get('status');\n      if (_ember['default'].isEmpty(status)) {\n        status = 'Scheduled';\n      }\n      return status;\n    }).property('status'),\n\n    formattedAppointmentDate: (function () {\n      var allDay = this.get('allDay');\n      var endDate = moment(this.get('endDate'));\n      var dateFormat = '';\n      var formattedDate = '';\n      var startDate = moment(this.get('startDate'));\n\n      if (startDate.isSame(endDate, 'day')) {\n        formattedDate = startDate.format(this.get('shortDateFormat'));\n        if (!allDay) {\n          formattedDate += ' ';\n          formattedDate += this._getDateSpan(startDate, endDate, this.get('timeFormat'));\n        }\n      } else {\n        if (allDay) {\n          dateFormat = this.get('shortDateFormat');\n        } else {\n          dateFormat = this.get('longDateFormat');\n        }\n        formattedDate = this._getDateSpan(startDate, endDate, dateFormat);\n      }\n      return formattedDate;\n    }).property('startDate', 'endDate'),\n\n    validations: {\n      appointmentDate: {\n        presence: {\n          'if': function _if(object) {\n            var appointmentType = object.get('appointmentType');\n            return appointmentType !== 'Admission';\n          }\n        }\n      },\n\n      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,\n\n      patient: {\n        presence: true\n      },\n      appointmentType: {\n        presence: true\n      },\n      location: {\n        presence: true\n      },\n      startDate: {\n        presence: true\n      },\n      endDate: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!object.get('hasDirtyAttributes')) {\n              return false;\n            }\n            var allDay = object.get('allDay');\n            var startDate = object.get('startDate');\n            var endDate = object.get('endDate');\n            if (_ember['default'].isEmpty(endDate) || _ember['default'].isEmpty(startDate)) {\n              // force validation to fail\n              return true;\n            } else {\n              if (allDay) {\n                if (endDate.getTime() < startDate.getTime()) {\n                  return true;\n                }\n              } else {\n                if (endDate.getTime() <= startDate.getTime()) {\n                  return true;\n                }\n              }\n            }\n            // patient is properly selected; don't do any further validation\n            return false;\n          },\n          message: 'Please select an end date later than the start date'\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/appointment.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/appointment.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/appointment.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/billing-line-item', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/number-format'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsNumberFormat) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsNumberFormat['default'], {\n    amountOwed: _emberData['default'].attr('number'),\n    category: _emberData['default'].attr('string'),\n    description: _emberData['default'].attr('string'),\n    details: _emberData['default'].hasMany('line-item-detail', {\n      async: false\n    }), /* The individual objects that make up this line item. */\n    discount: _emberData['default'].attr('number'),\n    name: _emberData['default'].attr('string'),\n    nationalInsurance: _emberData['default'].attr('number'),\n    privateInsurance: _emberData['default'].attr('number'),\n\n    amountOwedChanged: (function () {\n      _ember['default'].run.debounce(this, function () {\n        var discount = this._getValidNumber(this.get('discount'));\n        var nationalInsurance = this._getValidNumber(this.get('nationalInsurance'));\n        var privateInsurance = this._getValidNumber(this.get('privateInsurance'));\n        var amountOwed = this._getValidNumber(this.get('total'));\n        amountOwed = amountOwed - discount - nationalInsurance - privateInsurance;\n        if (amountOwed < 0) {\n          amountOwed = 0;\n        }\n        if (!this.get('isDestroyed')) {\n          this.set('amountOwed', this._numberFormat(amountOwed, true));\n        }\n      }, 500);\n    }).observes('discount', 'nationalInsurance', 'privateInsurance', 'total'),\n\n    detailTotals: _ember['default'].computed.mapBy('details', 'amountOwed'),\n    total: _ember['default'].computed.sum('detailTotals'),\n\n    validations: {\n      category: {\n        presence: true\n      },\n      discount: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      nationalInsurance: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      name: {\n        presence: true\n      },\n      privateInsurance: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      total: {\n        numericality: {\n          allowBlank: true\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/billing-line-item.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/billing-line-item.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/billing-line-item.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/family-info', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {\n  /**\n   * Model for social worker family info\n   */\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {\n    age: _emberData['default'].attr('number'),\n    civilStatus: _emberData['default'].attr('string'),\n    education: _emberData['default'].attr('string'),\n    income: _emberData['default'].attr('string'),\n    insurance: _emberData['default'].attr('string'),\n    name: _emberData['default'].attr('string'),\n    occupation: _emberData['default'].attr('string'),\n    relationship: _emberData['default'].attr('string'),\n    validations: {\n      age: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      name: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/family-info.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/family-info.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/family-info.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/imaging', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/can-edit-requested', 'hospitalrun/mixins/date-format', 'ember-data', 'hospitalrun/utils/patient-validation', 'hospitalrun/mixins/result-validation'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsCanEditRequested, _hospitalrunMixinsDateFormat, _emberData, _hospitalrunUtilsPatientValidation, _hospitalrunMixinsResultValidation) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsCanEditRequested['default'], _hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsResultValidation['default'], {\n    charges: _emberData['default'].hasMany('proc-charge', {\n      async: false\n    }),\n    imagingDate: _emberData['default'].attr('date'),\n    imagingType: _emberData['default'].belongsTo('pricing', {\n      async: false\n    }),\n    notes: _emberData['default'].attr('string'),\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    radiologist: _emberData['default'].attr('string'),\n    requestedBy: _emberData['default'].attr('string'),\n    requestedDate: _emberData['default'].attr('date'),\n    result: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n    visit: _emberData['default'].belongsTo('visit', {\n      async: false\n    }),\n\n    imagingDateAsTime: (function () {\n      return this.dateToTime(this.get('imagingDate'));\n    }).property('imagingDate'),\n\n    requestedDateAsTime: (function () {\n      return this.dateToTime(this.get('requestedDate'));\n    }).property('requestedDate'),\n\n    validations: {\n      imagingTypeName: {\n        presence: {\n          'if': function _if(object) {\n            if (object.get('isNew')) {\n              return true;\n            }\n          },\n          message: 'Please select an imaging type'\n        }\n      },\n      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,\n      patient: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/imaging.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/imaging.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/imaging.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inv-location', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/location-name'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsLocationName) {\n  'use strict';\n\n  /**\n   * Model to represent the location(s) of inventory items.\n   * File/model name is inv-location because using inv-location will cause location\n   * items to be shown as inventory items since the pouchdb adapter does a\n   * retrieve for keys starting with 'inventory' to fetch inventory items.\n   */\n  var InventoryLocation = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsLocationName['default'], {\n    quantity: _emberData['default'].attr('number'),\n    location: _emberData['default'].attr('string'),\n    aisleLocation: _emberData['default'].attr('string'),\n\n    locationNameWithQuantity: (function () {\n      var quantity = this.get('quantity');\n      var locationName = this.get('locationName');\n      return locationName + ' (' + quantity + ' available)';\n    }).property('locationName', 'quantity'),\n\n    validations: {\n      adjustmentQuantity: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          }\n        },\n        acceptance: {\n          /**\n           * Validate that the adjustment quantity is a number and that if a deduction there are enough items to deduct\n           */\n          accept: true,\n          'if': function _if(object) {\n            var adjustmentQuantity = object.get('adjustmentQuantity');\n            var transactionType = object.get('transactionType');\n            var locationQuantity = object.get('quantity');\n            if (_ember['default'].isEmpty(adjustmentQuantity) || isNaN(adjustmentQuantity)) {\n              return true;\n            }\n            if (transactionType !== 'Adjustment (Add)' && adjustmentQuantity > locationQuantity) {\n              return true;\n            }\n            return false;\n          },\n          message: 'Invalid quantity'\n        }\n      },\n\n      dateCompleted: {\n        presence: {\n          message: 'Please provide a date'\n        }\n      },\n\n      transferLocation: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            var transferLocation = object.get('transferLocation');\n            var transferItem = object.get('transferItem');\n            // If we don't have a transfer item, then a transfer is not occurring.\n            if (!_ember['default'].isEmpty(transferItem) && _ember['default'].isEmpty(transferLocation)) {\n              return true;\n            }\n            return false;\n          },\n          message: 'Please select a location to transfer to'\n        }\n      }\n    }\n  });\n\n  exports['default'] = InventoryLocation;\n});","define('hospitalrun/tests/models/inv-location.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inv-location.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inv-location.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inv-purchase', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/location-name'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsLocationName) {\n  'use strict';\n\n  /**\n   * Model to represent a purchase within an inventory item.\n   * File/model name is inv-purchase because using inventory-purchase will cause purchase\n   * items to be shown as inventory items since the pouchdb adapter does a\n   * retrieve for keys starting with 'inventory' to fetch inventory items.\n   */\n  var InventoryPurchaseItem = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsLocationName['default'], {\n    purchaseCost: _emberData['default'].attr('number'),\n    lotNumber: _emberData['default'].attr('string'),\n    dateReceived: _emberData['default'].attr('date'),\n    costPerUnit: (function () {\n      var purchaseCost = this.get('purchaseCost');\n      var quantity = parseInt(this.get('originalQuantity'));\n      if (_ember['default'].isEmpty(purchaseCost) || _ember['default'].isEmpty(quantity) || purchaseCost === 0 || quantity === 0) {\n        return 0;\n      }\n      return Number((purchaseCost / quantity).toFixed(2));\n    }).property('purchaseCost', 'originalQuantity'),\n    originalQuantity: _emberData['default'].attr('number'),\n    currentQuantity: _emberData['default'].attr('number'),\n    expirationDate: _emberData['default'].attr('date'),\n    expired: _emberData['default'].attr('boolean'),\n    location: _emberData['default'].attr('string'),\n    aisleLocation: _emberData['default'].attr('string'),\n    giftInKind: _emberData['default'].attr('boolean'),\n    inventoryItem: _emberData['default'].attr('string'), // Currently just storing id instead of DS.belongsTo('inventory', { async: true }),\n    vendor: _emberData['default'].attr('string'),\n    vendorItemNo: _emberData['default'].attr('string'),\n    distributionUnit: _emberData['default'].attr('string'),\n    invoiceNo: _emberData['default'].attr('string'),\n    quantityGroups: _emberData['default'].attr(),\n    validations: {\n      purchaseCost: {\n        numericality: true\n      },\n      originalQuantity: {\n        numericality: true\n      },\n      vendor: {\n        presence: true\n      }\n    }\n  });\n\n  exports['default'] = InventoryPurchaseItem;\n});","define('hospitalrun/tests/models/inv-purchase.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inv-purchase.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inv-purchase.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inv-request', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/inventory-adjustment-types', 'ember-data', 'ember', 'hospitalrun/mixins/location-name'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsInventoryAdjustmentTypes, _emberData, _ember, _hospitalrunMixinsLocationName) {\n  'use strict';\n\n  /**\n   * Model to represent a request for inventory items.\n   */\n  var InventoryRequest = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsInventoryAdjustmentTypes['default'], _hospitalrunMixinsLocationName['default'], {\n    adjustPurchases: _emberData['default'].attr('boolean'),\n    completedBy: _emberData['default'].attr('string'),\n    costPerUnit: _emberData['default'].attr('number'),\n    dateCompleted: _emberData['default'].attr('date'),\n    dateRequested: _emberData['default'].attr('date'),\n    deliveryAisle: _emberData['default'].attr('string'),\n    deliveryLocation: _emberData['default'].attr('string'),\n    expenseAccount: _emberData['default'].attr('string'),\n    inventoryItem: _emberData['default'].belongsTo('inventory', { async: true }),\n    locationsAffected: _emberData['default'].attr(),\n    markAsConsumed: _emberData['default'].attr('boolean', { defaultValue: true }),\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    purchasesAffected: _emberData['default'].attr(),\n    quantity: _emberData['default'].attr('number'),\n    quantityAtCompletion: _emberData['default'].attr('number'),\n    reason: _emberData['default'].attr('string'),\n    requestedBy: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n    transactionType: _emberData['default'].attr('string'),\n    visit: _emberData['default'].belongsTo('visit', {\n      async: false\n    }),\n\n    deliveryLocationName: (function () {\n      var aisle = this.get('deliveryAisle');\n      var location = this.get('deliveryLocation');\n      return this.formatLocationName(location, aisle);\n    }).property('deliveryAisle', 'deliveryLocation'),\n\n    deliveryDetails: (function () {\n      var locationName = this.get('deliveryLocationName');\n      var patient = this.get('patient');\n      if (_ember['default'].isEmpty(patient)) {\n        return locationName;\n      } else {\n        return patient.get('displayName');\n      }\n    }).property('deliveryAisle', 'deliveryLocation', 'patient'),\n\n    haveReason: (function () {\n      return !_ember['default'].isEmpty(this.get('reason'));\n    }).property('reason'),\n\n    isAdjustment: (function () {\n      var adjustmentTypes = this.get('adjustmentTypes');\n      var transactionType = this.get('transactionType');\n      var adjustmentType = adjustmentTypes.findBy('type', transactionType);\n      return !_ember['default'].isEmpty(adjustmentType);\n    }).property('transactionType'),\n\n    isFulfillment: (function () {\n      return this.get('transactionType') === 'Fulfillment';\n    }).property('transactionType'),\n\n    isTransfer: (function () {\n      return this.get('transactionType') === 'Transfer';\n    }).property('transactionType'),\n\n    validations: {\n      inventoryItemTypeAhead: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!object.get('hasDirtyAttributes')) {\n              return false;\n            }\n            var itemName = object.get('inventoryItem.name');\n            var itemTypeAhead = object.get('inventoryItemTypeAhead');\n            var requestedItems = object.get('requestedItems');\n            var status = object.get('status');\n            if (status === 'Requested') {\n              // Requested items don't show the type ahead and therefore don't need validation.\n              return false;\n            }\n            if (_ember['default'].isEmpty(itemName) || _ember['default'].isEmpty(itemTypeAhead)) {\n              // force validation to fail if fields are empty and requested items are empty\n              return _ember['default'].isEmpty(requestedItems);\n            } else {\n              var typeAheadName = itemTypeAhead.substr(0, itemName.length);\n              if (itemName !== typeAheadName) {\n                return true;\n              }\n            }\n            // Inventory item is properly selected; don't do any further validation\n            return false;\n          },\n          message: 'Please select a valid inventory item'\n        }\n      },\n      quantity: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          },\n          'if': function _if(object) {\n            var requestedItems = object.get('requestedItems');\n            return _ember['default'].isEmpty(requestedItems);\n          }\n        },\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            var isNew = object.get('isNew');\n            var requestQuantity = parseInt(object.get('quantity'));\n            var transactionType = object.get('transactionType');\n            var quantityToCompare = null;\n            if (transactionType === 'Return') {\n              // no validation needed for returns\n              return false;\n            } else if (isNew && transactionType === 'Request') {\n              quantityToCompare = object.get('inventoryItem.quantity');\n            } else {\n              quantityToCompare = object.get('inventoryLocation.quantity');\n            }\n            if (requestQuantity > quantityToCompare) {\n              // force validation to fail\n              return true;\n            } else {\n              // Diagnosis is properly set; don't do any further validation\n              return false;\n            }\n          },\n          message: 'The quantity must be less than or equal to the number of available items.'\n        }\n      }\n    }\n  });\n\n  exports['default'] = InventoryRequest;\n});","define('hospitalrun/tests/models/inv-request.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inv-request.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inv-request.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inventory-batch', ['exports', 'hospitalrun/models/abstract', 'ember'], function (exports, _hospitalrunModelsAbstract, _ember) {\n  'use strict';\n\n  /**\n   * Model to represent a request for inventory items.\n   */\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    haveInvoiceItems: function haveInvoiceItems() {\n      var invoiceItems = this.get('invoiceItems');\n      return _ember['default'].isEmpty(invoiceItems);\n    },\n\n    validations: {\n      dateReceived: {\n        presence: true\n      },\n      inventoryItemTypeAhead: {\n        presence: {\n          'if': function _if(object) {\n            return object.haveInvoiceItems();\n          }\n        }\n      },\n      purchaseCost: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          },\n          'if': function _if(object) {\n            return object.haveInvoiceItems();\n          }\n        }\n      },\n      quantity: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          },\n          'if': function _if(object) {\n            return object.haveInvoiceItems();\n          }\n        }\n      },\n      vendor: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/inventory-batch.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inventory-batch.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inventory-batch.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/inventory', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'ember-computed', 'hospitalrun/mixins/location-name', 'hospitalrun/utils/item-condition'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _emberComputed, _hospitalrunMixinsLocationName, _hospitalrunUtilsItemCondition) {\n  'use strict';\n\n  var validateIfNewItem = {\n    'if': function validateNewItem(object) {\n      var skipSavePurchase = object.get('skipSavePurchase');\n      // Only validate on new items and only if we are saving a purchase.\n      return !skipSavePurchase && object.get('isNew');\n    }\n  };\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsLocationName['default'], {\n    purchases: _emberData['default'].hasMany('inv-purchase', {\n      async: false\n    }),\n    locations: _emberData['default'].hasMany('inv-location', {\n      async: false\n    }),\n    description: _emberData['default'].attr('string'),\n    friendlyId: _emberData['default'].attr('string'),\n    keywords: _emberData['default'].attr(),\n    name: _emberData['default'].attr('string'),\n    quantity: _emberData['default'].attr('number'),\n    crossReference: _emberData['default'].attr('string'),\n    inventoryType: _emberData['default'].attr('string'),\n    price: _emberData['default'].attr('number'),\n    reorderPoint: _emberData['default'].attr('number'),\n    distributionUnit: _emberData['default'].attr('string'),\n    rank: _emberData['default'].attr('string'),\n\n    // TODO: this value should be server calcuated property on model!\n    estimatedDaysOfStock: 14,\n\n    availableLocations: (0, _emberComputed['default'])('locations.@each.quantity', function () {\n      var locations = this.get('locations').filter(function (location) {\n        return location.get('quantity') > 0;\n      });\n      return locations;\n    }),\n\n    displayLocations: (0, _emberComputed['default'])('availableLocations', function () {\n      var _this = this;\n\n      var locations = this.get('availableLocations');\n      var returnLocations = [];\n      locations.forEach(function (currentLocation) {\n        var aisleLocationName = currentLocation.get('aisleLocation');\n        var locationName = currentLocation.get('location');\n        var displayLocationName = _this.formatLocationName(locationName, aisleLocationName);\n        if (!_ember['default'].isEmpty(displayLocationName)) {\n          returnLocations.push(displayLocationName);\n        }\n      });\n      return returnLocations.toString();\n    }),\n\n    condition: (0, _emberComputed['default'])('rank', 'estimatedDaysOfStock', function () {\n      var estimatedDaysOfStock = this.get('estimatedDaysOfStock');\n      var multiplier = (0, _hospitalrunUtilsItemCondition.rankToMultiplier)(this.get('rank'));\n\n      return (0, _hospitalrunUtilsItemCondition.getCondition)(estimatedDaysOfStock, multiplier);\n    }),\n\n    validations: {\n      distributionUnit: {\n        presence: true\n      },\n      purchaseCost: {\n        numericality: validateIfNewItem\n      },\n      name: {\n        presence: true\n      },\n      quantity: {\n        numericality: validateIfNewItem\n      },\n      price: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      originalQuantity: {\n        presence: validateIfNewItem\n      },\n      reorderPoint: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      inventoryType: {\n        presence: true\n      },\n      vendor: {\n        presence: validateIfNewItem\n      }\n    },\n\n    updateQuantity: function updateQuantity() {\n      var purchases = this.get('purchases');\n      var newQuantity = purchases.reduce(function (previousItem, currentItem) {\n        var currentQuantity = 0;\n        if (!currentItem.get('expired')) {\n          currentQuantity = currentItem.get('currentQuantity');\n        }\n        return previousItem + currentQuantity;\n      }, 0);\n      this.set('quantity', newQuantity);\n    }\n  });\n});","define('hospitalrun/tests/models/inventory.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/inventory.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inventory.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/invoice', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/date-format', 'ember-data', 'ember', 'hospitalrun/mixins/number-format', 'hospitalrun/utils/patient-validation'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsDateFormat, _emberData, _ember, _hospitalrunMixinsNumberFormat, _hospitalrunUtilsPatientValidation) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsNumberFormat['default'], {\n    externalInvoiceNumber: _emberData['default'].attr('string'),\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    patientInfo: _emberData['default'].attr('string'), // Needed for searching\n    visit: _emberData['default'].belongsTo('visit', {\n      async: false\n    }),\n    status: _emberData['default'].attr('string'),\n    remarks: _emberData['default'].attr('string'),\n    billDate: _emberData['default'].attr('date'),\n    paidTotal: _emberData['default'].attr('number'),\n    paymentProfile: _emberData['default'].belongsTo('price-profile', {\n      async: false\n    }),\n    // payments track the number of payment events attached to an invoice.\n    payments: _emberData['default'].hasMany('payment', {\n      async: false\n    }),\n    // the individual line items of the invoice\n    lineItems: _emberData['default'].hasMany('billing-line-item', {\n      async: false\n    }),\n\n    addPayment: function addPayment(payment) {\n      var payments = this.get('payments');\n      payments.addObject(payment);\n      this.paymentAmountChanged();\n    },\n\n    billDateAsTime: (function () {\n      return this.dateToTime(this.get('billDate'));\n    }).property('billDate'),\n\n    discountTotals: _ember['default'].computed.mapBy('lineItemsByCategory', 'discount'),\n    discount: _ember['default'].computed.sum('discountTotals'),\n\n    nationalInsuranceTotals: _ember['default'].computed.mapBy('lineItemsByCategory', 'nationalInsurance'),\n    nationalInsurance: _ember['default'].computed.sum('nationalInsuranceTotals'),\n\n    paidFlag: (function () {\n      return this.get('status') === 'Paid';\n    }).property('status'),\n\n    remainingBalance: (function () {\n      var patientResponsibility = this.get('patientResponsibility');\n      var paidTotal = this.get('paidTotal');\n      return this._numberFormat(patientResponsibility - paidTotal, true);\n    }).property('patientResponsibility', 'paidTotal'),\n\n    privateInsuranceTotals: _ember['default'].computed.mapBy('lineItemsByCategory', 'privateInsurance'),\n    privateInsurance: _ember['default'].computed.sum('privateInsuranceTotals'),\n\n    lineTotals: _ember['default'].computed.mapBy('lineItems', 'total'),\n    total: _ember['default'].computed.sum('lineTotals'),\n\n    displayInvoiceNumber: (function () {\n      var externalInvoiceNumber = this.get('externalInvoiceNumber');\n      var id = this.get('id');\n      if (_ember['default'].isEmpty(externalInvoiceNumber)) {\n        return id;\n      } else {\n        return externalInvoiceNumber;\n      }\n    }).property('externalInvoiceNumber', 'id'),\n\n    lineItemsByCategory: (function () {\n      var lineItems = this.get('lineItems');\n      var byCategory = [];\n      lineItems.forEach((function (lineItem) {\n        var category = lineItem.get('category');\n        var categoryList = byCategory.findBy('category', category);\n        if (_ember['default'].isEmpty(categoryList)) {\n          categoryList = {\n            category: category,\n            items: []\n          };\n          byCategory.push(categoryList);\n        }\n        categoryList.items.push(lineItem);\n      }).bind(this));\n      byCategory.forEach((function (categoryList) {\n        categoryList.amountOwed = this._calculateTotal(categoryList.items, 'amountOwed');\n        categoryList.discount = this._calculateTotal(categoryList.items, 'discount');\n        categoryList.nationalInsurance = this._calculateTotal(categoryList.items, 'nationalInsurance');\n        categoryList.privateInsurance = this._calculateTotal(categoryList.items, 'privateInsurance');\n        categoryList.total = this._calculateTotal(categoryList.items, 'total');\n      }).bind(this));\n      return byCategory;\n    }).property('lineItems.@each.amountOwed'),\n    patientIdChanged: (function () {\n      if (!_ember['default'].isEmpty(this.get('patient'))) {\n        var patientDisplayName = this.get('patient.displayName');\n        var patientDisplayId = this.get('patient.displayPatientId');\n        this.set('patientInfo', patientDisplayName + ' - ' + patientDisplayId);\n      }\n    }).observes('patient.displayName', 'patient.id', 'patient.displayPatientId'),\n\n    patientResponsibilityTotals: _ember['default'].computed.mapBy('lineItems', 'amountOwed'),\n    patientResponsibility: _ember['default'].computed.sum('patientResponsibilityTotals'),\n\n    paymentAmountChanged: (function () {\n      var payments = this.get('payments').filter(function (payment) {\n        return !payment.get('isNew');\n      });\n      if (payments.length === 0) {\n        return;\n      }\n      var paidTotal = payments.reduce((function (previousValue, payment) {\n        return previousValue += this._getValidNumber(payment.get('amount'));\n      }).bind(this), 0);\n      this.set('paidTotal', this._numberFormat(paidTotal, true));\n      var remainingBalance = this.get('remainingBalance');\n      if (remainingBalance <= 0) {\n        this.set('status', 'Paid');\n      }\n    }).observes('payments.[]', 'payments.@each.amount'),\n\n    validations: {\n      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,\n\n      patient: {\n        presence: true\n      },\n\n      visit: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/invoice.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/invoice.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/invoice.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/lab', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/can-edit-requested', 'hospitalrun/mixins/date-format', 'ember-data', 'hospitalrun/utils/patient-validation', 'hospitalrun/mixins/result-validation'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsCanEditRequested, _hospitalrunMixinsDateFormat, _emberData, _hospitalrunUtilsPatientValidation, _hospitalrunMixinsResultValidation) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsCanEditRequested['default'], _hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsResultValidation['default'], {\n    charges: _emberData['default'].hasMany('proc-charge', {\n      async: false\n    }),\n    labDate: _emberData['default'].attr('date'),\n    labType: _emberData['default'].belongsTo('pricing', {\n      async: false\n    }),\n    notes: _emberData['default'].attr('string'),\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    requestedBy: _emberData['default'].attr('string'),\n    requestedDate: _emberData['default'].attr('date'),\n    result: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n    visit: _emberData['default'].belongsTo('visit', {\n      async: false\n    }),\n\n    labDateAsTime: (function () {\n      return this.dateToTime(this.get('labDate'));\n    }).property('labDate'),\n\n    requestedDateAsTime: (function () {\n      return this.dateToTime(this.get('requestedDate'));\n    }).property('requestedDate'),\n\n    validations: {\n      labTypeName: {\n        presence: {\n          'if': function _if(object) {\n            if (object.get('isNew')) {\n              return true;\n            }\n          },\n          message: 'Please select a lab type'\n        }\n      },\n      patientTypeAhead: _hospitalrunUtilsPatientValidation['default'].patientTypeAhead,\n      patient: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/lab.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/lab.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/lab.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/line-item-detail', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'hospitalrun/mixins/number-format'], function (exports, _hospitalrunModelsAbstract, _emberData, _hospitalrunMixinsNumberFormat) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsNumberFormat['default'], {\n    department: _emberData['default'].attr('string'),\n    expenseAccount: _emberData['default'].attr('string'),\n    name: _emberData['default'].attr('string'),\n    price: _emberData['default'].attr('number'),\n    pricingItem: _emberData['default'].belongsTo('pricing', {\n      async: false\n    }),\n    quantity: _emberData['default'].attr('number'),\n    total: _emberData['default'].attr('number'),\n\n    amountOwed: (function () {\n      var price = this.get('price');\n      var quantity = this.get('quantity');\n      var total = 0;\n      if (this._validNumber(price) && this._validNumber(quantity)) {\n        total = this._numberFormat(price * quantity, true);\n      }\n      return total;\n    }).property('price', 'quantity')\n\n  });\n});","define('hospitalrun/tests/models/line-item-detail.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/line-item-detail.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/line-item-detail.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/lookup', ['exports', 'ember-pouch', 'ember-data'], function (exports, _emberPouch, _emberData) {\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend({\n    _attachments: _emberData['default'].attr(), // Temporarily store file as attachment until it gets uploaded to the server\n    importFile: _emberData['default'].attr('boolean', { defaultValue: false }),\n    value: _emberData['default'].attr(''),\n    organizeByType: _emberData['default'].attr('boolean'),\n    userCanAdd: _emberData['default'].attr('boolean')\n  });\n});","define('hospitalrun/tests/models/lookup.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/lookup.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/lookup.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/medication', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/can-edit-requested', 'ember-data', 'hospitalrun/mixins/date-format', 'ember', 'hospitalrun/mixins/medication-details'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsCanEditRequested, _emberData, _hospitalrunMixinsDateFormat, _ember, _hospitalrunMixinsMedicationDetails) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsCanEditRequested['default'], _hospitalrunMixinsDateFormat['default'], _hospitalrunMixinsMedicationDetails['default'], {\n    inventoryItem: _emberData['default'].belongsTo('inventory', {\n      async: true\n    }),\n    notes: _emberData['default'].attr('string'),\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    prescription: _emberData['default'].attr('string'),\n    prescriptionDate: _emberData['default'].attr('date'),\n    quantity: _emberData['default'].attr('number'),\n    refills: _emberData['default'].attr('number'),\n    requestedDate: _emberData['default'].attr('date'),\n    requestedBy: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n    visit: _emberData['default'].belongsTo('visit', {\n      async: false\n    }),\n\n    isRequested: (function () {\n      var status = this.get('status');\n      return status === 'Requested';\n    }).property('status'),\n\n    medicationName: (function () {\n      return this.getMedicationName('inventoryItem');\n    }).property('medicationTitle', 'inventoryItem'),\n\n    medicationPrice: (function () {\n      return this.getMedicationPrice('inventoryItem');\n    }).property('priceOfMedication', 'inventoryItem'),\n\n    prescriptionDateAsTime: (function () {\n      return this.dateToTime(this.get('prescriptionDate'));\n    }).property('prescriptionDate'),\n\n    requestedDateAsTime: (function () {\n      return this.dateToTime(this.get('requestedDate'));\n    }).property('requestedDate'),\n\n    validations: {\n      prescription: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!object.get('hasDirtyAttributes') || object.get('isFulfilling')) {\n              return false;\n            }\n            var prescription = object.get('prescription');\n            var quantity = object.get('quantity');\n            if (_ember['default'].isEmpty(prescription) && _ember['default'].isEmpty(quantity)) {\n              // force validation to fail\n              return true;\n            } else {\n              return false;\n            }\n          },\n          message: 'Please enter a prescription or a quantity'\n        }\n      },\n\n      inventoryItemTypeAhead: {\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            if (!object.get('hasDirtyAttributes') || !object.get('isNew')) {\n              return false;\n            }\n            var itemName = object.get('inventoryItem.name');\n            var itemTypeAhead = object.get('inventoryItemTypeAhead');\n            if (_ember['default'].isEmpty(itemName) || _ember['default'].isEmpty(itemTypeAhead)) {\n              // force validation to fail\n              return true;\n            } else {\n              var typeAheadName = itemTypeAhead.substr(0, itemName.length);\n              if (itemName !== typeAheadName) {\n                return true;\n              }\n            }\n            // Inventory item is properly selected; don't do any further validation\n            return false;\n          },\n          message: 'Please select a valid medication'\n        }\n      },\n\n      patientTypeAhead: {\n        presence: {\n          'if': function _if(object) {\n            return object.get('selectPatient');\n          }\n        }\n      },\n\n      quantity: {\n        numericality: {\n          allowBlank: true,\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          }\n        },\n        presence: {\n          'if': function _if(object) {\n            var isFulfilling = object.get('isFulfilling');\n            return isFulfilling;\n          }\n        },\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            var isFulfilling = object.get('isFulfilling');\n            var requestQuantity = parseInt(object.get('quantity'));\n            var quantityToCompare = null;\n            if (!isFulfilling) {\n              // no validation needed when not fulfilling\n              return false;\n            } else {\n              quantityToCompare = object.get('inventoryItem.quantity');\n            }\n            if (requestQuantity > quantityToCompare) {\n              // force validation to fail\n              return true;\n            } else {\n              // There is enough quantity on hand.\n              return false;\n            }\n          },\n          message: 'The quantity must be less than or equal to the number of available medication.'\n        }\n      },\n\n      refills: {\n        numericality: {\n          allowBlank: true\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/medication.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/medication.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/medication.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/option', ['exports', 'ember-pouch', 'ember-data'], function (exports, _emberPouch, _emberData) {\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend({\n    value: _emberData['default'].attr('')\n  });\n});","define('hospitalrun/tests/models/option.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/option.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/option.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/override-price', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    profile: _emberData['default'].belongsTo('price-profile', {\n      async: false\n    }),\n    price: _emberData['default'].attr('number'),\n    validations: {\n      profile: {\n        presence: true\n      },\n      price: {\n        numericality: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/override-price.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/override-price.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/override-price.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/patient-note', ['exports', 'hospitalrun/models/abstract', 'ember', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _ember, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    authoredBy: (function () {\n      if (!_ember['default'].isEmpty(this.get('attribution'))) {\n        var i18n = this.get('i18n');\n        return this.get('createdBy') + ' ' + i18n.t('patients.notes.onBehalfOfCopy') + ' ' + this.get('attribution');\n      } else {\n        return this.get('createdBy');\n      }\n    }).property('attribution', 'createdBy'),\n    // if the note was written by one person but dictated / given on behalf of another, otherwise, this and createdBy are the same\n    attribution: _emberData['default'].attr('string'),\n    content: _emberData['default'].attr('string'),\n    createdBy: _emberData['default'].attr('string'),\n    date: _emberData['default'].attr('date'),\n    // custom list of noteTypes of mixins/patient-note-types\n    noteType: _emberData['default'].attr(),\n    // who is this note about?\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    // if this note is related to a visit, make sure it's noted.\n    visit: _emberData['default'].belongsTo('visit', {\n      async: false\n    }),\n    validations: {\n      patient: {\n        presence: true\n      },\n      visit: {\n        presence: true\n      },\n      noteType: {\n        presence: true\n      },\n      content: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/patient-note.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/patient-note.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/patient-note.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/patient', ['exports', 'hospitalrun/models/abstract', 'hospitalrun/mixins/dob-days', 'hospitalrun/utils/email-validation', 'ember', 'ember-data', 'hospitalrun/mixins/patient-name'], function (exports, _hospitalrunModelsAbstract, _hospitalrunMixinsDobDays, _hospitalrunUtilsEmailValidation, _ember, _emberData, _hospitalrunMixinsPatientName) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsDobDays['default'], _hospitalrunMixinsPatientName['default'], {\n    admitted: _emberData['default'].attr('boolean', { defaultValue: false }),\n    additionalContacts: _emberData['default'].attr(),\n    address: _emberData['default'].attr('string'),\n    address2: _emberData['default'].attr('string'),\n    address3: _emberData['default'].attr('string'),\n    address4: _emberData['default'].attr('string'),\n    bloodType: _emberData['default'].attr('string'),\n    clinic: _emberData['default'].attr('string'),\n    country: _emberData['default'].attr('string'),\n    dateOfBirth: _emberData['default'].attr('date'),\n    economicClassification: _emberData['default'].attr('string'),\n    email: _emberData['default'].attr('string'),\n    expenses: _emberData['default'].attr(),\n    externalPatientId: _emberData['default'].attr('string'),\n    familySupport1: _emberData['default'].attr('string'),\n    familySupport2: _emberData['default'].attr('string'),\n    familySupport3: _emberData['default'].attr('string'),\n    familySupport4: _emberData['default'].attr('string'),\n    familySupport5: _emberData['default'].attr('string'),\n    friendlyId: _emberData['default'].attr('string'),\n    familyInfo: _emberData['default'].attr(),\n    firstName: _emberData['default'].attr('string'),\n    sex: _emberData['default'].attr('string'),\n    occupation: _emberData['default'].attr('string'),\n    history: _emberData['default'].attr('string'),\n    insurance: _emberData['default'].attr('string'),\n    lastName: _emberData['default'].attr('string'),\n    livingArrangement: _emberData['default'].attr('string'),\n    middleName: _emberData['default'].attr('string'),\n    notes: _emberData['default'].attr('string'),\n    otherIncome: _emberData['default'].attr('string'),\n    payments: _emberData['default'].hasMany('payment', {\n      async: true\n    }),\n    patientType: _emberData['default'].attr('string'),\n    parent: _emberData['default'].attr('string'),\n    paymentProfile: _emberData['default'].belongsTo('price-profile', {\n      async: false\n    }),\n    phone: _emberData['default'].attr('string'),\n    placeOfBirth: _emberData['default'].attr('string'),\n    referredDate: _emberData['default'].attr('date'),\n    referredBy: _emberData['default'].attr('string'),\n    religion: _emberData['default'].attr('string'),\n    socialActionTaken: _emberData['default'].attr('string'),\n    socialRecommendation: _emberData['default'].attr('string'),\n    status: _emberData['default'].attr('string'),\n\n    age: (function () {\n      var dob = this.get('dateOfBirth');\n      return this.convertDOBToText(dob);\n    }).property('dateOfBirth'),\n\n    displayAddress: (function () {\n      var addressFields = this.getProperties('address', 'address2', 'address3', 'address4');\n      var displayAddress = '';\n      for (var prop in addressFields) {\n        if (!_ember['default'].isEmpty(addressFields[prop])) {\n          if (!_ember['default'].isEmpty(displayAddress)) {\n            displayAddress += ', ';\n          }\n          displayAddress += addressFields[prop];\n        }\n      }\n      return displayAddress;\n    }).property('address', 'address2', 'address3', 'address4'),\n\n    displayName: (function () {\n      return this.getPatientDisplayName(this);\n    }).property('firstName', 'lastName', 'middleName'),\n\n    displayPatientId: (function () {\n      return this.getPatientDisplayId(this);\n    }).property('id', 'externalPatientId', 'friendlyId'),\n\n    validations: {\n      email: {\n        format: {\n          'with': _hospitalrunUtilsEmailValidation['default'].emailRegex,\n          allowBlank: true,\n          message: 'please enter a valid email address'\n        }\n      },\n      friendlyId: {\n        presence: true\n      },\n      firstName: {\n        presence: true\n      },\n      lastName: {\n        presence: true\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/models/patient.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/patient.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/patient.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/payment', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    amount: _emberData['default'].attr('number'),\n    charityPatient: _emberData['default'].attr('boolean'), // Is patient a charity case\n    expenseAccount: _emberData['default'].attr('string'),\n    invoice: _emberData['default'].belongsTo('invoice', {\n      async: false\n    }),\n    datePaid: _emberData['default'].attr('date'),\n    paymentType: _emberData['default'].attr('string'),\n    notes: _emberData['default'].attr('string'),\n\n    canRemovePayment: (function () {\n      return this.get('paymentType') === 'Deposit';\n    }).property('paymentType'),\n\n    validations: {\n      amount: {\n        numericality: true\n      },\n      datePaid: {\n        presence: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/payment.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/payment.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/payment.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/photo', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    _attachments: _emberData['default'].attr(), // Temporarily store file as attachment until it gets uploaded to the server\n    coverImage: _emberData['default'].attr('boolean'),\n    fileName: _emberData['default'].attr('string'),\n    localFile: _emberData['default'].attr('boolean'),\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    caption: _emberData['default'].attr('string'),\n    url: _emberData['default'].attr('string'),\n\n    downloadImageFromServer: function downloadImageFromServer(imageRecord) {\n      var me = this;\n      var url = imageRecord.get('url');\n      var xhr = new XMLHttpRequest();\n      if (!_ember['default'].isEmpty(url)) {\n        // Make sure directory exists or is created before downloading.\n        this.getPatientDirectory(imageRecord.get('patientId'));\n        xhr.open('GET', url, true);\n        xhr.responseType = 'blob';\n        xhr.onload = function () {\n          var file = new Blob([xhr.response]);\n          me.addImageToFileStore(file, null, imageRecord);\n        };\n        xhr.send();\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/photo.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/photo.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/photo.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/price-profile', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    name: _emberData['default'].attr('string'),\n    discountAmount: _emberData['default'].attr('number'),\n    discountPercentage: _emberData['default'].attr('number'),\n\n    validations: {\n      name: {\n        presence: true\n      },\n      discountAmount: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      discountPercentage: {\n        numericality: {\n          allowBlank: true\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/price-profile.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/price-profile.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/price-profile.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/pricing', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    category: _emberData['default'].attr('string'),\n    expenseAccount: _emberData['default'].attr('string'),\n    name: _emberData['default'].attr('string'),\n    price: _emberData['default'].attr('number'),\n    pricingType: _emberData['default'].attr('string'),\n    pricingOverrides: _emberData['default'].hasMany('override-price', {\n      async: false\n    }),\n\n    validations: {\n      category: {\n        presence: true\n      },\n      name: {\n        presence: true\n      },\n      price: {\n        numericality: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/pricing.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/pricing.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/pricing.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/proc-charge', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember', 'hospitalrun/mixins/medication-details'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember, _hospitalrunMixinsMedicationDetails) {\n  'use strict';\n\n  /**\n   * Procedure charges\n   */\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend(_hospitalrunMixinsMedicationDetails['default'], {\n    medication: _emberData['default'].belongsTo('inventory', {\n      async: false\n    }),\n    pricingItem: _emberData['default'].belongsTo('pricing', {\n      async: false\n    }),\n    quantity: _emberData['default'].attr('number'),\n    dateCharged: _emberData['default'].attr('date'),\n\n    medicationCharge: (function () {\n      var medication = this.get('medication');\n      var newMedicationCharge = this.get('newMedicationCharge');\n      return !_ember['default'].isEmpty(medication) || !_ember['default'].isEmpty(newMedicationCharge);\n    }).property('medication', 'newMedicationCharge'),\n\n    medicationName: (function () {\n      return this.get('medication.name');\n    }).property('medication'),\n\n    medicationPrice: (function () {\n      return this.get('medication.price');\n    }).property('medication'),\n\n    validations: {\n      itemName: {\n        presence: true,\n        acceptance: {\n          accept: true,\n          'if': function _if(object) {\n            var medicationCharge = object.get('medicationCharge');\n            if (!medicationCharge || !object.get('hasDirtyAttributes')) {\n              return false;\n            }\n            var itemName = object.get('inventoryItem.name');\n            var itemTypeAhead = object.get('itemName');\n            if (_ember['default'].isEmpty(itemName) || _ember['default'].isEmpty(itemTypeAhead)) {\n              // force validation to fail\n              return true;\n            } else {\n              var typeAheadName = itemTypeAhead.substr(0, itemName.length);\n              if (itemName !== typeAheadName) {\n                return true;\n              }\n            }\n            // Inventory item is properly selected; don't do any further validation\n            return false;\n          },\n          message: 'Please select a valid medication'\n        }\n\n      },\n\n      quantity: {\n        numericality: {\n          greaterThan: 0,\n          messages: {\n            greaterThan: 'must be greater than 0'\n          }\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/proc-charge.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/proc-charge.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/proc-charge.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/procedure', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    anesthesiaType: _emberData['default'].attr('string'),\n    anesthesiologist: _emberData['default'].attr('string'),\n    assistant: _emberData['default'].attr('string'),\n    description: _emberData['default'].attr('string'),\n    charges: _emberData['default'].hasMany('proc-charge', {\n      async: false\n    }),\n    cptCode: _emberData['default'].attr('string'),\n    location: _emberData['default'].attr('string'),\n    notes: _emberData['default'].attr('string'),\n    physician: _emberData['default'].attr('string'),\n    procedureDate: _emberData['default'].attr('date'),\n    timeStarted: _emberData['default'].attr('string'),\n    timeEnded: _emberData['default'].attr('string'),\n    visit: _emberData['default'].belongsTo('visit', {\n      async: false\n    }),\n\n    validations: {\n      description: {\n        presence: true\n      },\n\n      oxygenHours: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      pacuHours: {\n        numericality: {\n          allowBlank: true\n        }\n      },\n      physician: {\n        presence: true\n      },\n      procedureDate: {\n        presence: true\n      },\n      display_procedureDate: {\n        presence: {\n          message: 'Please select a valid date'\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/procedure.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/procedure.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/procedure.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/sequence', ['exports', 'ember-pouch', 'ember-data'], function (exports, _emberPouch, _emberData) {\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend({\n    prefix: _emberData['default'].attr('string'),\n    value: _emberData['default'].attr('number')\n  });\n});","define('hospitalrun/tests/models/sequence.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/sequence.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/sequence.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/social-expense', ['exports', 'ember-data', 'ember-validations', 'ember-pouch'], function (exports, _emberData, _emberValidations, _emberPouch) {\n  /**\n   * Model for social worker family info\n   */\n  'use strict';\n\n  exports['default'] = _emberPouch.Model.extend(_emberValidations['default'], {\n    category: _emberData['default'].attr('string'),\n    sources: _emberData['default'].attr('string'),\n    cost: _emberData['default'].attr(),\n    validations: {\n      category: {\n        presence: true\n      },\n      cost: {\n        numericality: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/social-expense.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/social-expense.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/social-expense.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/user-role', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    name: _emberData['default'].attr('string'),\n    capabilities: _emberData['default'].attr()\n  });\n});","define('hospitalrun/tests/models/user-role.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/user-role.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user-role.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/user', ['exports', 'ember-data', 'hospitalrun/utils/email-validation', 'ember', 'ember-validations'], function (exports, _emberData, _hospitalrunUtilsEmailValidation, _ember, _emberValidations) {\n  'use strict';\n\n  var User = _emberData['default'].Model.extend(_emberValidations['default'], {\n    derived_key: _emberData['default'].attr('string'),\n    deleted: _emberData['default'].attr('boolean'),\n    displayName: _emberData['default'].attr('string'),\n    email: _emberData['default'].attr('string'),\n    iterations: _emberData['default'].attr(),\n    name: _emberData['default'].attr('string'),\n    password: _emberData['default'].attr('string'),\n    password_scheme: _emberData['default'].attr('string'),\n    password_sha: _emberData['default'].attr('string'),\n    rev: _emberData['default'].attr('string'),\n    roles: _emberData['default'].attr(),\n    salt: _emberData['default'].attr('string'),\n    userPrefix: _emberData['default'].attr('string'),\n\n    displayRole: (function () {\n      var roles = this.get('roles');\n      if (!_ember['default'].isEmpty(roles)) {\n        return roles[0];\n      }\n    }).property('roles'),\n\n    validations: {\n      email: {\n        format: {\n          'with': _hospitalrunUtilsEmailValidation['default'].emailRegex,\n          message: 'please enter a valid email address'\n        }\n      }\n    }\n  });\n\n  exports['default'] = User;\n});","define('hospitalrun/tests/models/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/visit', ['exports', 'hospitalrun/models/abstract', 'ember-data', 'ember'], function (exports, _hospitalrunModelsAbstract, _emberData, _ember) {\n  'use strict';\n\n  function dateAcceptance(object) {\n    if (!object.get('hasDirtyAttributes')) {\n      return false;\n    }\n    var startDate = object.get('startDate');\n    var endDate = object.get('endDate');\n    if (_ember['default'].isEmpty(endDate) || _ember['default'].isEmpty(startDate)) {\n      // Can't validate if empty\n      return false;\n    } else {\n      if (endDate.getTime() < startDate.getTime()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  var PAYMENT_STATES = {\n    CLEAR: 'clear',\n    PENDING: 'pending'\n  };\n\n  function paymentStateAcceptance(object) {\n    return !Object.keys(PAYMENT_STATES).some(function (state) {\n      return PAYMENT_STATES[state] === object.get('paymentState');\n    });\n  }\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    additionalDiagnoses: _emberData['default'].attr(), // Yes, the plural of diagnosis is diagnoses!\n    charges: _emberData['default'].hasMany('proc-charge', {\n      async: false\n    }),\n    dischargeInfo: _emberData['default'].attr('string'),\n    endDate: _emberData['default'].attr('date'), // if visit type is outpatient, startDate and endDate are equal\n    examiner: _emberData['default'].attr('string'),\n    history: _emberData['default'].attr('string'),\n    historySince: _emberData['default'].attr('string'), // History since last seen\n    imaging: _emberData['default'].hasMany('imaging', { async: true }),\n    labs: _emberData['default'].hasMany('lab', { async: true }),\n    location: _emberData['default'].attr('string'),\n    medication: _emberData['default'].hasMany('medication', { async: true }),\n    // this field is being deprecated in favor of patient-note\n    notes: _emberData['default'].attr('string'),\n    patientNotes: _emberData['default'].hasMany('patient-note', { async: true }),\n    outPatient: _emberData['default'].attr('boolean'),\n    patient: _emberData['default'].belongsTo('patient', {\n      async: false\n    }),\n    paymentState: _emberData['default'].attr('string', { defaultValue: PAYMENT_STATES.PENDING }),\n    primaryDiagnosis: _emberData['default'].attr('string'), // AKA admitting diagnosis\n    primaryBillingDiagnosis: _emberData['default'].attr('string'), // AKA final diagnosis\n    primaryBillingDiagnosisId: _emberData['default'].attr('string'),\n    procedures: _emberData['default'].hasMany('procedure', { async: true }),\n    startDate: _emberData['default'].attr('date'),\n    status: _emberData['default'].attr('string'),\n    visitType: _emberData['default'].attr(),\n    vitals: _emberData['default'].hasMany('vital', { async: true }),\n\n    diagnosisList: (function () {\n      var additionalDiagnosis = this.get('additionalDiagnoses');\n      var diagnosisList = [];\n      var primaryDiagnosis = this.get('primaryDiagnosis');\n      if (!_ember['default'].isEmpty(primaryDiagnosis)) {\n        diagnosisList.push(primaryDiagnosis);\n      }\n      if (!_ember['default'].isEmpty(additionalDiagnosis)) {\n        diagnosisList.addObjects(additionalDiagnosis.map(function (diagnosis) {\n          return diagnosis.description;\n        }));\n      }\n      return diagnosisList;\n    }).property('additionalDiagnosis.[]', 'primaryDiagnosis'),\n\n    visitDate: (function () {\n      var endDate = this.get('endDate');\n      var startDate = moment(this.get('startDate'));\n      var visitDate = startDate.format('l');\n      if (!_ember['default'].isEmpty(endDate) && !startDate.isSame(endDate, 'day')) {\n        visitDate += ' - ' + moment(endDate).format('l');\n      }\n      return visitDate;\n    }).property('startDate', 'endDate'),\n\n    visitDescription: (function () {\n      var visitDate = this.get('visitDate');\n      var visitType = this.get('visitType');\n      return visitDate + ' (' + visitType + ')';\n    }).property('visitDate', 'visitType'),\n\n    validations: {\n      endDate: {\n        acceptance: {\n          accept: true,\n          'if': dateAcceptance,\n          message: 'Please select an end date later than the start date'\n        }\n      },\n      paymentState: {\n        acceptance: {\n          accept: true,\n          'if': paymentStateAcceptance\n        },\n        presence: true\n      },\n      startDate: {\n        acceptance: {\n          accept: true,\n          'if': dateAcceptance,\n          message: 'Please select a start date earlier than the end date'\n        },\n        presence: true\n      },\n      visitType: {\n        presence: true\n      }\n\n    }\n\n  });\n});","define('hospitalrun/tests/models/visit.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/visit.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/visit.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/models/vital', ['exports', 'hospitalrun/models/abstract', 'ember-data'], function (exports, _hospitalrunModelsAbstract, _emberData) {\n  'use strict';\n\n  exports['default'] = _hospitalrunModelsAbstract['default'].extend({\n    dateRecorded: _emberData['default'].attr('date'),\n    temperature: _emberData['default'].attr('number'),\n    weight: _emberData['default'].attr('string'),\n    height: _emberData['default'].attr('string'),\n    sbp: _emberData['default'].attr('number'),\n    dbp: _emberData['default'].attr('number'),\n    heartRate: _emberData['default'].attr('number'),\n    respiratoryRate: _emberData['default'].attr('number'),\n    validations: {\n      temperature: {\n        numericality: true\n      },\n      sbp: {\n        numericality: true\n      },\n      dbp: {\n        numericality: true\n      },\n      heartRate: {\n        numericality: true\n      },\n      respiratoryRate: {\n        numericality: true\n      }\n    }\n  });\n});","define('hospitalrun/tests/models/vital.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/vital.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/vital.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/add-contact/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'ember-i18n'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    patientsEdit: _ember['default'].inject.controller('patients/edit'),\n    editController: _ember['default'].computed.alias('patientsEdit'),\n    title: (0, _emberI18n.translationMacro)('patients.titles.add_contact'),\n    updateButtonText: (0, _emberI18n.translationMacro)('buttons.add'),\n    updateButtonAction: 'add',\n    showUpdateButton: true,\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      add: function add() {\n        var newContact = this.getProperties('name', 'phone', 'email', 'relationship');\n        this.get('editController').send('addContact', newContact);\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/add-contact/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/add-contact/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/add-contact/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/admitted/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, _hospitalrunPatientsIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPatientsIndexController['default'].extend({});\n});","define('hospitalrun/tests/patients/admitted/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/admitted/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/admitted/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/admitted/route', ['exports', 'ember-i18n', 'hospitalrun/patients/index/route'], function (exports, _emberI18n, _hospitalrunPatientsIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPatientsIndexRoute['default'].extend({\n    pageTitle: (0, _emberI18n.translationMacro)('patients.titles.admittedPatients'),\n\n    _modelQueryParams: function _modelQueryParams() {\n      return {\n        mapReduce: 'patient_by_admission'\n      };\n    }\n  });\n});","define('hospitalrun/tests/patients/admitted/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/admitted/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/admitted/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'hospitalrun/mixins/patient-visits', 'hospitalrun/mixins/patient-appointments', 'hospitalrun/mixins/patient-invoices', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog', 'ember', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _hospitalrunMixinsPatientVisits, _hospitalrunMixinsPatientAppointments, _hospitalrunMixinsPatientInvoices, _hospitalrunMixinsPouchdb, _hospitalrunMixinsProgressDialog, _ember, _emberI18n) {\n  'use strict';\n\n  function deleteMany(manyArray) {\n    if (!manyArray) {\n      return _ember['default'].RSVP.resolve();\n    }\n    if (manyArray.then) {\n      // recursive call after resolving async model\n      return manyArray.then(deleteMany);\n    }\n    var recordsCount = manyArray.get('length');\n    if (!recordsCount) {\n      // empty array: no records to delete\n      return _ember['default'].RSVP.resolve();\n    }\n    var archivePromises = manyArray.map(function (recordToDelete) {\n      recordToDelete.set('archived', true);\n      return recordToDelete.save().then(function () {\n        return recordToDelete.unloadRecord();\n      });\n    });\n    return _ember['default'].RSVP.all(archivePromises, 'async array deletion');\n  }\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend(_hospitalrunMixinsPatientVisits['default'], _hospitalrunMixinsPatientInvoices['default'], _hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsProgressDialog['default'], _hospitalrunMixinsPatientAppointments['default'], {\n    title: (0, _emberI18n.translationMacro)('patients.titles.delete'),\n    progressTitle: (0, _emberI18n.translationMacro)('patients.titles.deletePatientRecord'),\n    progressMessage: (0, _emberI18n.translationMacro)('patients.messages.deletingPatient'),\n\n    // Override delete action on controller; we must delete\n    // all related records before deleting patient record\n    // otherwise errors will occur\n    deletePatient: function deletePatient() {\n      var controller = this;\n      var patient = this.get('model');\n      var visits = this.getPatientVisits(patient);\n      var invoices = this.getPatientInvoices(patient);\n      var appointments = this.getPatientAppointments(patient);\n      var payments = patient.get('payments');\n      // resolve all async models first since they reference each other, then delete\n      return _ember['default'].RSVP.all([visits, invoices, appointments, payments]).then(function (records) {\n        var promises = [];\n        promises.push(controller.deleteVisits(records[0]));\n        promises.push(controller.deleteInvoices(records[1]));\n        promises.push(deleteMany(records[2])); // appointments\n        promises.push(deleteMany(records[3])); // payments\n        return _ember['default'].RSVP.all(promises).then(function () {\n          return patient.destroyRecord();\n        });\n      });\n    },\n\n    deleteVisits: function deleteVisits(visits) {\n      var promises = [];\n      visits.forEach(function (visit) {\n        var labs = visit.get('labs');\n        var procedures = visit.get('procedures');\n        var imaging = visit.get('imaging');\n        var procCharges = procedures.then(function (p) {\n          return p.get('charges');\n        });\n        var labCharges = labs.then(function (l) {\n          return l.get('charges');\n        });\n        var imagingCharges = imaging.then(function (i) {\n          return i.get('charges');\n        });\n        var visitCharges = visit.get('charges');\n        promises.push(deleteMany(labs));\n        promises.push(deleteMany(labCharges));\n        promises.push(deleteMany(visit.get('patientNotes')));\n        promises.push(deleteMany(visit.get('vitals')));\n        promises.push(deleteMany(procedures));\n        promises.push(deleteMany(procCharges));\n        promises.push(deleteMany(visit.get('medication')));\n        promises.push(deleteMany(imaging));\n        promises.push(deleteMany(imagingCharges));\n        promises.push(deleteMany(visitCharges));\n      });\n      return _ember['default'].RSVP.all(promises).then(function () {\n        return deleteMany(visits);\n      });\n    },\n\n    deleteInvoices: function deleteInvoices(patientInvoices) {\n      return _ember['default'].RSVP.resolve(patientInvoices).then(function (invoices) {\n        var lineItems = _ember['default'].A();\n        invoices.forEach(function (i) {\n          lineItems.addObjects(i.get('lineItems'));\n        });\n        var lineItemDetails = _ember['default'].A();\n        lineItems.forEach(function (li) {\n          lineItemDetails.addObjects(li.get('details'));\n        });\n        return _ember['default'].RSVP.all([lineItems, lineItemDetails]).then(function () {\n          return _ember['default'].RSVP.all([deleteMany(invoices), deleteMany(lineItems), deleteMany(lineItemDetails)]);\n        });\n      });\n    },\n\n    actions: {\n      // delete related records without modal dialogs\n      'delete': function _delete(patient) {\n        var controller = this;\n        this.send('closeModal');\n        this.showProgressModal();\n        this.deletePatient(patient).then(function () {\n          controller.closeProgressModal();\n          controller.send(controller.get('afterDeleteAction'), patient);\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/blood-types', 'ember', 'hospitalrun/mixins/patient-id', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/return-to', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsBloodTypes, _ember, _hospitalrunMixinsPatientId, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsReturnTo, _hospitalrunUtilsSelectValues, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsBloodTypes['default'], _hospitalrunMixinsReturnTo['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsPatientId['default'], _hospitalrunMixinsPatientNotes['default'], {\n    canAddAppointment: (function () {\n      return this.currentUserCan('add_appointment');\n    }).property(),\n\n    canAddContact: (function () {\n      return this.currentUserCan('add_patient');\n    }).property(),\n\n    canAddImaging: (function () {\n      return this.currentUserCan('add_imaging');\n    }).property(),\n\n    canAddLab: (function () {\n      return this.currentUserCan('add_lab');\n    }).property(),\n\n    canAddMedication: (function () {\n      return this.currentUserCan('add_medication');\n    }).property(),\n\n    canAddPhoto: (function () {\n      var isFileSystemEnabled = this.get('isFileSystemEnabled');\n      return this.currentUserCan('add_photo') && isFileSystemEnabled;\n    }).property(),\n\n    canAddSocialWork: (function () {\n      return this.currentUserCan('add_socialwork');\n    }).property(),\n\n    canAddVisit: (function () {\n      return this.currentUserCan('add_visit');\n    }).property(),\n\n    canDeleteAppointment: (function () {\n      return this.currentUserCan('delete_appointment');\n    }).property(),\n\n    canDeleteContact: (function () {\n      return this.currentUserCan('add_patient');\n    }).property(),\n\n    canDeleteImaging: (function () {\n      return this.currentUserCan('delete_imaging');\n    }).property(),\n\n    canDeleteLab: (function () {\n      return this.currentUserCan('delete_lab');\n    }).property(),\n\n    canDeleteMedication: (function () {\n      return this.currentUserCan('delete_medication');\n    }).property(),\n\n    canDeletePhoto: (function () {\n      return this.currentUserCan('delete_photo');\n    }).property(),\n\n    canDeleteSocialWork: (function () {\n      return this.currentUserCan('delete_socialwork');\n    }).property(),\n\n    canDeleteVisit: (function () {\n      return this.currentUserCan('delete_visit');\n    }).property(),\n\n    patientTypes: ['Charity', 'Private'],\n\n    config: _ember['default'].inject.service(),\n    filesystem: _ember['default'].inject.service(),\n    database: _ember['default'].inject.service(),\n    patientController: _ember['default'].inject.controller('patients'),\n\n    addressOptions: _ember['default'].computed.alias('patientController.addressOptions'),\n    address1Include: _ember['default'].computed.alias('patientController.addressOptions.value.address1Include'),\n    address1Label: _ember['default'].computed.alias('patientController.addressOptions.value.address1Label'),\n    address2Include: _ember['default'].computed.alias('patientController.addressOptions.value.address2Include'),\n    address2Label: _ember['default'].computed.alias('patientController.addressOptions.value.address2Label'),\n    address3Include: _ember['default'].computed.alias('patientController.addressOptions.value.address3Include'),\n    address3Label: _ember['default'].computed.alias('patientController.addressOptions.value.address3Label'),\n    address4Include: _ember['default'].computed.alias('patientController.addressOptions.value.address4Include'),\n    address4Label: _ember['default'].computed.alias('patientController.addressOptions.value.address4Label'),\n\n    clinicList: _ember['default'].computed.alias('patientController.clinicList'),\n    countryList: _ember['default'].computed.alias('patientController.countryList'),\n    customSocialForm: _ember['default'].computed.alias('patientController.customSocialForm.value'),\n    isFileSystemEnabled: _ember['default'].computed.alias('filesystem.isFileSystemEnabled'),\n\n    pricingProfiles: _ember['default'].computed.map('patientController.pricingProfiles', _hospitalrunUtilsSelectValues['default'].selectObjectMap),\n    sexList: _ember['default'].computed.alias('patientController.sexList'),\n    statusList: _ember['default'].computed.alias('patientController.statusList'),\n\n    haveAdditionalContacts: (function () {\n      var additionalContacts = this.get('model.additionalContacts');\n      return !_ember['default'].isEmpty(additionalContacts);\n    }).property('model.additionalContacts'),\n\n    haveAddressOptions: (function () {\n      var addressOptions = this.get('addressOptions');\n      return !_ember['default'].isEmpty(addressOptions);\n    }).property('addressOptions'),\n\n    lookupListsToUpdate: [{\n      name: 'countryList',\n      property: 'model.country',\n      id: 'country_list'\n    }, {\n      name: 'clinicList',\n      property: 'model.clinic',\n      id: 'clinic_list'\n    }, {\n      name: 'sexList',\n      property: 'model.sex',\n      id: 'sex'\n    }, {\n      name: 'statusList',\n      property: 'model.status',\n      id: 'patient_status_list'\n    }],\n\n    patientImaging: (function () {\n      return this._getVisitCollection('imaging');\n    }).property('model.visits.[].imaging'),\n\n    patientLabs: (function () {\n      return this._getVisitCollection('labs');\n    }).property('model.visits.[].labs'),\n\n    patientMedications: (function () {\n      return this._getVisitCollection('medication');\n    }).property('model.visits.[].medication'),\n\n    patientProcedures: (function () {\n      return this._getVisitCollection('procedures');\n    }).property('model.visits.[].procedures'),\n\n    showExpenseTotal: (function () {\n      var expenses = this.get('model.expenses');\n      return !_ember['default'].isEmpty(expenses);\n    }).property('model.expenses.[]'),\n\n    totalExpenses: (function () {\n      var expenses = this.get('model.expenses');\n      if (!_ember['default'].isEmpty(expenses)) {\n        var total = expenses.reduce(function (previousValue, expense) {\n          if (!_ember['default'].isEmpty(expense.cost)) {\n            return previousValue + parseInt(expense.cost);\n          }\n        }, 0);\n        return total;\n      }\n    }).property('model.expenses.@each.cost'),\n\n    updateCapability: 'add_patient',\n\n    actions: {\n      addContact: function addContact(newContact) {\n        var additionalContacts = this.getWithDefault('model.additionalContacts', []);\n        var model = this.get('model');\n        additionalContacts.addObject(newContact);\n        model.set('additionalContacts', additionalContacts);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n      returnToPatient: function returnToPatient() {\n        this.transitionToRoute('patients.index');\n      },\n      /**\n       * Add the specified photo to the patient's record.\n       * @param {File} photoFile the photo file to add.\n       * @param {String} caption the caption to store with the photo.\n       * @param {boolean} coverImage flag indicating if image should be marked as the cover image (currently unused).\n       */\n      addPhoto: function addPhoto(photoFile, caption, coverImage) {\n        var dirToSaveTo = this.get('model.id') + '/photos/';\n        var fileSystem = this.get('filesystem');\n        var photos = this.get('model.photos');\n        var newPatientPhoto = this.get('store').createRecord('photo', {\n          patient: this.get('model'),\n          localFile: true,\n          caption: caption,\n          coverImage: coverImage\n        });\n        newPatientPhoto.save().then((function (savedPhotoRecord) {\n          var pouchDbId = this.get('database').getPouchId(savedPhotoRecord.get('id'), 'photo');\n          fileSystem.addFile(photoFile, dirToSaveTo, pouchDbId).then((function (fileEntry) {\n            fileSystem.fileToDataURL(photoFile).then((function (photoDataUrl) {\n              savedPhotoRecord = this.get('store').find('photo', savedPhotoRecord.get('id')).then((function (savedPhotoRecord) {\n                var dataUrlParts = photoDataUrl.split(',');\n                savedPhotoRecord.setProperties({\n                  fileName: fileEntry.fullPath,\n                  url: fileEntry.toURL(),\n                  _attachments: {\n                    file: {\n                      content_type: photoFile.type,\n                      data: dataUrlParts[1]\n                    }\n                  }\n                });\n                savedPhotoRecord.save().then((function (savedPhotoRecord) {\n                  photos.addObject(savedPhotoRecord);\n                  this.send('closeModal');\n                }).bind(this));\n              }).bind(this));\n            }).bind(this));\n          }).bind(this));\n        }).bind(this));\n      },\n\n      appointmentDeleted: function appointmentDeleted(deletedAppointment) {\n        var appointments = this.get('model.appointments');\n        appointments.removeObject(deletedAppointment);\n        this.send('closeModal');\n      },\n\n      deleteContact: function deleteContact(model) {\n        var contact = model.get('contactToDelete');\n        var additionalContacts = this.get('model.additionalContacts');\n        additionalContacts.removeObject(contact);\n        this.send('update', true);\n      },\n\n      deleteExpense: function deleteExpense(model) {\n        var expense = model.get('expenseToDelete');\n        var expenses = this.get('model.expenses');\n        expenses.removeObject(expense);\n        this.send('update', true);\n      },\n\n      deleteFamily: function deleteFamily(model) {\n        var family = model.get('familyToDelete');\n        var familyInfo = this.get('model.familyInfo');\n        familyInfo.removeObject(family);\n        this.send('update', true);\n      },\n\n      deletePhoto: function deletePhoto(model) {\n        var photo = model.get('photoToDelete');\n        var photoId = photo.get('id');\n        var photos = this.get('model.photos');\n        var filePath = photo.get('fileName');\n        photos.removeObject(photo);\n        photo.destroyRecord().then((function () {\n          var fileSystem = this.get('filesystem');\n          var isFileSystemEnabled = this.get('isFileSystemEnabled');\n          if (isFileSystemEnabled) {\n            var pouchDbId = this.get('database').getPouchId(photoId, 'photo');\n            fileSystem.deleteFile(filePath, pouchDbId);\n          }\n        }).bind(this));\n      },\n\n      editAppointment: function editAppointment(appointment) {\n        if (this.get('canAddAppointment')) {\n          appointment.set('returnToPatient', true);\n          appointment.set('returnTo', null);\n          this.transitionToRoute('appointments.edit', appointment);\n        }\n      },\n\n      editImaging: function editImaging(imaging) {\n        if (this.get('canAddImaging')) {\n          if (imaging.get('canEdit')) {\n            imaging.setProperties({\n              'returnToPatient': true\n            });\n            this.transitionToRoute('imaging.edit', imaging);\n          }\n        }\n      },\n\n      editLab: function editLab(lab) {\n        if (this.get('canAddLab')) {\n          if (lab.get('canEdit')) {\n            lab.setProperties({\n              'returnToPatient': true\n            });\n            this.transitionToRoute('labs.edit', lab);\n          }\n        }\n      },\n\n      editMedication: function editMedication(medication) {\n        if (this.get('canAddMedication')) {\n          if (medication.get('canEdit')) {\n            medication.set('returnToPatient', true);\n            this.transitionToRoute('medication.edit', medication);\n          }\n        }\n      },\n\n      editPhoto: function editPhoto(photo) {\n        this.send('openModal', 'patients.photo', photo);\n      },\n\n      editProcedure: function editProcedure(procedure) {\n        if (this.get('canAddVisit')) {\n          procedure.set('patient', this.get('model'));\n          procedure.set('returnToVisit', false);\n          procedure.set('returnToPatient', true);\n          this.transitionToRoute('procedures.edit', procedure);\n        }\n      },\n\n      editVisit: function editVisit(visit) {\n        if (this.get('canAddVisit')) {\n          this.transitionToRoute('visits.edit', visit);\n        }\n      },\n\n      newAppointment: function newAppointment() {\n        this._addChildObject('appointments.edit');\n      },\n\n      newImaging: function newImaging() {\n        this._addChildObject('imaging.edit');\n      },\n\n      newLab: function newLab() {\n        this._addChildObject('labs.edit');\n      },\n\n      newMedication: function newMedication() {\n        this._addChildObject('medication.edit');\n      },\n\n      newVisit: function newVisit() {\n        var patient = this.get('model');\n        var visits = this.get('model.visits');\n        this.send('createNewVisit', patient, visits);\n      },\n\n      showAddContact: function showAddContact() {\n        this.send('openModal', 'patients.add-contact', {});\n      },\n\n      showAddPhoto: function showAddPhoto() {\n        this.send('openModal', 'patients.photo', {\n          isNew: true\n        });\n      },\n\n      showAddPatientNote: function showAddPatientNote(model) {\n        if (this.get('canAddNote')) {\n          if (_ember['default'].isEmpty(model)) {\n            model = this.get('store').createRecord('patient-note', {\n              patient: this.get('model'),\n              createdBy: this.getUserName()\n            });\n          }\n          this.send('openModal', 'patients.notes', model);\n        }\n      },\n\n      showDeleteAppointment: function showDeleteAppointment(appointment) {\n        appointment.set('deleteFromPatient', true);\n        this.send('openModal', 'appointments.delete', appointment);\n      },\n\n      showDeleteContact: function showDeleteContact(contact) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deleteContact',\n          title: this.get('i18n').t('patients.titles.deleteContact'),\n          message: this.get('i18n').t('patients.titles.deletePhoto', { object: 'contact' }),\n          contactToDelete: contact,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      showDeleteExpense: function showDeleteExpense(expense) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deleteExpense',\n          title: this.get('i18n').t('patients.titles.deleteExpense'),\n          message: this.get('i18n').t('patients.titles.deletePhoto', { object: 'expense' }),\n          expenseToDelete: expense,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      showDeleteFamily: function showDeleteFamily(familyInfo) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deleteFamily',\n          title: this.get('i18n').t('patients.titles.deleteFamilyMember'),\n          message: this.get('i18n').t('patients.titles.deletePhoto', { object: 'family member' }),\n          familyToDelete: familyInfo,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      showDeleteImaging: function showDeleteImaging(imaging) {\n        this.send('openModal', 'imaging.delete', imaging);\n      },\n\n      showDeleteLab: function showDeleteLab(lab) {\n        this.send('openModal', 'labs.delete', lab);\n      },\n\n      showDeleteMedication: function showDeleteMedication(medication) {\n        this.send('openModal', 'medication.delete', medication);\n      },\n\n      showDeletePhoto: function showDeletePhoto(photo) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deletePhoto',\n          title: this.get('i18n').t('patients.titles.deletePhoto'),\n          message: this.get('i18n').t('patients.titles.deletePhoto', { object: 'photo' }),\n          photoToDelete: photo,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      showDeleteVisit: function showDeleteVisit(visit) {\n        visit.set('deleteFromPatient', true);\n        this.send('openModal', 'visits.delete', visit);\n      },\n\n      showEditExpense: function showEditExpense(expenseInfo) {\n        this._showEditSocial(expenseInfo, 'social-expense', 'expense');\n      },\n\n      showEditFamily: function showEditFamily(familyInfo) {\n        this._showEditSocial(familyInfo, 'family-info', 'family-info');\n      },\n\n      updateExpense: function updateExpense(model) {\n        this._updateSocialRecord(model, 'expenses');\n      },\n\n      updateFamilyInfo: function updateFamilyInfo(model) {\n        this._updateSocialRecord(model, 'familyInfo');\n      },\n\n      updatePhoto: function updatePhoto(photo) {\n        photo.save().then((function () {\n          this.send('closeModal');\n        }).bind(this));\n      },\n\n      visitDeleted: function visitDeleted(deletedVisit) {\n        var _this = this;\n\n        var visits = this.get('model.visits');\n        var patient = this.get('model');\n        var patientAdmitted = patient.get('admitted');\n        visits.removeObject(deletedVisit);\n        if (patientAdmitted && _ember['default'].isEmpty(visits.findBy('status', 'Admitted'))) {\n          patient.set('admitted', false);\n          patient.save().then(function () {\n            return _this.send('closeModal');\n          });\n        } else {\n          this.send('closeModal');\n        }\n      }\n\n    },\n\n    _addChildObject: function _addChildObject(route) {\n      this.transitionToRoute(route, 'new').then((function (newRoute) {\n        newRoute.currentModel.setProperties({\n          patient: this.get('model'),\n          returnToPatient: true,\n          selectPatient: false\n        });\n      }).bind(this));\n    },\n\n    _showEditSocial: function _showEditSocial(editAttributes, modelName, route) {\n      var model = undefined;\n      if (_ember['default'].isEmpty(editAttributes)) {\n        model = this.get('store').createRecord(modelName, {\n          newRecord: true\n        });\n      } else {\n        model = this.get('store').push({\n          data: {\n            id: _ember['default'].get(editAttributes, 'id'),\n            type: modelName,\n            attributes: editAttributes\n          }\n        });\n      }\n      this.send('openModal', 'patients.socialwork.' + route, model);\n    },\n\n    _getVisitCollection: function _getVisitCollection(name) {\n      var returnList = [];\n      var visits = this.get('model.visits');\n      if (!_ember['default'].isEmpty(visits)) {\n        visits.forEach(function (visit) {\n          visit.get(name).then(function (items) {\n            returnList.addObjects(items);\n            if (returnList.length > 0) {\n              returnList[0].set('first', true);\n            }\n          });\n        });\n      }\n      return returnList;\n    },\n\n    _updateSocialRecord: function _updateSocialRecord(recordToUpdate, name) {\n      var socialRecords = this.getWithDefault('model.' + name, []);\n      var isNew = recordToUpdate.get('isNew');\n      var patient = this.get('model');\n      var objectToUpdate = recordToUpdate.serialize();\n      objectToUpdate.id = recordToUpdate.get('id');\n      if (isNew) {\n        socialRecords.addObject(_ember['default'].Object.create(objectToUpdate));\n      } else {\n        var updateRecord = socialRecords.findBy('id', objectToUpdate.id);\n        _ember['default'].setProperties(updateRecord, objectToUpdate);\n      }\n      patient.set(name, socialRecords);\n      this.send('update', true);\n      this.send('closeModal');\n    },\n\n    _updateSequence: function _updateSequence(record) {\n      var _this2 = this;\n\n      var config = this.get('config');\n      var friendlyId = record.get('friendlyId');\n      return config.getPatientPrefix().then(function (prefix) {\n        var re = new RegExp('^' + prefix + '\\\\d{5}$');\n        if (!re.test(friendlyId)) {\n          return;\n        }\n        return _this2.store.find('sequence', 'patient').then(function (sequence) {\n          var sequenceNumber = sequence.get('value');\n          var patientNumber = parseInt(friendlyId.slice(prefix.length));\n          if (patientNumber > sequenceNumber) {\n            sequence.set('value', patientNumber);\n            return sequence.save();\n          }\n        });\n      });\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      var _this3 = this;\n\n      if (!this.get('model.isNew')) {\n        return _ember['default'].RSVP.resolve();\n      }\n      var database = this.get('database');\n      var id = this.get('model.friendlyId');\n      var maxValue = this.get('maxValue');\n      var query = {\n        startkey: [id, null],\n        endkey: [id, maxValue]\n      };\n      return database.queryMainDB(query, 'patient_by_display_id').then(function (found) {\n        if (_ember['default'].isEmpty(found.rows)) {\n          return _ember['default'].RSVP.resolve();\n        }\n        return _this3.generateFriendlyId().then(function (friendlyId) {\n          _this3.model.set('friendlyId', friendlyId);\n          return _ember['default'].RSVP.resolve();\n        });\n      });\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      var _this4 = this;\n\n      this._updateSequence(record).then(function () {\n        _this4.send('openModal', 'dialog', _ember['default'].Object.create({\n          title: _this4.get('i18n').t('patients.titles.savedPatient'),\n          message: _this4.get('i18n').t('patients.messages.savedPatient', record),\n          updateButtonAction: 'returnToPatient',\n          updateButtonText: _this4.get('i18n').t('patients.buttons.backToPatients'),\n          cancelButtonText: _this4.get('i18n').t('buttons.close')\n        }));\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/patients/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'hospitalrun/mixins/patient-id', 'hospitalrun/mixins/patient-visits', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/pouchdb', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _hospitalrunMixinsPatientId, _hospitalrunMixinsPatientVisits, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsPouchdb, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsPatientId['default'], _hospitalrunMixinsPatientVisits['default'], _hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsPatientNotes['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('patients.titles.edit'),\n    modelName: 'patient',\n    newTitle: (0, _emberI18n.translationMacro)('patients.titles.new'),\n    photos: null,\n\n    actions: {\n      updateNote: function updateNote(note) {\n        note.get('visit').save().then(function () {\n          // noop\n        });\n      },\n      appointmentDeleted: function appointmentDeleted(model) {\n        this.controller.send('appointmentDeleted', model);\n      },\n      returnToPatient: function returnToPatient() {\n        this.controller.send('returnToPatient');\n      },\n      deleteContact: function deleteContact(model) {\n        this.controller.send('deleteContact', model);\n      },\n\n      deleteExpense: function deleteExpense(model) {\n        this.controller.send('deleteExpense', model);\n      },\n\n      deleteFamily: function deleteFamily(model) {\n        this.controller.send('deleteFamily', model);\n      },\n\n      deletePhoto: function deletePhoto(model) {\n        this.controller.send('deletePhoto', model);\n      },\n\n      updateExpense: function updateExpense(model) {\n        this.controller.send('updateExpense', model);\n      },\n\n      updateFamilyInfo: function updateFamilyInfo(model) {\n        this.controller.send('updateFamilyInfo', model);\n      },\n\n      visitDeleted: function visitDeleted(model) {\n        this.controller.send('visitDeleted', model);\n      }\n    },\n\n    getNewData: function getNewData() {\n      return this.generateFriendlyId().then(function (friendlyId) {\n        return { friendlyId: friendlyId };\n      });\n    },\n\n    setupController: function setupController(controller, model) {\n      // Load appointments, photos and visits asynchronously.\n      var friendlyId = model.get('friendlyId');\n      var externalId = model.get('externalPatientId');\n      var maxValue = this.get('maxValue');\n      var patientId = model.get('id');\n      if (_ember['default'].isEmpty(friendlyId) && !_ember['default'].isEmpty(externalId)) {\n        model.set('friendlyId', externalId);\n      }\n      this._super(controller, model);\n      this.getPatientVisits(model).then(function (visits) {\n        model.set('visits', visits);\n      });\n      this.store.query('appointment', {\n        options: {\n          startkey: [patientId, null, null, 'appointment_'],\n          endkey: [patientId, maxValue, maxValue, maxValue]\n        },\n        mapReduce: 'appointments_by_patient'\n      }).then(function (appointments) {\n        model.set('appointments', appointments);\n      });\n      this.store.query('photo', {\n        options: {\n          key: patientId\n        },\n        mapReduce: 'photo_by_patient'\n      }).then(function (photos) {\n        var patientPhotos = [];\n        patientPhotos.addObjects(photos);\n        model.set('photos', patientPhotos);\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/patients/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/patient-visits'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsPatientVisits) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsPatientVisits['default'], {\n    addPermission: 'add_patient',\n    deletePermission: 'delete_patient',\n    canAdmitPatient: (function () {\n      return this.currentUserCan('admit_patient');\n    }).property(),\n\n    canDischargePatient: (function () {\n      return this.currentUserCan('discharge_patient');\n    }).property(),\n\n    startKey: [],\n    actions: {\n      admitPatient: function admitPatient(patient) {\n        this.getPatientVisits(patient).then((function (visits) {\n          this.send('createNewVisit', patient, visits);\n        }).bind(this));\n      },\n\n      dischargePatient: function dischargePatient(patient) {\n        this.getPatientVisits(patient).then((function (visits) {\n          var visitToDischarge = visits.findBy('status', 'Admitted');\n          if (visitToDischarge) {\n            visitToDischarge.set('status', 'Discharged');\n            visitToDischarge.set('endDate', new Date());\n            this.transitionToRoute('visits.edit', visitToDischarge);\n          }\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    modelName: 'patient',\n    pageTitle: (0, _emberI18n.translationMacro)('patients.titles.patientListing'),\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var displayPatientId = item.get('displayPatientId');\n      var id = this._getPouchIdFromItem(item);\n      return [displayPatientId, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      return {\n        mapReduce: 'patient_by_display_id'\n      };\n    }\n\n  });\n});","define('hospitalrun/tests/patients/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/notes/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunMixinsPatientSubmodule, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsIsUpdateDisabled['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPatientNotes['default'], {\n    cancelAction: 'closeModal',\n    updateAction: 'updateNote',\n    moduleController: _ember['default'].inject.controller('patients'),\n    physicianList: _ember['default'].computed.alias('moduleController.physicianList'),\n    lookupListsToUpdate: [{\n      name: 'physicianList',\n      property: 'model.attribution',\n      id: 'physician_list'\n    }],\n    title: (function () {\n      if (this.get('model.isNew')) {\n        return this.get('i18n').t('patients.notes.newNote') + ' ' + this.get('model.patient.displayName');\n      } else {\n        return this.get('i18n').t('patients.notes.newNote') + ' ' + moment(this.get('model.date')).format('MM/DD/YYYY') + ' for ' + this.get('model.patient.displayName');\n      }\n    }).property('model.patient.displayName'),\n    updateCapability: 'add_note',\n    beforeUpdate: function beforeUpdate() {\n      this.set('model.date', new Date());\n      this.set('model.createdBy', this.getUserName());\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n    afterUpdate: function afterUpdate() {\n      this.send(this.get('updateAction'), this.get('model'));\n      this.send(this.get('cancelAction'));\n    },\n    actions: {\n      changeVisit: function changeVisit() {\n        var selectEl = $('select[name=\"note-visits\"]')[0];\n        var selectedIndex = selectEl.selectedIndex;\n        var content = this.get('patientVisitsForSelect');\n\n        // decrement index by 1 if we have a prompt\n        var contentIndex = selectedIndex - 1;\n\n        var selection = content[contentIndex].selectObject;\n\n        // set the local, shadowed selection to avoid leaking\n        // changes to `selection` out via 2-way binding\n        this.get('model').set('visit', selection);\n        this._setNoteType();\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/notes/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/notes/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/notes/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/photo/controller', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend({\n    patientsEdit: _ember['default'].inject.controller('patients/edit'),\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('patients.titles.addPhoto');\n      } else {\n        return this.get('i18n').t('patients.titles.editPhoto');\n      }\n    }).property('model.isNew'),\n\n    updateButtonText: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('buttons.add');\n      } else {\n        return this.get('i18n').t('buttons.update');\n      }\n    }).property('model.isNew'),\n\n    updateButtonAction: 'update',\n    showUpdateButton: true,\n\n    editController: _ember['default'].computed.alias('patientsEdit'),\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      update: function update() {\n        var caption = this.get('model.caption');\n        var isNew = this.get('model.isNew');\n        var photoFile = this.get('model.photoFile');\n        if (isNew) {\n          this.get('editController').send('addPhoto', photoFile, caption);\n        } else {\n          this.get('editController').send('updatePhoto', this.get('model'));\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/photo/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/photo/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/photo/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/quick-add/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-edit-controller', 'ember-i18n'], function (exports, _ember, _hospitalrunControllersAbstractEditController, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    medicationController: _ember['default'].inject.controller('medication'),\n    sexList: _ember['default'].computed.alias('medicationController.sexList'),\n    title: (0, _emberI18n.translationMacro)('patients.titles.new'),\n\n    updateCapability: 'add_patient',\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      }\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      var requestingController = this.get('model.requestingController');\n      requestingController.send('addedNewPatient', record);\n    }\n  });\n});","define('hospitalrun/tests/patients/quick-add/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/quick-add/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/quick-add/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/reports/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-report-controller', 'hospitalrun/mixins/patient-diagnosis', 'hospitalrun/mixins/patient-visits', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/visit-types'], function (exports, _ember, _hospitalrunControllersAbstractReportController, _hospitalrunMixinsPatientDiagnosis, _hospitalrunMixinsPatientVisits, _hospitalrunUtilsSelectValues, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractReportController['default'].extend(_hospitalrunMixinsPatientDiagnosis['default'], _hospitalrunMixinsPatientVisits['default'], _hospitalrunMixinsVisitTypes['default'], {\n    patientsController: _ember['default'].inject.controller('patients'),\n\n    clinicList: _ember['default'].computed.map('patientsController.clinicList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    diagnosisList: _ember['default'].computed.alias('patientsController.diagnosisList'),\n    physicianList: _ember['default'].computed.map('patientsController.physicianList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    locationList: _ember['default'].computed.map('patientsController.locationList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    statusList: _ember['default'].computed.map('patientsController.statusList.value', _hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    visitTypesList: _ember['default'].computed.alias('patientsController.visitTypesList'),\n    reportType: 'detailedAdmissions',\n    patientDetails: {},\n\n    admissionReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        sex: {\n          label: i18n.t('labels.sex'),\n          include: true,\n          property: 'sex'\n        },\n        total: {\n          label: i18n.t('labels.total'),\n          include: true,\n          property: 'total',\n          format: '_numberFormat'\n        }\n      };\n    }),\n    admissionDetailReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'patientId'\n        },\n        name: {\n          label: i18n.t('labels.name'),\n          include: true,\n          property: 'patientName'\n        },\n        admissionDate: {\n          label: i18n.t('patients.labels.admissionDate'),\n          include: true,\n          property: 'admissionDate',\n          format: '_dateTimeFormat'\n        },\n        dischargeDate: {\n          label: i18n.t('patients.labels.dischargeDate'),\n          include: false,\n          property: 'dischargeDate',\n          format: '_dateTimeFormat'\n        },\n        patientDays: {\n          label: i18n.t('patients.labels.patientDays'),\n          include: false,\n          property: 'patientDays',\n          format: '_numberFormat'\n        }\n      };\n    }),\n    diagnosticReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        type: {\n          label: i18n.t('labels.type'),\n          include: true,\n          property: 'type'\n        },\n        total: {\n          label: i18n.t('labels.total'),\n          include: true,\n          property: 'total',\n          format: '_numberFormat'\n        }\n      };\n    }),\n    procedureDetailReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'patient.displayPatientId'\n        },\n        name: {\n          label: i18n.t('labels.name'),\n          include: true,\n          property: 'patient.displayName'\n        },\n        procedure: {\n          label: i18n.t('visits.labels.procedure'),\n          include: true,\n          property: 'procedure'\n        },\n        procedureDate: {\n          label: i18n.t('visits.labels.procedureDate'),\n          include: true,\n          property: 'procedureDate',\n          format: '_dateTimeFormat'\n        }\n      };\n    }),\n    reportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        visitDate: {\n          label: i18n.t('visits.labels.visitDate'),\n          include: true,\n          property: 'visitDate'\n        },\n        visitType: {\n          label: i18n.t('visits.labels.visitType'),\n          include: true,\n          property: 'visitType'\n        },\n        visitLocation: {\n          label: i18n.t('labels.location'),\n          include: false,\n          property: 'location'\n        },\n        examiner: {\n          label: i18n.t('visits.labels.examiner'),\n          include: true,\n          property: 'examiner'\n        },\n        name: {\n          label: i18n.t('labels.name'),\n          include: true,\n          property: 'patient.displayName'\n        },\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'patient.displayPatientId'\n        },\n        sex: {\n          label: i18n.t('patients.labels.sex'),\n          include: true,\n          property: 'patient.sex'\n        },\n        dateOfBirth: {\n          label: i18n.t('patients.labels.dateOfBirth'),\n          include: true,\n          property: 'patient.dateOfBirth',\n          format: '_dateFormat'\n        },\n        age: {\n          label: i18n.t('labels.age'),\n          include: false,\n          property: 'patient.age'\n        },\n        primaryDiagnosis: {\n          label: i18n.t('patients.labels.primaryDiagnosis'),\n          include: false,\n          property: 'primaryDiagnosis'\n        },\n        secondaryDiagnoses: {\n          label: i18n.t('patients.labels.secondaryDiagnosis'),\n          include: false,\n          property: 'additionalDiagnoses',\n          format: '_diagnosisListToString'\n        },\n        procedures: {\n          label: i18n.t('labels.procedures'),\n          include: false,\n          property: 'resolvedProcedures',\n          format: '_procedureListToString'\n        },\n        contacts: {\n          label: i18n.t('patients.labels.contacts'),\n          include: false,\n          property: 'patient',\n          format: '_contactListToString'\n        },\n        referredBy: {\n          label: i18n.t('patients.labels.referredBy'),\n          include: false,\n          property: 'patient.referredBy'\n        },\n        referredDate: {\n          label: i18n.t('patients.labels.referredDate'),\n          include: false,\n          property: 'patient.referredDate',\n          format: '_dateFormat'\n        }\n      };\n    }),\n    statusReportColumns: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return {\n        id: {\n          label: i18n.t('labels.id'),\n          include: true,\n          property: 'patient.displayPatientId'\n        },\n        name: {\n          label: i18n.t('labels.name'),\n          include: true,\n          property: 'patient.displayName'\n        },\n        status: {\n          label: i18n.t('labels.status'),\n          include: true,\n          property: 'patient.status'\n        },\n        primaryDiagnosis: {\n          label: i18n.t('patients.labels.primaryDiagnosis'),\n          include: true,\n          property: 'patient.visits',\n          format: '_formatPrimaryDiagnosis'\n        },\n        secondaryDiagnoses: {\n          label: i18n.t('patients.labels.secondaryDiagnosis'),\n          include: true,\n          property: 'patient.visits',\n          format: '_formatSecondaryDiagnosis'\n        }\n      };\n    }),\n    reportTypes: _ember['default'].computed(function () {\n      var i18n = this.get('i18n');\n      return [{\n        name: i18n.t('patients.titles.admissionsDetail'),\n        value: 'detailedAdmissions'\n      }, {\n        name: i18n.t('patients.titles.admissionsSummary'),\n        value: 'admissions'\n      }, {\n        name: i18n.t('patients.titles.diagnosticTesting'),\n        value: 'diagnostic'\n      }, {\n        name: i18n.t('patients.titles.dischargesDetail'),\n        value: 'detailedDischarges'\n      }, {\n        name: i18n.t('patients.titles.dischargesSummary'),\n        value: 'discharges'\n      }, {\n        name: i18n.t('patients.titles.proceduresDetail'),\n        value: 'detailedProcedures'\n      }, {\n        name: i18n.t('patients.titles.proceduresSummary'),\n        value: 'procedures'\n      }, {\n        name: i18n.t('patients.titles.patientStatus'),\n        value: 'status'\n      }, {\n        name: i18n.t('patients.titles.totalPatientDays'),\n        value: 'patientDays'\n      }, {\n        name: i18n.t('patients.titles.totalPatientDaysDetailed'),\n        value: 'detailedPatientDays'\n      }, {\n        name: i18n.t('patients.titles.visit'),\n        value: 'visit'\n      }];\n    }),\n\n    isDischargeReport: (function () {\n      var reportType = this.get('reportType');\n      return reportType.toLowerCase().indexOf('discharges') > -1;\n    }).property('reportType'),\n\n    isStatusReport: (function () {\n      var reportType = this.get('reportType');\n      return reportType === 'status';\n    }).property('reportType'),\n\n    isVisitReport: (function () {\n      var reportType = this.get('reportType');\n      return reportType === 'visit';\n    }).property('reportType'),\n\n    _addContactToList: function _addContactToList(phone, email, prefix, contactList) {\n      var contactArray = [];\n      if (!_ember['default'].isEmpty(email) || !_ember['default'].isEmpty(phone)) {\n        if (!_ember['default'].isEmpty(phone)) {\n          contactArray.push(phone);\n        }\n        if (!_ember['default'].isEmpty(email)) {\n          contactArray.push(email);\n        }\n        contactList.push(prefix + contactArray.join(', '));\n      }\n    },\n\n    _addReportRow: function _addReportRow(row, skipFormatting, reportColumns, rowAction) {\n      if (_ember['default'].isEmpty(rowAction) && !_ember['default'].isEmpty(row.patient)) {\n        var patientId = null;\n        if (row.get) {\n          patientId = row.get('patient.id');\n        } else {\n          patientId = row.patient.get('id');\n        }\n        if (!_ember['default'].isEmpty(patientId)) {\n          rowAction = {\n            action: 'viewPatient',\n            model: patientId\n          };\n        }\n      }\n      this._super(row, skipFormatting, reportColumns, rowAction);\n    },\n\n    /**\n     * Given a list of records, organize and total by them by type and then add them to the report.\n     * @param records {Array} list of records to total.\n     * @param typeField {String} the field in the records containing the type.\n     * @param totalLabel {String} the label for the grand total.\n     * @param reportColumns\n     */\n    _addRowsByType: function _addRowsByType(records, typeField, totalLabel, reportColumns) {\n      var types = this._totalByType(records, typeField, totalLabel);\n      types.forEach((function (type) {\n        this._addReportRow(type, true, reportColumns);\n      }).bind(this));\n    },\n\n    _addPatientProcedureRows: function _addPatientProcedureRows(procedureTotals, reportColumns) {\n      procedureTotals.forEach((function (procedureTotal) {\n        if (!_ember['default'].isEmpty(procedureTotal.records)) {\n          procedureTotal.records.forEach((function (patientProcedure, index) {\n            this._addReportRow({\n              patient: patientProcedure.get('patient'),\n              procedure: patientProcedure.get('description'),\n              procedureDate: patientProcedure.get('procedureDate')\n            }, false, reportColumns);\n            if (index + 1 === procedureTotal.records.length) {\n              this._addReportRow({\n                procedure: 'Total for ' + procedureTotal.type + ': ' + procedureTotal.total\n              }, true, reportColumns);\n            }\n          }).bind(this));\n        } else {\n          this._addReportRow({\n            procedure: 'Total for ' + procedureTotal.type + ': ' + procedureTotal.total\n          }, true, reportColumns);\n        }\n      }).bind(this));\n    },\n\n    _contactListToString: function _contactListToString(patient) {\n      var additionalContacts = patient.get('additionalContacts');\n      var contactDesc = undefined;\n      var contactList = [];\n      var email = patient.get('email');\n      var phone = patient.get('phone');\n      this._addContactToList(phone, email, 'Primary: ', contactList);\n      if (!_ember['default'].isEmpty(additionalContacts)) {\n        additionalContacts.forEach((function (contact) {\n          contactDesc = '';\n          if (!_ember['default'].isEmpty(contact.name) && !_ember['default'].isEmpty(contact.relationship)) {\n            if (!_ember['default'].isEmpty(contact.name)) {\n              contactDesc += contact.name;\n            }\n            if (!_ember['default'].isEmpty(contact.relationship)) {\n              if (!_ember['default'].isEmpty(contactDesc)) {\n                contactDesc += ' - ';\n              }\n              contactDesc += contact.relationship;\n            }\n            contactDesc += ': ';\n          }\n          this._addContactToList(contact.phone, contact.email, contactDesc, contactList);\n        }).bind(this));\n      }\n      return contactList.join(';\\n');\n    },\n\n    _dateTimeFormat: function _dateTimeFormat(value) {\n      return this._dateFormat(value, 'l h:mm A');\n    },\n\n    _diagnosisListToString: function _diagnosisListToString(diagnoses) {\n      return this._listToString(diagnoses, 'description', 'date');\n    },\n    /**\n       * Find diagnostics by the specified dates and the record's start and (optional) end dates.\n       */\n    _findDiagnosticsByDate: function _findDiagnosticsByDate() {\n      var filterEndDate = this.get('endDate');\n      var filterStartDate = this.get('startDate');\n      var findParams = {\n        options: {},\n        mapReduce: 'imaging_by_status'\n      };\n      var maxValue = this.get('maxValue');\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        findParams.options.startkey = ['Completed', null, filterStartDate.getTime(), null];\n\n        if (!_ember['default'].isEmpty(filterEndDate)) {\n          filterEndDate = moment(filterEndDate).endOf('day').toDate();\n          findParams.options.endkey = ['Completed', maxValue, filterEndDate.getTime(), maxValue];\n        }\n        this.store.query('imaging', findParams).then((function (imagingRecords) {\n          var returnRecords = {\n            imaging: imagingRecords\n          };\n          findParams.mapReduce = 'lab_by_status';\n          this.store.query('lab', findParams).then(function (labRecords) {\n            returnRecords.labs = labRecords;\n            resolve(returnRecords);\n          }, reject);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    /**\n     * Find procedures by the specified dates and the record's start and (optional) end dates.\n     */\n    _findPatientsByStatus: function _findPatientsByStatus() {\n      var status = this.get('status');\n      var findParams = {\n        options: {\n          key: status\n        },\n        mapReduce: 'patient_by_status'\n      };\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this.store.query('patient', findParams).then(resolve, reject);\n      }).bind(this));\n    },\n\n    /**\n     * Find procedures by the specified dates and the record's start and (optional) end dates.\n     */\n    _findProceduresByDate: function _findProceduresByDate() {\n      var filterEndDate = this.get('endDate');\n      var filterStartDate = this.get('startDate');\n      var findParams = {\n        options: {},\n        mapReduce: 'procedure_by_date'\n      };\n      var maxValue = this.get('maxValue');\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        findParams.options.startkey = [filterStartDate.getTime(), null];\n\n        if (!_ember['default'].isEmpty(filterEndDate)) {\n          filterEndDate = moment(filterEndDate).endOf('day').toDate();\n          findParams.options.endkey = [filterEndDate.getTime(), maxValue];\n        }\n        this.store.query('procedure', findParams).then(resolve, reject);\n      }).bind(this));\n    },\n\n    /**\n     * Find visits by the specified dates and the record's start and (optional) end dates.\n     * @param {String} reportType the type of report to find visits for.\n     */\n    _findVisitsByDate: function _findVisitsByDate() {\n      var filterEndDate = this.get('endDate');\n      var filterStartDate = this.get('startDate');\n      var findParams = {\n        options: {},\n        mapReduce: 'visit_by_date'\n      };\n      var isDischargeReport = this.get('isDischargeReport');\n      var maxValue = this.get('maxValue');\n      if (isDischargeReport) {\n        findParams.mapReduce = 'visit_by_discharge_date';\n      }\n\n      /**\n       * Admissions - start date between start and end date\n       * Discharge end date between start and end date\n       */\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var isDischargeReport = this.get('isDischargeReport');\n        findParams.options.startkey = [filterStartDate.getTime(), null];\n        if (!_ember['default'].isEmpty(filterEndDate)) {\n          filterEndDate = moment(filterEndDate).endOf('day').toDate();\n          if (isDischargeReport) {\n            findParams.options.endkey = [filterEndDate.getTime(), maxValue];\n          } else {\n            findParams.options.endkey = [filterEndDate.getTime(), maxValue, maxValue];\n          }\n        }\n        this.store.query('visit', findParams).then(resolve, reject);\n      }).bind(this));\n    },\n\n    _filterByLike: function _filterByLike(records, field, likeCondition) {\n      return records.filter(function (record) {\n        var fieldValue = record.get('field');\n        if (_ember['default'].isEmpty(fieldValue)) {\n          return false;\n        } else {\n          if (_ember['default'].isArray(fieldValue)) {\n            var foundValue = fieldValue.find((function (value) {\n              return this._haveLikeValue(value, likeCondition);\n            }).bind(this));\n            return !_ember['default'].isEmpty(foundValue);\n          } else {\n            return this._haveLikeValue(fieldValue, likeCondition);\n          }\n        }\n      });\n    },\n\n    _filterInPatientVisit: function _filterInPatientVisit(visit) {\n      var outPatient = visit.get('outPatient');\n      var status = visit.get('status');\n      return !outPatient && !_ember['default'].isEmpty(status);\n    },\n\n    _finishVisitReport: function _finishVisitReport(visits) {\n      var visitTypes = this._totalByType(visits, 'visitType', 'total');\n      visitTypes.forEach((function (visitType) {\n        if (visitType.type === 'total') {\n          this._addReportRow({\n            visitDate: 'Total visits: ' + visitType.total\n          });\n        } else {\n          visitType.records.forEach((function (visit) {\n            this._addReportRow(visit);\n          }).bind(this));\n          this._addReportRow({\n            visitDate: 'Total for ' + visitType.type + ': ' + visitType.total\n          });\n        }\n      }).bind(this));\n      this._finishReport();\n    },\n    _formatPrimaryDiagnosis: function _formatPrimaryDiagnosis(visits) {\n      var primaryDiagnoses = this.getPrimaryDiagnoses(visits);\n      return this._diagnosisListToString(primaryDiagnoses);\n    },\n\n    _formatSecondaryDiagnosis: function _formatSecondaryDiagnosis(visits) {\n      var secondaryDiagnoses = this.getSecondaryDiagnoses(visits);\n      return this._diagnosisListToString(secondaryDiagnoses);\n    },\n\n    _generateAdmissionOrDischargeReport: function _generateAdmissionOrDischargeReport(visits, reportType) {\n      var _this = this;\n\n      var detailedReport = false;\n      var reportColumns = undefined;\n      var patientBySex = {};\n      var sexNotEnteredLabel = this.get('i18n').t('patients.labels.sexNotEntered');\n\n      if (reportType.indexOf('detailed') > -1) {\n        detailedReport = true;\n        reportColumns = this.get('admissionDetailReportColumns');\n        reportColumns.patientDays.include = false;\n        if (reportType === 'detailedDischarges') {\n          reportColumns.dischargeDate.include = true;\n        } else {\n          reportColumns.dischargeDate.include = false;\n        }\n      } else {\n        reportColumns = this.get('admissionReportColumns');\n      }\n      visits = visits.filter(this._filterInPatientVisit);\n      visits.forEach((function (visit) {\n        if (!this.get('isDischargeReport') || !_ember['default'].isEmpty(visit.get('endDate'))) {\n          var reportRow = {\n            patient: visit.get('patient'),\n            patientId: visit.get('patient.displayPatientId'),\n            patientName: visit.get('patient.displayName'),\n            admissionDate: visit.get('startDate'),\n            dischargeDate: visit.get('endDate')\n          };\n          var sex = visit.get('patient.sex');\n          if (!sex) {\n            sex = sexNotEnteredLabel;\n          }\n          var sexGrouping = patientBySex[sex];\n          if (!sexGrouping) {\n            sexGrouping = {\n              count: 0,\n              rows: []\n            };\n            patientBySex[sex] = sexGrouping;\n          }\n          sexGrouping.count++;\n          sexGrouping.rows.push(reportRow);\n        }\n      }).bind(this));\n      var sexTotal = 0;\n      var addPatientBySexRows = function addPatientBySexRows(reportRow) {\n        _this._addReportRow(reportRow, false, reportColumns);\n      };\n      for (var sex in patientBySex) {\n        if (detailedReport) {\n          patientBySex[sex].rows.forEach(addPatientBySexRows);\n          this._addReportRow({ patientId: sex + ' Total: ' + patientBySex[sex].count }, true, reportColumns);\n        } else {\n          this._addReportRow({ sex: sex, total: patientBySex[sex].count }, true, reportColumns);\n        }\n        sexTotal += patientBySex[sex].count;\n      }\n      this._addReportRow({ patientId: 'Grand Total: ' + sexTotal }, true, reportColumns);\n      this._finishReport(reportColumns);\n    },\n\n    _generateDiagnosticReport: function _generateDiagnosticReport() {\n      this._findDiagnosticsByDate().then((function (diagnostics) {\n        var reportColumns = this.get('diagnosticReportColumns');\n        this._addRowsByType(diagnostics.imaging, 'imagingType.name', 'Total for imaging: ', reportColumns);\n        this._addRowsByType(diagnostics.labs, 'labType.name', 'Total for labs: ', reportColumns);\n        this._finishReport(reportColumns);\n      }).bind(this), (function (err) {\n        this._notifyReportError('Error in _generateDiagnosticReport: ' + err);\n      }).bind(this));\n    },\n\n    _generatePatientDaysReport: function _generatePatientDaysReport(visits, reportType) {\n      visits = visits.filter(this._filterInPatientVisit);\n      var detailed = reportType.indexOf('detailed') === 0;\n      var reportEndDate = this.get('endDate');\n      var reportColumns = undefined;\n      var reportStartDate = moment(this.get('startDate')).startOf('day');\n      if (detailed) {\n        reportColumns = this.get('admissionDetailReportColumns');\n        reportColumns.patientDays.include = true;\n        reportColumns.dischargeDate.include = true;\n      } else {\n        reportColumns = {\n          total: {\n            label: 'Total',\n            include: true,\n            property: 'total',\n            format: '_numberFormat'\n          }\n        };\n      }\n      if (_ember['default'].isEmpty(reportEndDate)) {\n        reportEndDate = moment().endOf('day');\n      } else {\n        reportEndDate = moment(reportEndDate).endOf('day');\n      }\n      var patientDays = visits.reduce((function (previousValue, visit) {\n        var calcEndDate = visit.get('endDate');\n        var calcStartDate = moment(visit.get('startDate')).startOf('day');\n        if (_ember['default'].isEmpty(calcEndDate)) {\n          calcEndDate = moment().endOf('day');\n        } else {\n          calcEndDate = moment(calcEndDate).endOf('day');\n        }\n        if (calcStartDate.isBefore(reportStartDate)) {\n          calcStartDate = reportStartDate;\n        }\n        if (calcEndDate.isAfter(reportEndDate)) {\n          calcEndDate = reportEndDate;\n        }\n        var daysDiff = calcEndDate.diff(calcStartDate, 'days', true);\n        if (detailed) {\n          this._addReportRow({\n            patient: visit.get('patient'),\n            patientId: visit.get('patient.displayPatientId'),\n            patientName: visit.get('patient.displayName'),\n            admissionDate: visit.get('startDate'),\n            dischargeDate: visit.get('endDate'),\n            patientDays: daysDiff\n          }, false, reportColumns);\n        }\n        return previousValue += daysDiff;\n      }).bind(this), 0);\n      if (detailed) {\n        this._addReportRow({ patientDays: 'Total: ' + this._numberFormat(patientDays) }, true, reportColumns);\n      } else {\n        this._addReportRow({ total: patientDays }, false, reportColumns);\n      }\n      this._finishReport(reportColumns);\n    },\n\n    _generateProcedureReport: function _generateProcedureReport(reportType) {\n      this._findProceduresByDate().then((function (procedures) {\n        var reportColumns = undefined;\n        procedures = procedures.filter(function (procedure) {\n          var visit = procedure.get('visit');\n          if (_ember['default'].isEmpty(visit) || _ember['default'].isEmpty(visit.get('patient.id')) || visit.get('patient.archived') === true) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        if (reportType.indexOf('detailed') === 0) {\n          reportColumns = this.get('procedureDetailReportColumns');\n          procedures.forEach(function (procedure) {\n            procedure.set('patient', procedure.get('visit.patient'));\n          });\n          var procedureTotals = this._totalByType(procedures, 'description', 'all procedures');\n          this._addPatientProcedureRows(procedureTotals, reportColumns);\n          this._finishReport(reportColumns);\n        } else {\n          reportColumns = this.get('diagnosticReportColumns');\n          this._addRowsByType(procedures, 'description', 'Total procedures: ', reportColumns);\n          this._finishReport(reportColumns);\n        }\n      }).bind(this), (function (err) {\n        this._notifyReportError('Error in _generateProcedureReport: ' + err);\n      }).bind(this));\n    },\n\n    _generateStatusReport: function _generateStatusReport() {\n      this._findPatientsByStatus().then((function (patients) {\n        var reportColumns = this.get('statusReportColumns');\n        var sortedPatients = patients.sortBy('lastName', 'firstName');\n        this._getPatientVisits(sortedPatients).then((function (resolvedPatients) {\n          resolvedPatients.forEach((function (patient) {\n            this._addReportRow({ patient: patient }, false, reportColumns);\n          }).bind(this));\n          this._finishReport(reportColumns);\n        }).bind(this))['catch']((function (err) {\n          this._notifyReportError('Error in _generateStatusReport: ' + err);\n        }).bind(this));\n      }).bind(this))['catch']((function (err) {\n        this._notifyReportError('Error in _generateStatusReport: ' + err);\n      }).bind(this));\n    },\n\n    _generateVisitReport: function _generateVisitReport(visits) {\n      var _this2 = this;\n\n      var reportColumns = this.get('reportColumns');\n      var visitFilters = this.getProperties('examiner', 'visitDate', 'visitType', 'location', 'clinic', 'primaryDiagnosis', 'secondaryDiagnosis');\n      for (var filter in visitFilters) {\n        if (!_ember['default'].isEmpty(visitFilters[filter])) {\n          switch (filter) {\n            case 'diagnosis':\n              {\n                visits = this._filterByLike(visits, 'diagnosisList', visitFilters[filter]);\n                break;\n              }\n            default:\n              {\n                visits = visits.filterBy(filter, visitFilters[filter]);\n                break;\n              }\n          }\n        }\n      }\n      if (reportColumns.procedures.include) {\n        (function () {\n          var promisesMap = {};\n          visits.forEach(function (visit) {\n            promisesMap[visit.get('id')] = visit.get('procedures');\n          });\n          _ember['default'].RSVP.hash(promisesMap).then((function (resolutionHash) {\n            visits.forEach(function (visit) {\n              visit.set('resolvedProcedures', resolutionHash[visit.get('id')]);\n            });\n            this._finishVisitReport(visits);\n          }).bind(_this2));\n        })();\n      } else {\n        this._finishVisitReport(visits);\n      }\n    },\n\n    _getPatientVisits: function _getPatientVisits(patients) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var visitHash = {};\n        patients.forEach((function (patient) {\n          visitHash[patient.get('id')] = this.getPatientVisits(patient);\n        }).bind(this));\n        _ember['default'].RSVP.hash(visitHash).then(function (resolvedHash) {\n          patients.forEach(function (patient) {\n            patient.set('visits', resolvedHash[patient.get('id')]);\n          });\n          resolve(patients);\n        }, reject);\n      }).bind(this));\n    },\n\n    _haveLikeValue: function _haveLikeValue(valueToCompare, likeCondition) {\n      return valueToCompare.toLowerCase().indexOf(likeCondition.toLowerCase()) > -1;\n    },\n\n    _listToString: function _listToString(items, descField, dateField) {\n      var itemList = [];\n      if (!_ember['default'].isEmpty(items)) {\n        itemList = items.map((function (item) {\n          return _ember['default'].get(item, descField) + ' ( ' + this._dateFormat(_ember['default'].get(item, dateField)) + ')';\n        }).bind(this));\n      }\n      return itemList.join(',\\n');\n    },\n\n    /**\n     * Given a list of records, total them by type and also add a grand total.\n     * @param records {Array} list of records to total.\n     * @param typeField {String} the field in the records containing the type.\n     * @param totalLabel {String} the label for the grand total.\n     * @param reportColumns\n     */\n    _totalByType: function _totalByType(records, typeField, totalLabel) {\n      var total = 0;\n      var types = [];\n      records.forEach(function (record) {\n        var type = record.get(typeField);\n        var typeObject = undefined;\n        if (!_ember['default'].isEmpty(type)) {\n          typeObject = types.find(function (item) {\n            var itemType = item.type;\n            return itemType.trim().toLowerCase() === type.toLowerCase();\n          });\n          if (_ember['default'].isEmpty(typeObject)) {\n            typeObject = {\n              type: type.trim(),\n              total: 0,\n              records: []\n            };\n            types.push(typeObject);\n          }\n          typeObject.total++;\n          typeObject.records.push(record);\n          total++;\n        }\n      });\n      types = types.sortBy('type');\n      types.push({ type: totalLabel, total: total });\n      return types;\n    },\n\n    _procedureListToString: function _procedureListToString(procedures) {\n      return this._listToString(procedures, 'description', 'procedureDate');\n    },\n\n    _validateDates: function _validateDates() {\n      var alertMessage = undefined;\n      var endDate = this.get('endDate');\n      var isValid = true;\n      var reportType = this.get('reportType');\n      var startDate = this.get('startDate');\n      if (reportType === 'status') {\n        return true;\n      }\n      if (_ember['default'].isEmpty(startDate)) {\n        alertMessage = 'Please enter a start date.';\n        isValid = false;\n      } else if (!_ember['default'].isEmpty(endDate) && endDate.getTime() < startDate.getTime()) {\n        alertMessage = 'Please enter an end date after the start date.';\n        isValid = false;\n      }\n      if (!isValid) {\n        this.displayAlert('Error Generating Report', alertMessage);\n      }\n      return isValid;\n    },\n\n    actions: {\n      generateReport: function generateReport() {\n        var _this3 = this;\n\n        if (this._validateDates()) {\n          (function () {\n            var reportRows = _this3.get('reportRows');\n            var reportType = _this3.get('reportType');\n            reportRows.clear();\n            _this3.showProgressModal();\n            switch (reportType) {\n              case 'diagnostic':\n                {\n                  _this3._generateDiagnosticReport();\n                  break;\n                }\n              case 'detailedProcedures':\n              case 'procedures':\n                {\n                  _this3._generateProcedureReport(reportType);\n                  break;\n                }\n              case 'admissions':\n              case 'discharges':\n              case 'detailedAdmissions':\n              case 'detailedDischarges':\n              case 'detailedPatientDays':\n              case 'patientDays':\n              case 'visit':\n                {\n                  _this3._findVisitsByDate().then((function (visits) {\n                    switch (reportType) {\n                      case 'admissions':\n                      case 'detailedAdmissions':\n                      case 'detailedDischarges':\n                      case 'discharges':\n                        {\n                          this._generateAdmissionOrDischargeReport(visits, reportType);\n                          break;\n                        }\n                      case 'detailedPatientDays':\n                      case 'patientDays':\n                        {\n                          this._generatePatientDaysReport(visits, reportType);\n                          break;\n                        }\n                      case 'visit':\n                        {\n                          this._generateVisitReport(visits);\n                          break;\n                        }\n                    }\n                  }).bind(_this3), (function (err) {\n                    this._notifyReportError('Error in _findVisitsByDate: ' + err);\n                  }).bind(_this3));\n                  break;\n                }\n              case 'status':\n                {\n                  _this3._generateStatusReport();\n                  break;\n                }\n            }\n          })();\n        }\n      },\n      viewPatient: function viewPatient(id) {\n        this.store.find('patient', id).then((function (item) {\n          item.set('returnTo', 'patients.reports');\n          this.transitionToRoute('patients.edit', item);\n        }).bind(this));\n      }\n\n    }\n  });\n});","define('hospitalrun/tests/patients/reports/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/reports/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/reports/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/reports/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend({\n    pageTitle: (0, _emberI18n.translationMacro)('patients.titles.patientReport'),\n\n    // No model for reports; data gets retrieved when report is run.\n    model: function model() {\n      return _ember['default'].RSVP.resolve(_ember['default'].Object.create({}));\n    }\n\n  });\n});","define('hospitalrun/tests/patients/reports/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/reports/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/reports/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/route', ['exports', 'hospitalrun/routes/abstract-module-route', 'ember', 'hospitalrun/mixins/patient-id', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractModuleRoute, _ember, _hospitalrunMixinsPatientId, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend(_hospitalrunMixinsPatientId['default'], {\n    addCapability: 'add_patient',\n    additionalModels: [{\n      name: 'addressOptions',\n      findArgs: ['option', 'address_options']\n    }, {\n      name: 'clinicList',\n      findArgs: ['lookup', 'clinic_list']\n    }, {\n      name: 'countryList',\n      findArgs: ['lookup', 'country_list']\n    }, {\n      name: 'customSocialForm',\n      findArgs: ['option', 'custom_form_social']\n    }, {\n      name: 'diagnosisList',\n      findArgs: ['lookup', 'diagnosis_list']\n    }, {\n      name: 'locationList',\n      findArgs: ['lookup', 'visit_location_list']\n    }, {\n      name: 'physicianList',\n      findArgs: ['lookup', 'physician_list']\n    }, {\n      name: 'pricingProfiles',\n      findArgs: ['price-profile']\n    }, {\n      name: 'sexList',\n      findArgs: ['lookup', 'sex']\n    }, {\n      name: 'statusList',\n      findArgs: ['lookup', 'patient_status_list']\n    }, {\n      name: 'visitTypesList',\n      findArgs: ['lookup', 'visit_types']\n    }],\n\n    actions: {\n      createNewVisit: function createNewVisit(patient, visits) {\n        var lastVisit = visits.get('lastObject');\n        var propertiesToSet = {};\n\n        if (!_ember['default'].isEmpty(lastVisit)) {\n          propertiesToSet = lastVisit.getProperties('primaryDiagnosis', 'primaryBillingDiagnosis');\n        }\n        propertiesToSet.patient = patient;\n\n        this.transitionTo('visits.edit', 'new').then((function (newRoute) {\n          newRoute.currentModel.setProperties(propertiesToSet);\n        }).bind(this));\n      }\n    },\n    newButtonText: (0, _emberI18n.translationMacro)('patients.buttons.newPatient'),\n    moduleName: 'patients'\n  });\n});","define('hospitalrun/tests/patients/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/search/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, _hospitalrunPatientsIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPatientsIndexController['default'].extend();\n});","define('hospitalrun/tests/patients/search/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/search/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/search/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'patients',\n    searchKeys: [{\n      name: 'friendlyId',\n      type: 'contains'\n    }, {\n      name: 'externalPatientId',\n      type: 'contains'\n    }, {\n      name: 'firstName',\n      type: 'fuzzy'\n    }, {\n      name: 'lastName',\n      type: 'fuzzy'\n    }, {\n      name: 'phone',\n      type: 'contains'\n    }],\n    searchModel: 'patient'\n  });\n});","define('hospitalrun/tests/patients/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/socialwork/expense/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/utils/select-values', 'ember-i18n'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunUtilsSelectValues, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    patientsController: _ember['default'].inject.controller('patients'),\n\n    categoryTypes: ['Clothing', 'Education', 'Electricity', 'Food', 'Fuel', 'Other', 'Rent', 'Transportation', 'Water'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap),\n\n    editController: _ember['default'].computed.alias('patientsController'),\n    showUpdateButton: true,\n    title: (0, _emberI18n.translationMacro)('patients.titles.socialWork'),\n    updateButtonAction: 'update',\n\n    updateButtonText: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('buttons.add');\n      } else {\n        return this.get('i18n').t('buttons.update');\n      }\n    }).property('model.isNew'),\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      update: function update() {\n        var model = this.get('model');\n        this.get('editController').send('updateExpense', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/socialwork/expense/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/socialwork/expense/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/socialwork/expense/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/patients/socialwork/family-info/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'ember-i18n'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    patientsController: _ember['default'].inject.controller('patients'),\n\n    editController: _ember['default'].computed.alias('patientsController'),\n    showUpdateButton: true,\n    title: (0, _emberI18n.translationMacro)('patients.titles.familyInfo'),\n    updateButtonAction: 'update',\n\n    updateButtonText: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('buttons.add');\n      } else {\n        return this.get('i18n').t('buttons.update');\n      }\n    }).property('model.isNew'),\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      update: function update() {\n        var model = this.get('model');\n        this.get('editController').send('updateFamilyInfo', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/patients/socialwork/family-info/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - patients/socialwork/family-info/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'patients/socialwork/family-info/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: 'Delete Pricing Item'\n  });\n});","define('hospitalrun/tests/pricing/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/lab-pricing-types', 'hospitalrun/mixins/imaging-pricing-types', 'hospitalrun/mixins/return-to', 'hospitalrun/utils/select-values'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsLabPricingTypes, _hospitalrunMixinsImagingPricingTypes, _hospitalrunMixinsReturnTo, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsLabPricingTypes['default'], _hospitalrunMixinsImagingPricingTypes['default'], _hospitalrunMixinsReturnTo['default'], {\n    pricingController: _ember['default'].inject.controller('pricing'),\n\n    actions: {\n      addOverride: function addOverride(override) {\n        var pricingOverrides = this.get('model.pricingOverrides');\n        pricingOverrides.addObject(override);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n      deleteOverride: function deleteOverride(model) {\n        var overrideToDelete = model.overrideToDelete;\n        var pricingOverrides = this.get('model.pricingOverrides');\n        pricingOverrides.removeObject(overrideToDelete);\n        overrideToDelete.destroyRecord().then((function () {\n          this.send('update', true);\n          this.send('closeModal');\n        }).bind(this));\n      },\n      editOverride: function editOverride(overrideToEdit) {\n        if (_ember['default'].isEmpty(overrideToEdit)) {\n          overrideToEdit = this.store.createRecord('override-price');\n        }\n        this.send('openModal', 'pricing.override', overrideToEdit);\n      },\n      showDeleteOverride: function showDeleteOverride(overrideToDelete) {\n        var message = 'Are you sure you want to delete this override?';\n        var model = _ember['default'].Object.create({\n          overrideToDelete: overrideToDelete\n        });\n        var title = 'Delete Override';\n        this.displayConfirm(title, message, 'deleteOverride', model);\n      }\n    },\n\n    categories: ['Imaging', 'Lab', 'Procedure', 'Ward'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap),\n    expenseAccountList: _ember['default'].computed.alias('pricingController.expenseAccountList'),\n    imagingPricingTypes: _ember['default'].computed.alias('pricingController.imagingPricingTypes'),\n    labPricingTypes: _ember['default'].computed.alias('pricingController.labPricingTypes'),\n    procedurePricingTypes: _ember['default'].computed.alias('pricingController.procedurePricingTypes'),\n    wardPricingTypes: _ember['default'].computed.alias('pricingController.wardPricingTypes'),\n\n    lookupListsToUpdate: (function () {\n      var category = this.get('model.category').toLowerCase();\n      var listsToUpdate = [{\n        name: 'expenseAccountList',\n        property: 'model.expenseAccount',\n        id: 'expense_account_list'\n      }];\n      listsToUpdate.push({\n        name: category + 'PricingTypes',\n        property: 'model.pricingType',\n        id: category + '_pricing_types'\n      });\n      return listsToUpdate;\n    }).property('model.category'),\n\n    pricingTypes: (function () {\n      var category = this.get('model.category');\n      if (!_ember['default'].isEmpty(category)) {\n        var typesList = this.get(category.toLowerCase() + 'PricingTypes');\n        if (_ember['default'].isEmpty(typesList) || _ember['default'].isEmpty(typesList.get('value'))) {\n          if (category === 'Lab') {\n            return _ember['default'].Object.create({ value: this.defaultLabPricingTypes });\n          } else if (category === 'Imaging') {\n            return _ember['default'].Object.create({ value: this.defaultImagingPricingTypes });\n          }\n        }\n        return typesList;\n      }\n    }).property('model.category'),\n\n    updateCapability: 'add_pricing',\n\n    afterUpdate: function afterUpdate(record) {\n      var message = 'The pricing record for ' + record.get('name') + ' has been saved.';\n      this.displayAlert('Pricing Item Saved', message);\n    }\n  });\n});","define('hospitalrun/tests/pricing/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    editTitle: 'Edit Pricing Item',\n    modelName: 'pricing',\n    newTitle: 'New Pricing Item',\n\n    actions: {\n      deleteOverride: function deleteOverride(overrideToDelete) {\n        this.controller.send('deleteOverride', overrideToDelete);\n      }\n    },\n\n    getNewData: function getNewData(params) {\n      var newCategory = params.pricing_id.substr(3);\n      if (_ember['default'].isEmpty(newCategory)) {\n        newCategory = 'Imaging';\n      }\n      return _ember['default'].RSVP.resolve({\n        category: newCategory\n      });\n    },\n\n    model: function model(params) {\n      var idParam = this.get('idParam');\n      if (!_ember['default'].isEmpty(idParam) && params[idParam].indexOf('new') === 0) {\n        return this._createNewRecord(params);\n      } else {\n        return this._super(params);\n      }\n    }\n\n  });\n});","define('hospitalrun/tests/pricing/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/imaging/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/imaging/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/imaging/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/imaging/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/imaging/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({\n    category: 'Imaging',\n    pageTitle: 'Imaging Pricing',\n\n    actions: {\n      editItem: function editItem(item) {\n        item.set('returnTo', 'pricing.imaging');\n        this.transitionTo('pricing.edit', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/imaging/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/imaging/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/imaging/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    addPermission: 'add_pricing',\n    deletePermission: 'delete_pricing',\n    showCategory: true,\n    startKey: []\n  });\n});","define('hospitalrun/tests/pricing/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    category: null,\n    modelName: 'pricing',\n    pageTitle: 'All Pricing Items',\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      var category = item.get('category');\n      var id = this._getPouchIdFromItem(item);\n      var name = item.get('name');\n      var pricingType = item.get('pricingType');\n      return [category, name, pricingType, id];\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      var category = this.get('category');\n      var maxId = this._getMaxPouchId();\n      var queryParams = {\n        mapReduce: 'pricing_by_category'\n      };\n      if (!_ember['default'].isEmpty(category)) {\n        queryParams.options = {\n          startkey: [category, null, null, null],\n          endkey: [category, {}, {}, maxId]\n        };\n      }\n      return queryParams;\n    },\n\n    actions: {\n      newItem: function newItem() {\n        if (this.currentUserCan('add_pricing')) {\n          var routeId = 'new';\n          var routeParts = this.routeName.split('.');\n          if (routeParts.length === 2 && routeParts[1] !== 'index') {\n            routeId += routeParts[1].capitalize();\n          }\n          this.transitionTo('pricing.edit', routeId);\n        }\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/lab/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/lab/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/lab/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/lab/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/lab/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({\n    category: 'Lab',\n    pageTitle: 'Lab Pricing',\n\n    actions: {\n      editItem: function editItem(item) {\n        item.set('returnTo', 'pricing.lab');\n        this.transitionTo('pricing.edit', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/lab/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/lab/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/lab/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/override/controller', ['exports', 'ember', 'hospitalrun/mixins/is-update-disabled', 'hospitalrun/utils/select-values'], function (exports, _ember, _hospitalrunMixinsIsUpdateDisabled, _hospitalrunUtilsSelectValues) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend(_hospitalrunMixinsIsUpdateDisabled['default'], {\n    pricingController: _ember['default'].inject.controller('pricing'),\n\n    actions: {\n      cancel: function cancel() {\n        this.get('model').rollbackAttributes();\n        this.send('closeModal');\n      },\n\n      update: function update() {\n        var isNew = this.get('model.isNew');\n        var override = this.get('model');\n        override.save().then((function () {\n          if (isNew) {\n            this.get('editController').send('addOverride', override);\n          } else {\n            this.send('closeModal');\n          }\n        }).bind(this));\n      }\n    },\n\n    editController: _ember['default'].inject.controller('pricing/edit'),\n    pricingProfiles: _ember['default'].computed.map('pricingController.pricingProfiles', _hospitalrunUtilsSelectValues['default'].selectObjectMap),\n    showUpdateButton: true,\n\n    title: (function () {\n      if (this.get('model.isNew')) {\n        return 'Add Override';\n      } else {\n        return 'Edit Override';\n      }\n    }).property('model.isNew'),\n\n    updateButtonAction: 'update',\n    updateButtonText: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return 'Add';\n      } else {\n        return 'Update';\n      }\n    }).property('model.isNew')\n\n  });\n});","define('hospitalrun/tests/pricing/override/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/override/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/override/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/procedure/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/procedure/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/procedure/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/procedure/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/procedure/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({\n    category: 'Procedure',\n    pageTitle: 'Procedure Pricing',\n\n    actions: {\n      editItem: function editItem(item) {\n        item.set('returnTo', 'pricing.procedure');\n        this.transitionTo('pricing.edit', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/procedure/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/procedure/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/procedure/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/profiles/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller'], function (exports, _hospitalrunControllersAbstractPagedController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend({\n    addPermission: 'add_pricing_profile',\n    deletePermission: 'delete_pricing_profile'\n  });\n});","define('hospitalrun/tests/pricing/profiles/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/profiles/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/profiles/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/profiles/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      }\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      var message = 'The pricing profile ' + record.get('name') + ' has been saved.';\n      this.displayAlert('Pricing Profile Saved', message, 'refreshProfiles');\n    },\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return 'New Pricing Profile';\n      } else {\n        return 'Edit Pricing Profile';\n      }\n    }).property('model.isNew')\n  });\n});","define('hospitalrun/tests/pricing/profiles/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/profiles/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/profiles/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/profiles/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'ember', 'hospitalrun/mixins/modal-helper'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _ember, _hospitalrunMixinsModalHelper) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsModalHelper['default'], {\n    category: null,\n    modelName: 'price-profile',\n    pageTitle: 'Pricing Profiles',\n\n    actions: {\n      editItem: function editItem(item) {\n        this.send('openModal', 'pricing.profiles.edit', item);\n      },\n\n      deleteItem: function deleteItem(item) {\n        var message = 'Are you sure you want to delete this profile?';\n        var model = _ember['default'].Object.create({\n          itemToDelete: item\n        });\n        var title = 'Delete Profile';\n        this.displayConfirm(title, message, 'deletePricingProfile', model);\n      },\n\n      deletePricingProfile: function deletePricingProfile(model) {\n        model.itemToDelete.set('archived', true);\n        model.itemToDelete.save().then(function () {\n          model.itemToDelete.unloadRecord();\n        });\n      },\n\n      newItem: function newItem() {\n        var newItem = this.store.createRecord('price-profile');\n        this.send('openModal', 'pricing.profiles.edit', newItem);\n      },\n\n      refreshProfiles: function refreshProfiles() {\n        this.refresh();\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/profiles/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/profiles/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/profiles/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_pricing',\n    additionalModels: [{\n      name: 'expenseAccountList',\n      findArgs: ['lookup', 'expense_account_list']\n    }, {\n      name: 'imagingPricingTypes',\n      findArgs: ['lookup', 'imaging_pricing_types']\n    }, {\n      name: 'labPricingTypes',\n      findArgs: ['lookup', 'lab_pricing_types']\n    }, {\n      name: 'procedurePricingTypes',\n      findArgs: ['lookup', 'procedure_pricing_types']\n    }, {\n      name: 'pricingProfiles',\n      findArgs: ['price-profile']\n    }, {\n      name: 'wardPricingTypes',\n      findArgs: ['lookup', 'ward_pricing_types']\n    }],\n    allowSearch: true,\n    moduleName: 'pricing',\n    newButtonText: '+ new item',\n    sectionTitle: 'Pricing',\n    subActions: [{\n      text: 'All Pricing Items',\n      linkTo: 'pricing.index'\n    }, {\n      text: 'Imaging Pricing',\n      linkTo: 'pricing.imaging'\n    }, {\n      text: 'Lab Pricing',\n      linkTo: 'pricing.lab'\n    }, {\n      text: 'Procedure Pricing',\n      linkTo: 'pricing.procedure'\n    }, {\n      text: 'Ward Pricing',\n      linkTo: 'pricing.ward'\n    }, {\n      text: 'Pricing Profiles',\n      linkTo: 'pricing.profiles'\n    }]\n  });\n});","define('hospitalrun/tests/pricing/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/search/controller', ['exports', 'hospitalrun/patients/index/controller'], function (exports, _hospitalrunPatientsIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPatientsIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/search/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/search/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/search/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/search/route', ['exports', 'hospitalrun/routes/abstract-search-route'], function (exports, _hospitalrunRoutesAbstractSearchRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractSearchRoute['default'].extend({\n    moduleName: 'pricing',\n    searchKeys: [{\n      'name': 'fuzzy'\n    }],\n    searchModel: 'pricing'\n  });\n});","define('hospitalrun/tests/pricing/search/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/search/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/search/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/ward/controller', ['exports', 'hospitalrun/pricing/index/controller'], function (exports, _hospitalrunPricingIndexController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexController['default'].extend();\n});","define('hospitalrun/tests/pricing/ward/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/ward/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/ward/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/pricing/ward/route', ['exports', 'hospitalrun/pricing/index/route'], function (exports, _hospitalrunPricingIndexRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunPricingIndexRoute['default'].extend({\n    category: 'Ward',\n    pageTitle: 'Ward Pricing',\n\n    actions: {\n      editItem: function editItem(item) {\n        item.set('returnTo', 'pricing.ward');\n        this.transitionTo('pricing.edit', item);\n      }\n    }\n  });\n});","define('hospitalrun/tests/pricing/ward/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pricing/ward/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pricing/ward/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/print/invoice/controller', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Controller.extend({\n    actions: {\n      returnToInvoice: function returnToInvoice() {\n        this.transitionTo('invoices.edit', this.get('model'));\n      }\n    }\n  });\n});","define('hospitalrun/tests/print/invoice/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - print/invoice/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'print/invoice/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/procedures/charge/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    cancelAction: 'closeModal',\n    newCharge: false,\n    newPricingItem: false,\n    requestingController: _ember['default'].inject.controller('procedures/edit'),\n    database: _ember['default'].inject.service(),\n    pricingList: _ember['default'].computed.alias('requestingController.pricingList'),\n    selectedItem: null,\n    updateCapability: 'add_charge',\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('procedures.titles.addChargeItem');\n      }\n      return this.get('i18n').t('procedures.titles.editChargeItem');\n    }).property('model.isNew'),\n\n    beforeUpdate: function beforeUpdate() {\n      var _this = this;\n\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        this.set('newCharge', true);\n      }\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var model = _this.get('model');\n        var pricingItem = model.get('pricingItem');\n        var selectedItem = _this.get('selectedItem');\n        if (!_ember['default'].isEmpty(selectedItem) && (_ember['default'].isEmpty(pricingItem) || selectedItem.id !== pricingItem.get('id'))) {\n          _this.store.find('pricing', selectedItem.id).then(function (item) {\n            model.set('pricingItem', item);\n            resolve();\n          });\n        } else {\n          (function () {\n            var newItem = false;\n            var saveItem = false;\n            if (_ember['default'].isEmpty(pricingItem)) {\n              pricingItem = _this.store.createRecord('pricing', {\n                name: model.get('itemName'),\n                category: model.get('pricingCategory')\n              });\n              newItem = true;\n              saveItem = true;\n            } else {\n              if (pricingItem.get('name') !== model.get('itemName')) {\n                pricingItem.set('name', model.get('itemName'));\n                saveItem = true;\n              }\n            }\n            if (saveItem) {\n              pricingItem.save().then(function () {\n                var pricingList = _this.get('pricingList');\n                if (newItem) {\n                  pricingList.addObject({\n                    id: pricingItem.get('id'),\n                    name: pricingItem.get('name')\n                  });\n                  model.set('pricingItem', pricingItem);\n                } else {\n                  var itemToUpdate = pricingList.findBy('id', pricingItem.get('id'));\n                  itemToUpdate.name = pricingItem.get('name');\n                }\n                resolve();\n              }, reject);\n            } else {\n              resolve();\n            }\n          })();\n        }\n      });\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      if (this.get('newCharge')) {\n        this.get('requestingController').send('addCharge', record);\n      } else {\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/procedures/charge/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - procedures/charge/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'procedures/charge/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/procedures/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-submodule'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientSubmodule) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], {\n    visitsController: _ember['default'].inject.controller('visits'),\n\n    chargePricingCategory: 'Procedure',\n    chargeRoute: 'procedures.charge',\n\n    anesthesiaTypes: _ember['default'].computed.alias('visitsController.anesthesiaTypes'),\n    anesthesiologistList: _ember['default'].computed.alias('visitsController.anesthesiologistList'),\n    cptCodeList: _ember['default'].computed.alias('visitsController.cptCodeList'),\n    medicationList: null,\n    physicianList: _ember['default'].computed.alias('visitsController.physicianList'),\n    procedureList: _ember['default'].computed.alias('visitsController.procedureList'),\n    procedureLocations: _ember['default'].computed.alias('visitsController.procedureLocations'),\n    lookupListsToUpdate: [{\n      name: 'anesthesiaTypes',\n      property: 'model.anesthesiaType',\n      id: 'anesthesia_types'\n    }, {\n      name: 'anesthesiologistList',\n      property: 'model.anesthesiologist',\n      id: 'anesthesiologists'\n    }, {\n      name: 'cptCodeList',\n      property: 'model.cptCode',\n      id: 'cpt_code_list'\n    }, {\n      name: 'physicianList',\n      property: 'model.assistant',\n      id: 'physician_list'\n    }, {\n      name: 'physicianList',\n      property: 'model.physician',\n      id: 'physician_list'\n    }, {\n      name: 'procedureList',\n      property: 'model.description',\n      id: 'procedure_list'\n    }, {\n      name: 'procedureLocations',\n      property: 'model.location',\n      id: 'procedure_locations'\n    }],\n\n    editController: _ember['default'].inject.controller('visits/edit'),\n    pricingList: null, // This gets filled in by the route\n    pricingTypes: _ember['default'].computed.alias('visitsController.procedurePricingTypes'),\n    newProcedure: false,\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('procedures.titles.add');\n      }\n      return this.get('i18n').t('procedures.titles.edit');\n    }).property('model.isNew'),\n\n    updateCapability: 'add_procedure',\n\n    actions: {\n      showAddMedication: function showAddMedication() {\n        var newCharge = this.get('store').createRecord('proc-charge', {\n          dateCharged: new Date(),\n          newMedicationCharge: true,\n          quantity: 1\n        });\n        this.send('openModal', 'procedures.medication', newCharge);\n      },\n\n      showEditMedication: function showEditMedication(charge) {\n        var medicationList = this.get('medicationList');\n        var selectedMedication = medicationList.findBy('id', charge.get('medication.id'));\n        charge.set('itemName', selectedMedication.name);\n        this.send('openModal', 'procedures.medication', charge);\n      },\n\n      showDeleteMedication: function showDeleteMedication(charge) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deleteCharge',\n          title: this.get('i18n').t('procedures.titles.deleteMedicationUsed'),\n          message: this.get('i18n').t('procedures.messages.deleteMedication'),\n          chargeToDelete: charge,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this.updateCharges().then((function () {\n          if (this.get('model.isNew')) {\n            this.addChildToVisit(this.get('model'), 'procedures').then(resolve, reject);\n          } else {\n            resolve();\n          }\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    afterUpdate: function afterUpdate() {\n      var alertTitle = this.get('i18n').t('procedures.titles.saved');\n      var alertMessage = this.get('i18n').t('procedures.messages.saved');\n      this.saveVisitIfNeeded(alertTitle, alertMessage);\n    }\n  });\n});","define('hospitalrun/tests/procedures/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - procedures/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'procedures/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/procedures/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsChargeRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsChargeRoute['default'], {\n    editTitle: (0, _emberI18n.translationMacro)('procedures.titles.edit'),\n    modelName: 'procedure',\n    newTitle: (0, _emberI18n.translationMacro)('procedures.titles.new'),\n    pricingCategory: 'Procedure',\n    database: _ember['default'].inject.service(),\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        procedureDate: new Date()\n      });\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      var medicationQuery = {\n        key: 'Medication',\n        include_docs: true\n      };\n      this.get('database').queryMainDB(medicationQuery, 'inventory_by_type').then(function (result) {\n        var medicationList = result.rows.map(function (medication) {\n          return medication.doc;\n        });\n        controller.set('medicationList', medicationList);\n      });\n    }\n  });\n});","define('hospitalrun/tests/procedures/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - procedures/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'procedures/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/procedures/medication/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/inventory-selection', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsInventorySelection, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsInventorySelection['default'], {\n    cancelAction: 'closeModal',\n    newCharge: false,\n    requestingController: _ember['default'].inject.controller('procedures/edit'),\n    medicationList: _ember['default'].computed.alias('requestingController.medicationList'),\n\n    updateCapability: 'add_charge',\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return this.get('i18n').t('procedures.titles.addMedicationUsed');\n      }\n      return this.get('i18n').t('procedures.titles.editMedicationUsed');\n    }).property('model.isNew'),\n\n    beforeUpdate: function beforeUpdate() {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        this.set('newCharge', true);\n        var model = this.get('model');\n        var inventoryItem = model.get('inventoryItem');\n        model.set('medication', inventoryItem);\n        model.set('medicationTitle', inventoryItem.get('name'));\n        model.set('priceOfMedication', inventoryItem.get('price'));\n      }\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    afterUpdate: function afterUpdate(record) {\n      if (this.get('newCharge')) {\n        this.get('requestingController').send('addCharge', record);\n      } else {\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/procedures/medication/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - procedures/medication/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'procedures/medication/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {\n  'use strict';\n\n  exports['default'] = _emberResolver['default'];\n});","define('hospitalrun/tests/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/router', ['exports', 'ember', 'hospitalrun/tests/config/environment'], function (exports, _ember, _hospitalrunTestsConfigEnvironment) {\n  'use strict';\n\n  var Router = _ember['default'].Router.extend({\n    location: _hospitalrunTestsConfigEnvironment['default'].locationType,\n    rootURL: _hospitalrunTestsConfigEnvironment['default'].rootURL\n  });\n\n  Router.map(function () {\n    this.route('admin', {\n      resetNamespace: true\n    }, function () {\n      this.route('address');\n      this.route('loaddb');\n      this.route('lookup', { path: '/' });\n      this.route('users', {\n        resetNamespace: true\n      }, function () {\n        this.route('edit', { path: '/edit/:user_id' });\n      });\n      this.route('roles');\n      this.route('query');\n      this.route('workflow');\n    });\n\n    this.route('appointments', {\n      resetNamespace: true\n    }, function () {\n      this.route('edit', { path: '/edit/:appointment_id' });\n      this.route('search');\n      this.route('today');\n      this.route('missed');\n    });\n\n    this.route('finishgauth', { path: '/finishgauth/:s1/:s2/:k/:t/:i/:p' });\n\n    this.route('index', { path: '/' });\n\n    this.route('imaging', {\n      resetNamespace: true\n    }, function () {\n      this.route('completed');\n      this.route('edit', { path: '/edit/:imaging_id' });\n    });\n\n    this.route('inventory', {\n      resetNamespace: true\n    }, function () {\n      this.route('barcode', { path: '/barcode/:inventory_id' });\n      this.route('edit', { path: '/edit/:inventory_id' });\n      this.route('batch', { path: '/batch/:inventory-batch_id' });\n      this.route('listing');\n      this.route('reports');\n      this.route('request', { path: '/request/:inv-request_id' });\n      this.route('search', { path: '/search/:search_text' });\n    });\n\n    this.route('invoices', {\n      resetNamespace: true\n    }, function () {\n      this.route('edit', { path: '/edit/:invoice_id' });\n      this.route('search', { path: '/search/:search_text' });\n    });\n\n    this.route('labs', {\n      resetNamespace: true\n    }, function () {\n      this.route('completed');\n      this.route('edit', { path: '/edit/:lab_id' });\n    });\n\n    this.route('login');\n\n    this.route('medication', {\n      resetNamespace: true\n    }, function () {\n      this.route('completed');\n      this.route('edit', { path: '/edit/:medication_id' });\n      this.route('return', { path: '/return/:inv-request_id' });\n      this.route('search', { path: '/search/:search_text' });\n    });\n\n    this.route('patients', {\n      resetNamespace: true\n    }, function () {\n      this.route('edit', { path: '/edit/:patient_id' });\n      this.route('reports');\n      this.route('admitted');\n      this.route('search', { path: '/search/:search_text' });\n    });\n\n    this.route('pricing', {\n      resetNamespace: true\n    }, function () {\n      this.route('imaging');\n      this.route('lab');\n      this.route('procedure');\n      this.route('ward');\n      this.route('edit', { path: '/edit/:pricing_id' });\n      this.route('search', { path: '/search/:search_text' });\n      this.route('profiles');\n    });\n\n    this.route('print', {\n      resetNamespace: true\n    }, function () {\n      this.route('invoice', { path: '/invoice/:invoice_id' });\n    });\n\n    this.route('visits', {\n      resetNamespace: true\n    }, function () {\n      this.route('edit', { path: '/edit/:visit_id' });\n      this.route('procedures', {\n        resetNamespace: true\n      }, function () {\n        this.route('edit', { path: '/edit/:procedure_id' });\n      });\n    });\n  });\n\n  exports['default'] = Router;\n});","define('hospitalrun/tests/router.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - router.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/abstract-edit-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    editTitle: null,\n    hideNewButton: false,\n    modelName: null,\n    newTitle: null,\n\n    _createNewRecord: function _createNewRecord(params) {\n      return new _ember['default'].RSVP.Promise((function (resolve) {\n        this.generateId().then((function (newId) {\n          this.getNewData(params).then((function (data) {\n            var modelName = this.get('modelName');\n            if (newId) {\n              data.id = newId;\n            }\n            if (newId && this.store.hasRecordForId(modelName, newId)) {\n              resolve(this.store.push(this.store.normalize(modelName, data)));\n            } else {\n              resolve(this.store.createRecord(modelName, data));\n            }\n          }).bind(this));\n        }).bind(this));\n      }).bind(this));\n    },\n\n    idParam: (function () {\n      var modelName = this.get('modelName');\n      return modelName + '_id';\n    }).property('modelName'),\n\n    /**\n     * Override this function to generate an id for a new record\n     * @return a promise that will resolved to a generated id;default is null which means that an\n     * id will be automatically generated via Ember data.\n     */\n    generateId: function generateId() {\n      return _ember['default'].RSVP.resolve(null);\n    },\n\n    /**\n     * Override this function to define what data a new model should be instantiated with.\n     * @return a promise that will resolve with the data for a new record; defaults to empty object.\n     */\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({});\n    },\n\n    model: function model(params) {\n      var idParam = this.get('idParam');\n      if (!_ember['default'].isEmpty(idParam) && params[idParam] === 'new') {\n        return this._createNewRecord(params);\n      } else {\n        return this._super(params);\n      }\n    },\n\n    setupController: function setupController(controller, model) {\n      var sectionDetails = {};\n      if (model.get('isNew')) {\n        sectionDetails.currentScreenTitle = this.get('newTitle');\n      } else {\n        sectionDetails.currentScreenTitle = this.get('editTitle');\n      }\n      if (this.get('hideNewButton')) {\n        sectionDetails.newButtonAction = null;\n      }\n      this.send('setSectionHeader', sectionDetails);\n      this._super(controller, model);\n    }\n  });\n});","define('hospitalrun/tests/routes/abstract-edit-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/abstract-edit-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/abstract-edit-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/abstract-index-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember', 'hospitalrun/mixins/pouchdb', 'hospitalrun/mixins/progress-dialog'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember, _hospitalrunMixinsPouchdb, _hospitalrunMixinsProgressDialog) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsPouchdb['default'], _hospitalrunMixinsProgressDialog['default'], _emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    database: _ember['default'].inject.service(),\n    filterParams: null,\n    firstKey: null,\n    hideNewButton: false,\n    itemsPerPage: 25,\n    modelName: null,\n    newButtonAction: null,\n    newButtonText: null,\n    nextStartKey: null,\n    pageTitle: null,\n\n    _getFilterParams: function _getFilterParams(params) {\n      var filterByList = [];\n      var filterParams = this.get('filterParams');\n      if (!_ember['default'].isEmpty(filterParams)) {\n        filterParams.forEach(function (paramName) {\n          if (!_ember['default'].isEmpty(params[paramName])) {\n            filterByList.push({\n              name: paramName,\n              value: params[paramName]\n            });\n          }\n        });\n      }\n      return filterByList;\n    },\n\n    _getMaxPouchId: function _getMaxPouchId() {\n      return this.get('database').getPouchId({}, this.get('modelName').camelize());\n    },\n\n    _getMinPouchId: function _getMinPouchId() {\n      return this.get('database').getPouchId(null, this.get('modelName').camelize());\n    },\n\n    _getPouchIdFromItem: function _getPouchIdFromItem(item) {\n      return this.get('database').getPouchId(item.get('id'), this.get('modelName').camelize());\n    },\n\n    _getStartKeyFromItem: function _getStartKeyFromItem(item) {\n      return item.get('id');\n    },\n\n    _modelQueryParams: function _modelQueryParams() {\n      return {};\n    },\n\n    model: function model(params) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var filterParams = this._getFilterParams(params);\n        var modelName = this.get('modelName');\n        var itemsPerPage = this.get('itemsPerPage');\n        var queryParams = this._modelQueryParams(params);\n        if (!_ember['default'].isEmpty(params.sortKey)) {\n          queryParams.sortKey = params.sortKey;\n          if (!_ember['default'].isEmpty(params.sortDesc)) {\n            queryParams.sortDesc = params.sortDesc;\n          }\n        }\n        if (!_ember['default'].isEmpty(filterParams)) {\n          queryParams.filterBy = filterParams;\n        }\n        if (_ember['default'].isEmpty(queryParams.options)) {\n          queryParams.options = {};\n        }\n        queryParams.options.limit = itemsPerPage + 1;\n        if (!_ember['default'].isEmpty(params.startKey)) {\n          queryParams.options.startkey = params.startKey;\n        }\n        this.store.query(modelName, queryParams).then((function (model) {\n          if (model.get('length') > 0) {\n            this.set('firstKey', this._getStartKeyFromItem(model.get('firstObject')));\n          }\n          if (model.get('length') > itemsPerPage) {\n            var lastItem = model.popObject();\n            this.set('nextStartKey', this._getStartKeyFromItem(lastItem));\n          } else {\n            this.set('nextStartKey');\n          }\n          resolve(model);\n        }).bind(this), reject);\n      }).bind(this));\n    },\n\n    queryParams: {\n      sortDesc: { refreshModel: true },\n      sortKey: { refreshModel: true },\n      startKey: { refreshModel: true }\n    },\n\n    setupController: function setupController(controller, model) {\n      var props = this.getProperties('firstKey', 'nextStartKey');\n      controller.setProperties(props);\n      var sectionDetails = {\n        currentScreenTitle: this.get('pageTitle')\n      };\n      if (this.get('hideNewButton')) {\n        sectionDetails.newButtonAction = null;\n      } else if (!_ember['default'].isEmpty(this.get('newButtonAction'))) {\n        sectionDetails.newButtonAction = this.get('newButtonAction');\n      }\n      if (!_ember['default'].isEmpty(this.get('newButtonText'))) {\n        sectionDetails.newButtonText = this.get('newButtonText');\n      }\n      this.send('setSectionHeader', sectionDetails);\n      this.closeProgressModal();\n      this._super(controller, model);\n    }\n  });\n});","define('hospitalrun/tests/routes/abstract-index-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/abstract-index-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/abstract-index-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/abstract-module-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember', 'hospitalrun/mixins/user-session'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  /**\n   * Abstract route for top level modules (eg patients, inventory, users)\n   */\n  exports['default'] = _ember['default'].Route.extend(_hospitalrunMixinsUserSession['default'], _emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    addCapability: null,\n    additionalModels: null,\n    allowSearch: true,\n    currentScreenTitle: null,\n    moduleName: null,\n    newButtonText: null,\n    sectionTitle: null,\n    subActions: null,\n\n    editPath: (function () {\n      var module = this.get('moduleName');\n      return module + '.edit';\n    }).property('moduleName'),\n\n    deletePath: (function () {\n      var module = this.get('moduleName');\n      return module + '.delete';\n    }).property('moduleName'),\n\n    newButtonAction: (function () {\n      if (this.currentUserCan(this.get('addCapability'))) {\n        return 'newItem';\n      } else {\n        return null;\n      }\n    }).property(),\n\n    searchRoute: (function () {\n      var module = this.get('moduleName');\n      return '/' + module + '/search';\n    }).property('moduleName'),\n\n    actions: {\n      allItems: function allItems() {\n        this.transitionTo(this.get('moduleName') + '.index');\n      },\n      deleteItem: function deleteItem(item) {\n        var deletePath = this.get('deletePath');\n        this.send('openModal', deletePath, item);\n      },\n      editItem: function editItem(item) {\n        this.transitionTo(this.get('editPath'), item);\n      },\n      newItem: function newItem() {\n        if (this.currentUserCan(this.get('addCapability'))) {\n          this.transitionTo(this.get('editPath'), 'new');\n        }\n      },\n\n      /**\n       * Action to set items in the section header.\n       * @param details an object containing details to set on the section header.\n       * The following parameters are supported:\n       * - currentScreenTitle - The current screen title.\n       * - newButtonText - The text to display for the \"new\" button.\n       * - newButtonAction - The action to fire for the \"new\" button.\n       */\n      setSectionHeader: function setSectionHeader(details) {\n        var currentController = this.controllerFor(this.get('moduleName'));\n        currentController.setProperties(details);\n      }\n\n    },\n\n    /**\n     * Make sure the user has permissions to the module; if not reroute to index.\n     */\n    beforeModel: function beforeModel(transition) {\n      var moduleName = this.get('moduleName');\n      if (this.currentUserCan(moduleName)) {\n        return this._super(transition);\n      } else {\n        this.transitionTo('index');\n        return _ember['default'].RSVP.reject('Not available');\n      }\n    },\n\n    /**\n     * Override this function to generate an id for a new record\n     * @return a promise that will resolved to a generated id;default is null which means that an\n     * id will be automatically generated via Ember data.\n     */\n    generateId: function generateId() {\n      return _ember['default'].RSVP.resolve(null);\n    },\n\n    model: function model() {\n      if (!_ember['default'].isEmpty(this.additionalModels)) {\n        return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n          var promises = this.additionalModels.map((function (modelMap) {\n            if (modelMap.findArgs.length === 1) {\n              return this.store.findAll.apply(this.store, modelMap.findArgs);\n            } else {\n              return this.store.find.apply(this.store, modelMap.findArgs);\n            }\n          }).bind(this));\n          _ember['default'].RSVP.allSettled(promises, 'All additional Models for ' + this.get('moduleName')).then((function (array) {\n            array.forEach((function (item, index) {\n              if (item.state === 'fulfilled') {\n                this.set(this.additionalModels[index].name, item.value);\n              }\n            }).bind(this));\n            resolve();\n          }).bind(this), reject);\n        }).bind(this), 'Additional Models for ' + this.get('moduleName'));\n      } else {\n        return _ember['default'].RSVP.resolve();\n      }\n    },\n\n    renderTemplate: function renderTemplate() {\n      this.render('section');\n    },\n\n    setupController: function setupController(controller, model) {\n      var navigationController = this.controllerFor('navigation');\n      if (this.get('allowSearch') === true) {\n        navigationController.set('allowSearch', true);\n        navigationController.set('searchRoute', this.get('searchRoute'));\n      } else {\n        navigationController.set('allowSearch', false);\n      }\n      var currentController = this.controllerFor(this.get('moduleName'));\n      var propsToSet = this.getProperties('additionalButtons', 'currentScreenTitle', 'newButtonAction', 'newButtonText', 'sectionTitle', 'subActions');\n      currentController.setProperties(propsToSet);\n      if (!_ember['default'].isEmpty(this.additionalModels)) {\n        this.additionalModels.forEach((function (item) {\n          controller.set(item.name, this.get(item.name));\n        }).bind(this));\n      }\n      this._super(controller, model);\n    }\n\n  });\n});","define('hospitalrun/tests/routes/abstract-module-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/abstract-module-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/abstract-module-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/abstract-search-route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember-data', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _emberData, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    searchKeys: null,\n    searchModel: null,\n    searchText: null,\n\n    _findByContains: function _findByContains(searchText) {\n      var searchKeys = this.get('searchKeys');\n      var searchModel = this.get('searchModel');\n      var queryParams = {\n        containsValue: {\n          value: searchText,\n          keys: searchKeys\n        }\n      };\n      return this.store.query(searchModel, queryParams);\n    },\n\n    model: function model(params) {\n      return new _ember['default'].RSVP.Promise((function (resolve) {\n        var searchText = params.search_text;\n        this.controllerFor('navigation').set('currentSearchText', searchText);\n        this.set('searchText', searchText);\n        this._findByContains(searchText).then(resolve, (function (err) {\n          resolve(new _emberData['default'].AdapterPopulatedRecordArray());\n          throw new Error(err);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    setupController: function setupController(controller, model) {\n      this._super(controller, model);\n      if (!_ember['default'].isEmpty(model)) {\n        controller.set('hasRecords', model.get('length') > 0);\n      } else {\n        controller.set('hasRecords', false);\n      }\n      controller.set('searchText', this.get('searchText'));\n      this.controllerFor('navigation').closeProgressModal();\n      var parentController = this.controllerFor(this.get('moduleName'));\n      var searchTitle = 'Search Results for <i>' + _ember['default'].Handlebars.Utils.escapeExpression(this.get('searchText')) + '</i>';\n      parentController.set('currentScreenTitle', searchTitle.htmlSafe());\n    }\n\n  });\n});","define('hospitalrun/tests/routes/abstract-search-route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/abstract-search-route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/abstract-search-route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/application', ['exports', 'ember-simple-auth/mixins/application-route-mixin', 'ember', 'hospitalrun/mixins/setup-user-role'], function (exports, _emberSimpleAuthMixinsApplicationRouteMixin, _ember, _hospitalrunMixinsSetupUserRole) {\n  'use strict';\n\n  var inject = _ember['default'].inject;\n  var Route = _ember['default'].Route;\n\n  var ApplicationRoute = Route.extend(_emberSimpleAuthMixinsApplicationRouteMixin['default'], _hospitalrunMixinsSetupUserRole['default'], {\n    database: inject.service(),\n    config: inject.service(),\n    session: inject.service(),\n    shouldSetupUserRole: true,\n\n    actions: {\n      closeModal: function closeModal() {\n        this.disconnectOutlet({\n          parentView: 'application',\n          outlet: 'modal'\n        });\n      },\n      /**\n       * Render a modal using the specifed path and optionally set a model.\n       * @param modalPath the path to use for the controller and template.\n       * @param model (optional) the model to set on the controller for the modal.\n       */\n      openModal: function openModal(modalPath, model) {\n        if (model) {\n          this.controllerFor(modalPath).set('model', model);\n        }\n        this.renderModal(modalPath);\n      },\n\n      /**\n       * Update an open modal using the specifed model.\n       * @param modalPath the path to use for the controller and template.\n       * @param model (optional) the model to set on the controller for the modal.\n       */\n      updateModal: function updateModal(modalPath, model) {\n        this.controllerFor(modalPath).set('model', model);\n      }\n    },\n\n    model: function model(params, transition) {\n      var session = this.get('session');\n      var isAuthenticated = session && session.get('isAuthenticated');\n      return this.get('config').setup().then((function (configs) {\n        if (transition.targetName !== 'finishgauth' && transition.targetName !== 'login') {\n          this.set('shouldSetupUserRole', true);\n          if (isAuthenticated) {\n            return this.get('database').setup(configs)['catch'](function () {\n              // Error thrown indicates missing auth, so invalidate session.\n              session.invalidate();\n            });\n          }\n        } else if (transition.targetName === 'finishgauth') {\n          this.set('shouldSetupUserRole', false);\n        }\n      }).bind(this));\n    },\n\n    afterModel: function afterModel() {\n      this.controllerFor('navigation').set('allowSearch', false);\n      $('#apploading').remove();\n    },\n\n    renderModal: function renderModal(template) {\n      this.render(template, {\n        into: 'application',\n        outlet: 'modal'\n      });\n    },\n\n    sessionAuthenticated: function sessionAuthenticated() {\n      if (this.get('shouldSetupUserRole') === true) {\n        this.setupUserRole();\n      }\n      this._super();\n    }\n\n  });\n  exports['default'] = ApplicationRoute;\n});","define('hospitalrun/tests/routes/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/index', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    afterModel: function afterModel() {\n      this.controllerFor('navigation').set('allowSearch', false);\n    }\n  });\n});","define('hospitalrun/tests/routes/index.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/index.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/routes/login', ['exports', 'ember', 'ember-simple-auth/mixins/unauthenticated-route-mixin'], function (exports, _ember, _emberSimpleAuthMixinsUnauthenticatedRouteMixin) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsUnauthenticatedRouteMixin['default'], {\n    config: _ember['default'].inject.service(),\n    beforeModel: function beforeModel(transition) {\n      if (this.get('session').get('isAuthenticated')) {\n        this._super(transition);\n      } else {\n        return this.get('config').useGoogleAuth().then(function (useGoogleAuth) {\n          if (useGoogleAuth) {\n            window.location.replace('/auth/google');\n          }\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/routes/login.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - routes/login.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/serializers/application', ['exports', 'ember-pouch'], function (exports, _emberPouch) {\n  'use strict';\n\n  exports['default'] = _emberPouch.Serializer.extend();\n});","define('hospitalrun/tests/serializers/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serializers/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/serializers/user', ['exports', 'ember-data'], function (exports, _emberData) {\n  'use strict';\n\n  var couchSerializer = _emberData['default'].JSONSerializer.extend({\n    attrs: {\n      rev: '_rev'\n    },\n    primaryKey: '_id',\n\n    isNewSerializerAPI: true,\n\n    normalizeArrayResponse: function normalizeArrayResponse(store, primaryModelClass, payload, id, requestType) {\n      var newPayload = payload.rows.map((function (row) {\n        return row.doc;\n      }).bind(this));\n      return this._super(store, primaryModelClass, newPayload, id, requestType);\n    },\n\n    normalizeSaveResponse: function normalizeSaveResponse(store, primaryModelClass, payload) {\n      return {\n        data: {\n          id: payload.id,\n          type: 'user',\n          attrs: {\n            rev: payload.rev\n          }\n        }\n      };\n    }\n\n  });\n\n  exports['default'] = couchSerializer;\n});","define('hospitalrun/tests/serializers/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serializers/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/user.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/services/config', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  var inject = _ember['default'].inject;\n  var run = _ember['default'].run;\n  exports['default'] = _ember['default'].Service.extend({\n    configDB: null,\n    database: inject.service(),\n    session: inject.service(),\n    sessionData: _ember['default'].computed.alias('session.data'),\n\n    setup: function setup() {\n      var replicateConfigDB = this.replicateConfigDB.bind(this);\n      var loadConfig = this.loadConfig.bind(this);\n      var db = this.createDB();\n      this.set('configDB', db);\n      this.setCurrentUser();\n      return replicateConfigDB(db).then(loadConfig);\n    },\n\n    createDB: function createDB() {\n      return new PouchDB('config');\n    },\n    replicateConfigDB: function replicateConfigDB(db) {\n      var promise = new _ember['default'].RSVP.Promise(function (resolve) {\n        var url = document.location.protocol + '//' + document.location.host + '/db/config';\n        db.replicate.from(url).then(resolve)['catch'](resolve);\n      });\n      return promise;\n    },\n    loadConfig: function loadConfig() {\n      var config = this.get('configDB');\n      var options = {\n        include_docs: true,\n        keys: ['config_consumer_key', 'config_consumer_secret', 'config_disable_offline_sync', 'config_oauth_token', 'config_token_secret', 'config_use_google_auth']\n      };\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        config.allDocs(options, function (err, response) {\n          if (err) {\n            console.log('Could not get configDB configs:', err);\n            reject(err);\n          }\n          var configObj = {};\n          for (var i = 0; i < response.rows.length; i++) {\n            if (!response.rows[i].error && response.rows[i].doc) {\n              configObj[response.rows[i].id] = response.rows[i].doc.value;\n            }\n          }\n          resolve(configObj);\n        });\n      }, 'getting configuration from the database');\n    },\n    getFileLink: function getFileLink(id) {\n      var config = this.get('configDB');\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        config.get('file-link_' + id, function (err, doc) {\n          if (err) {\n            reject(err);\n          }\n          resolve(doc);\n        });\n      });\n    },\n    removeFileLink: function removeFileLink(id) {\n      var config = this.get('configDB');\n      return this.getFileLink(id).then(function (fileLink) {\n        config.remove(fileLink);\n      });\n    },\n    saveFileLink: function saveFileLink(fileName, id) {\n      var config = this.get('configDB');\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        config.put({ fileName: fileName }, 'file-link_' + id, function (err, doc) {\n          if (err) {\n            reject(err);\n          }\n          resolve(doc);\n        });\n      });\n    },\n    saveOauthConfigs: function saveOauthConfigs(configs) {\n      var configDB = this.get('configDB');\n      var configKeys = Object.keys(configs);\n      var savePromises = [];\n      return this._getOauthConfigs(configKeys).then(function (records) {\n        configKeys.forEach(function (key) {\n          var configRecord = records.rows.findBy('key', key);\n          if (!configRecord || !configRecord.doc) {\n            configRecord = {\n              _id: key,\n              value: configs[key]\n            };\n          } else {\n            configRecord = configRecord.doc;\n            configRecord.value = configs[key];\n          }\n          savePromises.push(configDB.put(configRecord));\n        });\n        return _ember['default'].RSVP.all(savePromises);\n      });\n    },\n    useGoogleAuth: function useGoogleAuth() {\n      return this.getConfigValue('use_google_auth', false);\n    },\n\n    getPatientPrefix: function getPatientPrefix() {\n      return this.getConfigValue('patient_id_prefix', 'P');\n    },\n\n    getConfigDB: function getConfigDB() {\n      return this.get('configDB');\n    },\n\n    getConfigValue: function getConfigValue(id, defaultValue) {\n      var configDB = this.get('configDB');\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        configDB.get('config_' + id).then(function (doc) {\n          run(null, resolve, doc.value);\n        })['catch'](function () {\n          run(null, resolve, defaultValue);\n        });\n      }, 'get ' + id + ' from config database');\n    },\n\n    _getOauthConfigs: function _getOauthConfigs(configKeys) {\n      var configDB = this.get('configDB');\n      var options = {\n        include_docs: true,\n        keys: configKeys\n      };\n      return configDB.allDocs(options);\n    },\n\n    setCurrentUser: function setCurrentUser(userName) {\n      var config = this.get('configDB');\n      var sessionData = this.get('sessionData');\n      if (!userName && sessionData.authenticated) {\n        userName = sessionData.authenticated.name;\n      }\n      config.get('current_user').then(function (doc) {\n        doc.value = userName;\n        config.put(doc);\n      })['catch'](function () {\n        config.put({\n          _id: 'current_user',\n          value: userName\n        });\n      });\n    }\n\n  });\n});","define('hospitalrun/tests/services/config.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/config.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/config.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/services/database', ['exports', 'ember', 'hospitalrun/utils/pouch-views', 'npm:pouchdb-list', 'hospitalrun/mixins/pouch-adapter-utils'], function (exports, _ember, _hospitalrunUtilsPouchViews, _npmPouchdbList, _hospitalrunMixinsPouchAdapterUtils) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Service.extend(_hospitalrunMixinsPouchAdapterUtils['default'], {\n    config: _ember['default'].inject.service(),\n    mainDB: null, // Server DB\n    oauthHeaders: null,\n    setMainDB: false,\n\n    setup: function setup(configs) {\n      var _this = this;\n\n      PouchDB.plugin(_npmPouchdbList['default']);\n      return this.createDB(configs).then(function (db) {\n        _this.set('mainDB', db);\n        _this.set('setMainDB', true);\n      });\n    },\n\n    createDB: function createDB(configs) {\n      var _this2 = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var pouchOptions = {};\n        if (configs && configs.config_use_google_auth) {\n          pouchOptions.ajax = {\n            timeout: 30000\n          };\n          // If we don't have the proper credentials, throw error to force login.\n          if (_ember['default'].isEmpty(configs.config_consumer_key) || _ember['default'].isEmpty(configs.config_consumer_secret) || _ember['default'].isEmpty(configs.config_oauth_token) || _ember['default'].isEmpty(configs.config_token_secret)) {\n            throw Error('login required');\n          } else {\n            var headers = {\n              'x-oauth-consumer-secret': configs.config_consumer_secret,\n              'x-oauth-consumer-key': configs.config_consumer_key,\n              'x-oauth-token-secret': configs.config_token_secret,\n              'x-oauth-token': configs.config_oauth_token\n            };\n            _this2.set('oauthHeaders', headers);\n            pouchOptions.ajax.headers = headers;\n          }\n        }\n        var url = document.location.protocol + '//' + document.location.host + '/db/main';\n\n        _this2._createRemoteDB(url, pouchOptions)['catch'](function (err) {\n          if (err.status && err.status === 401 || configs.config_disable_offline_sync === true) {\n            reject(err);\n          } else {\n            return _this2._createLocalDB('localMainDB', pouchOptions);\n          }\n        }).then(function (db) {\n          return resolve(db);\n        })['catch'](function (err) {\n          return reject(err);\n        });\n      }, 'initialize application db');\n    },\n\n    queryMainDB: function queryMainDB(queryParams, mapReduce) {\n      var _this3 = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var mainDB = _this3.get('mainDB');\n        if (mapReduce) {\n          mainDB.query(mapReduce, queryParams, function (err, response) {\n            if (err) {\n              _this3._pouchError(reject)(err);\n            } else {\n              response.rows = _this3._mapPouchData(response.rows);\n              resolve(response);\n            }\n          });\n        } else {\n          mainDB.allDocs(queryParams, function (err, response) {\n            if (err) {\n              _this3._pouchError(reject)(err);\n            } else {\n              response.rows = _this3._mapPouchData(response.rows);\n              resolve(response);\n            }\n          });\n        }\n      });\n    },\n\n    /**\n    * Given an pouchDB doc id, return the corresponding ember record id.\n    * @param {String} docId the pouchDB doc id.\n    * @returns {String} the corresponding Ember id.\n    */\n    getEmberId: function getEmberId(docId) {\n      var parsedId = this.get('mainDB').rel.parseDocID(docId);\n      if (!_ember['default'].isEmpty(parsedId.id)) {\n        return parsedId.id;\n      }\n    },\n\n    getDocFromMainDB: function getDocFromMainDB(docId) {\n      var _this4 = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var mainDB = _this4.get('mainDB');\n        mainDB.get(docId, function (err, doc) {\n          if (err) {\n            _this4._pouchError(reject)(err);\n          } else {\n            resolve(doc);\n          }\n        });\n      });\n    },\n\n    /**\n    * Given an Ember record id and type, return back the corresponding pouchDB id.\n    * @param {String} emberId the ember record id.\n    * @param {String} type the record type.\n    * @returns {String} the corresponding pouch id.\n    */\n    getPouchId: function getPouchId(emberId, type) {\n      return this.get('mainDB').rel.makeDocID({\n        id: emberId,\n        type: type\n      });\n    },\n\n    /**\n     * Load the specified db dump into the database.\n     * @param {String} dbDump A couchdb dump string produced by pouchdb-dump-cli.\n     * @returns {Promise} A promise that resolves once the dump has been loaded.\n     */\n    loadDBFromDump: function loadDBFromDump(dbDump) {\n      var _this5 = this;\n\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var db = new PouchDB('dbdump', {\n          adapter: 'memory'\n        });\n        db.load(dbDump).then(function () {\n          var mainDB = _this5.get('mainDB');\n          db.replicate.to(mainDB).on('complete', function (info) {\n            resolve(info);\n          }).on('error', function (err) {\n            reject(err);\n          });\n        }, reject);\n      });\n    },\n\n    _mapPouchData: function _mapPouchData(rows) {\n      var _this6 = this;\n\n      var mappedRows = [];\n      if (rows) {\n        mappedRows = rows.map(function (row) {\n          if (row.doc) {\n            var rowValues = {\n              doc: row.doc.data\n            };\n            rowValues.doc.id = _this6.getEmberId(row.id);\n            return rowValues;\n          } else {\n            return row;\n          }\n        });\n      }\n      return mappedRows;\n    },\n\n    _createRemoteDB: function _createRemoteDB(remoteUrl, pouchOptions) {\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var remoteDB = new PouchDB(remoteUrl, pouchOptions);\n        // remote db lazy created, check if db created correctly\n        remoteDB.info().then(function () {\n          (0, _hospitalrunUtilsPouchViews['default'])(remoteDB);\n          resolve(remoteDB);\n        })['catch'](function (err) {\n          console.log('error with remote db:', JSON.stringify(err, null, 2));\n          reject(err);\n        });\n      });\n    },\n\n    _createLocalDB: function _createLocalDB(localDBName, pouchOptions) {\n      return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n        var localDB = new PouchDB(localDBName, pouchOptions);\n        localDB.info().then(function () {\n          (0, _hospitalrunUtilsPouchViews['default'])(localDB);\n          resolve(localDB);\n        })['catch'](function (err) {\n          return reject(err);\n        });\n      });\n    }\n  });\n});","define('hospitalrun/tests/services/database.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/database.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/database.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/services/filesystem', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Service.extend({\n    config: _ember['default'].inject.service(),\n\n    filer: null, // Injected via initializer\n    fileSystemSize: 1024 * 1024 * 1024 * 8, // 8GB max size for local filesystem;chrome only,\n\n    _onError: function _onError(e) {\n      console.log('Filer filesystem error: ' + e);\n    },\n\n    _downloadFiles: function _downloadFiles() {\n      this.store.find('photo').then((function (photos) {\n        photos.forEach((function (photo) {\n          this.downloadIfNeeded(photo);\n        }).bind(this));\n      }).bind(this));\n    },\n\n    /**\n     * Downloads the file from the server and saves it to the local filesystem.\n     * @param {Object} fileRecord Record to use to download the file.\n     */\n    _downloadFileFromServer: function _downloadFileFromServer(fileRecord) {\n      var fileName = _ember['default'].get(fileRecord, 'fileName');\n      var pouchDbId = _ember['default'].get(fileRecord, 'id');\n      var url = _ember['default'].get(fileRecord, 'url');\n      var xhr = new XMLHttpRequest();\n      if (!_ember['default'].isEmpty(url)) {\n        xhr.open('GET', url, true);\n        xhr.responseType = 'blob';\n        xhr.onload = (function () {\n          var file = new Blob([xhr.response]);\n          this.addFile(file, fileName, pouchDbId);\n        }).bind(this);\n        xhr.send();\n      }\n    },\n\n    setup: function setup() {\n      var size = this.get('fileSystemSize');\n      var filer = new Filer();\n      filer.init({ persistent: true, size: size }, (function () {\n        try {\n          this.set('filer', filer);\n        } catch (ignored) {\n          // Exception may happen during testing an can be ignored.\n        }\n      }).bind(this));\n    },\n\n    /**\n     * Add the specified file to the local filesystem\n     * @param {File} file the file to save.\n     * @param {String} path the file path to save the file to.\n     * @param {String} pouchDbId database id that the file is associated with.\n     * The pouch DB ids are prefixed with the type of record (eg patient record is\n     * prefixed by 'patient_'.\n     * @returns {Promise} returns a Promise that resolves once the file is saved.\n     */\n    addFile: function addFile(file, path, pouchDbId) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var currentDate = new Date();\n        var filer = this.get('filer');\n        var fileName = file.name || currentDate.getTime();\n        var newFileName = path + fileName;\n        var config = this.get('config');\n        if (path.indexOf('.') > -1) {\n          newFileName = path;\n          // If a full file path was provided, figure out the path and file name.\n          var pathParts = path.split('/');\n          fileName = pathParts.pop();\n          path = pathParts.join('/');\n          path += '/';\n        }\n\n        if (newFileName.indexOf('.') === -1) {\n          if (file.type) {\n            var typeParts = file.type.split('/');\n            newFileName += '.' + typeParts.pop();\n          } else {\n            // Default to png extension\n            newFileName += '.png';\n          }\n        }\n\n        this.fileExists(newFileName).then((function (exists) {\n          if (exists) {\n            // Make sure a unique name is used.\n            newFileName = path + currentDate.getTime() + fileName;\n          }\n          if (_ember['default'].isEmpty(filer)) {\n            reject('Local filesystem unavailable, please use Google Chrome browser');\n          }\n          if (_ember['default'].isEmpty(fileName) && !_ember['default'].isEmpty(file.type)) {\n            var typeParts = file.type.split('/');\n            if (typeParts.length > 1) {\n              newFileName += '.' + typeParts[1];\n            }\n          }\n          filer.mkdir(path, false, function () {\n            filer.write(newFileName, { data: file, type: file.type }, function (fileEntry) {\n              config.saveFileLink(newFileName, pouchDbId);\n              resolve(fileEntry);\n            }, function (e) {\n              reject(e);\n            });\n          }, function (e) {\n            reject(e);\n          });\n        }).bind(this));\n      }).bind(this));\n    },\n\n    /**\n     * Delete the specified file\n     * @param {String} filePath path of file to delete.\n     * @param {String} pouchId database id that the file is associated with.\n     * The pouch DB ids are prefixed with the type of record (eg patient record is\n     * prefixed by 'patient_'.\n     * @returns {Promise} returns a Promise that resolves once the file is deleted.\n     */\n    deleteFile: function deleteFile(filePath, pouchDbId) {\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        var filer = this.get('filer');\n        var config = this.get('config');\n        try {\n          filer.rm(filePath, function () {\n            config.removeFileLink(pouchDbId);\n            resolve();\n          }, reject);\n        } catch (ex) {\n          reject(ex);\n        }\n      }).bind(this));\n    },\n\n    downloadIfNeeded: function downloadIfNeeded(fileRecord) {\n      var fileName = _ember['default'].get(fileRecord, 'fileName');\n      this.fileExists(fileName).then((function (exists) {\n        if (!exists) {\n          this._downloadFileFromServer(fileRecord);\n        }\n      }).bind(this));\n    },\n\n    /**\n     * Determine if specified file exists\n     * @param {String} the path of the file to determine if it exists.\n     * @returns {Promise} returns a Promise that resolves with a boolean indicating\n     * if the file exists.\n     */\n    fileExists: function fileExists(filePath) {\n      return new _ember['default'].RSVP.Promise((function (resolve) {\n        var filer = this.get('filer');\n        filer.fs.root.getFile(filePath, {}, function () {\n          resolve(true);\n        }, function () {\n          // if ls errs, file doesn't exist.\n          resolve(false);\n        });\n      }).bind(this));\n    },\n\n    /**\n     * Convert specified file to a data url\n     * @param {File} file to convert\n     * @returns {Promise} returns a Promise that resolves with the data url\n     * for the file.\n     */\n    fileToDataURL: function fileToDataURL(file) {\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        var reader = new FileReader();\n        reader.onloadend = function (e) {\n          resolve(e.target.result);\n        };\n        reader.readAsDataURL(file);\n      });\n    },\n\n    /**\n     * Read the specified file into a string\n     * @param {File} file to read\n     * @returns {Promise} returns a Promise that resolves with the data url\n     * for the file.\n     */\n    fileToString: function fileToString(file) {\n      return new _ember['default'].RSVP.Promise(function (resolve) {\n        var reader = new FileReader();\n        reader.onloadend = function (e) {\n          resolve(e.target.result);\n        };\n        reader.readAsText(file);\n      });\n    },\n\n    /**\n     * Property to determine if file system API is available.\n     */\n    isFileSystemEnabled: (function () {\n      var filer = this.get('filer');\n      return !_ember['default'].isEmpty(filer);\n    }).property('filer'),\n\n    /**\n     * Get filesystem url from specified path.\n     * @param {String} the path of the file to get the url for.\n     * @returns {Promise} returns a Promise that resolves with the file system\n     * url or null if the file doesn't exist.\n     */\n    pathToFileSystemURL: function pathToFileSystemURL(path) {\n      return new _ember['default'].RSVP.Promise((function (resolve) {\n        var filer = this.get('filer');\n        filer.fs.root.getFile(path, {}, function (fileEntry) {\n          resolve(fileEntry.toURL());\n        }, function () {\n          // if ls errs, just return empty, file doesn't exist.\n          resolve();\n        });\n      }).bind(this));\n    }\n  });\n});","define('hospitalrun/tests/services/filesystem.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/filesystem.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/filesystem.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/serviceworkers/pouchdb-sync', ['exports'], function (exports) {\n  'use strict';\n\n  var configs = false;\n  var syncingRemote = false;\n  var configDB = new PouchDB('config');\n  var localMainDB = new PouchDB('localMainDB');\n\n  toolbox.router.get('/db/main/', function (request, values, options) {\n    logDebug('request for main info:', request.url);\n    return couchDBResponse(request, values, options, function () {\n      return localMainDB.info();\n    });\n  });\n\n  toolbox.router.get('/db/main/_all_docs', function (request, values, options) {\n    logDebug('request for all docs:', request.url);\n    return couchDBResponse(request, values, options, function (request) {\n      var options = getDBOptions(request.url);\n      logDebug('allDocs PouchDB:', options);\n      return localMainDB.allDocs(options);\n    });\n  });\n  toolbox.router.get('/db/main/_design/:design_doc/_view/:view', function (request, values, options) {\n    logDebug('request for view:', request.url);\n    return couchDBResponse(request, values, options, function (request) {\n      var options = getDBOptions(request.url);\n      var mapReduce = values.design_doc + '/' + values.view;\n      logDebug('queryPouchDB:', mapReduce, options);\n      return localMainDB.query(mapReduce, options);\n    });\n  });\n\n  toolbox.router.post('/db/main/_bulk_docs', function (request, values, options) {\n    logDebug('request for bulk docs:', request.url);\n    var pouchRequest = request.clone();\n    return couchDBResponse(request, values, options, function () {\n      logDebug('couch failed, trying pouch request:', request.url);\n      return pouchRequest.json().then(function (jsonRequest) {\n        logDebug('got bulk docs, jsonRequest is:', jsonRequest);\n        return localMainDB.bulkDocs(jsonRequest);\n      })['catch'](function (err) {\n        logDebug('err getting json: ', err);\n      });\n    });\n  });\n\n  function setupRemoteSync() {\n    if (!syncingRemote && configs.config_disable_offline_sync !== true) {\n      var pouchOptions = {\n        ajax: {\n          headers: {},\n          timeout: 30000\n        }\n      };\n      if (configs.config_consumer_secret && configs.config_token_secret && configs.config_consumer_key && configs.config_oauth_token) {\n        pouchOptions.ajax.headers['x-oauth-consumer-secret'] = configs.config_consumer_secret;\n        pouchOptions.ajax.headers['x-oauth-consumer-key'] = configs.config_consumer_key;\n        pouchOptions.ajax.headers['x-oauth-token-secret'] = configs.config_token_secret;\n        pouchOptions.ajax.headers['x-oauth-token'] = configs.config_oauth_token;\n      }\n      var remoteURL = self.location.protocol + '//' + self.location.host + '/db/main';\n      var remoteDB = new PouchDB(remoteURL, pouchOptions);\n      syncingRemote = localMainDB.sync(remoteDB, {\n        live: true,\n        retry: true\n      }).on('change', function (info) {\n        logDebug('local sync change', info);\n      }).on('paused', function () {\n        logDebug('local sync paused');\n        // replication paused (e.g. user went offline)\n      }).on('active', function () {\n        logDebug('local sync active');\n        // replicate resumed (e.g. user went back online)\n      }).on('denied', function (info) {\n        logDebug('local sync denied:', info);\n        // a document failed to replicate, e.g. due to permissions\n      }).on('complete', function (info) {\n        logDebug('local sync complete:', info);\n        // handle complete\n      }).on('error', function (err) {\n        logDebug('local sync error:', err);\n      });\n    }\n  }\n\n  function setupConfigs() {\n    return new Promise(function (resolve, reject) {\n      if (configs) {\n        resolve();\n      } else {\n        configDB.allDocs({\n          include_docs: true\n        }).then(function (result) {\n          configs = {};\n          result.rows.forEach(function (row) {\n            configs[row.id] = row.doc.value;\n          });\n          resolve();\n        }, reject);\n      }\n    });\n  }\n\n  function couchDBResponse(request, values, options, pouchDBFn) {\n    setupConfigs().then(setupRemoteSync)['catch'](function (err) {\n      logDebug('Error setting up remote sync', JSON.stringify(err, null, 2));\n    });\n    logDebug('Looking for couchdb response for:', request.url);\n    return new Promise(function (resolve, reject) {\n      var startTime = performance.now();\n      toolbox.networkOnly(request, values, options).then(function (response) {\n        if (response) {\n          var elapsedTime = performance.now() - startTime;\n          resolve(response);\n          logPerformance(elapsedTime, request.url);\n        } else {\n          logDebug('Network first returned no response, get data from local pouch db.');\n          runPouchFn(pouchDBFn, request, resolve, reject);\n        }\n      })['catch'](function (err) {\n        logDebug('Network first returned err, get data from local pouch db:', err);\n        runPouchFn(pouchDBFn, request, resolve, reject);\n      });\n    });\n  }\n\n  function convertPouchToResponse(pouchResponse) {\n    return new Response(JSON.stringify(pouchResponse), {\n      status: 200,\n      statusText: 'OK'\n    });\n  }\n\n  function getDBOptions(url) {\n    var returnParams = {};\n    if (url.indexOf('?') > 0) {\n      var urlParams = url.split('?');\n      var params = decodeURIComponent(urlParams[1]).split('&');\n      for (var i = 0; i < params.length; i++) {\n        var paramParts = params[i].split('=');\n        returnParams[paramParts[0]] = JSON.parse(paramParts[1]);\n      }\n    }\n    return returnParams;\n  }\n\n  function logPerformance(elapsedTime, requestUrl) {\n    if (configs.config_log_metrics && configs.current_user) {\n      var now = Date.now();\n      var timingId = 'timing_' + configs.current_user.toLowerCase() + '_' + now;\n      localMainDB.put({\n        _id: timingId,\n        elapsed: elapsedTime,\n        url: requestUrl\n      });\n    }\n  }\n\n  function runPouchFn(pouchDBFn, request, resolve, reject) {\n    if (configs.disable_offline_sync) {\n      reject('Offline access has been disabled.');\n    } else {\n      pouchDBFn(request).then(function (response) {\n        resolve(convertPouchToResponse(response));\n      })['catch'](function (err) {\n        logDebug('POUCH error is:', err);\n        reject(err);\n      });\n    }\n  }\n});","define('hospitalrun/tests/serviceworkers/pouchdb-sync.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serviceworkers/pouchdb-sync.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serviceworkers/pouchdb-sync.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/styles/_base.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_base.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_bootstrap-theme.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_bootstrap-theme.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_bootstrap.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_bootstrap.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_index.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_index.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_layout.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_layout.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_loading_notice.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_loading_notice.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_print.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_print.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_sign_in_screen.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_sign_in_screen.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_temp_misc.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_temp_misc.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_typography.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_typography.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/_variables_mixins.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/_variables_mixins.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/app.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/app.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_form_styles.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_form_styles.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_imaging.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_imaging.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_labs.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_labs.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_pagination.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_pagination.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_panel.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_panel.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_patient_history.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_patient_history.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_patient_summary.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_patient_summary.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_sidebar_nav.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_sidebar_nav.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_tab_content.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_tab_content.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define('hospitalrun/tests/styles/components/_tab_nav.stylelint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module(' Style Lint ');\n  QUnit.test('styles/components/_tab_nav.scss should pass style lint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, '');\n  });\n});","define(\"hospitalrun/tests/template-deprecations-test\", [\"exports\"], function (exports) {\n  \"use strict\";\n});","define('hospitalrun/tests/test-helper', ['exports', 'hospitalrun/tests/helpers/resolver', 'ember-qunit'], function (exports, _hospitalrunTestsHelpersResolver, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_hospitalrunTestsHelpersResolver['default']);\n});","define('hospitalrun/tests/test-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - test-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/appointments/missed/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:appointments/missed', 'Unit | Route | appointments/missed', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('hospitalrun/tests/unit/appointments/missed/route-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/appointments/missed/route-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/appointments/missed/route-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/components/nav-menu-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('nav-menu', 'NavMenuComponent', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    assert.expect(2);\n\n    var startingMenu = {\n      title: 'Inventory',\n      iconClass: 'octicon-package',\n      route: 'inventory',\n      capability: 'inventory',\n      subnav: [{\n        title: 'Requests',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.index',\n        capability: 'add_inventory_request'\n      }, {\n        title: 'Items',\n        iconClass: 'octicon-chevron-right',\n        route: 'inventory.listing',\n        capability: 'inventory'\n      }]\n    };\n\n    // creates the component instance\n    var navMenuProperties = { nav: startingMenu };\n    var navMenu = this.subject(navMenuProperties);\n    assert.equal(navMenu._state, 'preRender');\n\n    // appends the navMenu to the page\n    this.render();\n    assert.equal(navMenu._state, 'inDOM');\n  });\n});","define('hospitalrun/tests/unit/components/nav-menu-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/components/nav-menu-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/nav-menu-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/inventory-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('inventory', 'Unit | Model | inventory', {\n    // Specify the other units that are required for this test.\n    needs: ['ember-validations@validator:local/numericality', 'ember-validations@validator:local/presence', 'model:inv-location', 'model:inv-purchase', 'service:validations']\n  });\n\n  (0, _emberQunit.test)('condition', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model, 'Model exists');\n\n    _ember['default'].run(function () {\n      model.setProperties({\n        estimatedDaysOfStock: 28,\n        rank: 'A'\n      });\n    });\n    assert.equal(model.get('condition'), 'good', 'Condition Should be good with given values');\n\n    _ember['default'].run(function () {\n      model.set('estimatedDaysOfStock', 15);\n    });\n    assert.equal(model.get('condition'), 'average', 'Condition Should be average with new quantity');\n\n    _ember['default'].run(function () {\n      model.set('rank', 'B');\n    });\n    assert.equal(model.get('condition'), 'good', 'Condition should be good again with new rank');\n\n    _ember['default'].run(function () {\n      model.set('estimatedDaysOfStock', 6);\n    });\n    assert.equal(model.get('condition'), 'bad', 'Condition should be bad with new quantity');\n\n    _ember['default'].run(function () {\n      model.set('rank', 'C');\n    });\n    assert.equal(model.get('condition'), 'average', 'Condition should be average again');\n  });\n});","define('hospitalrun/tests/unit/models/inventory-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/inventory-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/inventory-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/models/visit-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('visit', 'Unit | Model | visit', {\n    // Specify the other units that are required for this test.\n    needs: ['ember-validations@validator:local/acceptance', 'ember-validations@validator:local/presence', 'model:procedure', 'model:imaging', 'model:lab', 'model:medication', 'model:patient', 'model:patient-note', 'model:proc-charge', 'model:vital', 'model:visit', 'service:validations']\n  });\n\n  (0, _emberQunit.test)('paymentState', function (assert) {\n    var model = this.subject();\n\n    _ember['default'].run(function () {\n      model.setProperties({\n        paymentState: 'bad value'\n      });\n    });\n    assert.equal(model.get('paymentState'), 'bad value');\n    assert.ok(model.errors.paymentState.length, 'there should errors');\n\n    _ember['default'].run(function () {\n      model.setProperties({\n        paymentState: 'clear'\n      });\n    });\n    assert.equal(model.get('paymentState'), 'clear');\n    assert.ok(!model.errors.paymentState.length, 'there should be no error');\n  });\n});","define('hospitalrun/tests/unit/models/visit-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/visit-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/visit-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/services/config-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:config', 'Unit | Service | config', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('hospitalrun/tests/unit/services/config-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/services/config-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/config-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/services/filesystem-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:filesystem', 'Unit | Service | filesystem', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('hospitalrun/tests/unit/services/filesystem-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/services/filesystem-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/filesystem-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/unit/utils/item-condition-test', ['exports', 'hospitalrun/utils/item-condition', 'ember-qunit'], function (exports, _hospitalrunUtilsItemCondition, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('util:item-condition', 'Unit | Utils | item-condition');\n\n  (0, _emberQunit.test)('rankToMultiplier', function (assert) {\n    assert.equal((0, _hospitalrunUtilsItemCondition.rankToMultiplier)('A'), 0.5, 'Should be one half for A rank');\n    assert.equal((0, _hospitalrunUtilsItemCondition.rankToMultiplier)('B'), 1, 'Should be one for B rank');\n    assert.equal((0, _hospitalrunUtilsItemCondition.rankToMultiplier)('C'), 2, 'Should be two for C rank');\n  });\n\n  (0, _emberQunit.test)('getCondition', function (assert) {\n    assert.equal((0, _hospitalrunUtilsItemCondition.getCondition)(14), 'good', 'Should be good for 14 days');\n    assert.equal((0, _hospitalrunUtilsItemCondition.getCondition)(13), 'average', 'Should be average for 13 days');\n    assert.equal((0, _hospitalrunUtilsItemCondition.getCondition)(6), 'bad', 'Should be bad for 6 days');\n    assert.equal((0, _hospitalrunUtilsItemCondition.getCondition)(14, 0.5), 'average', 'Shold accept custom multiplier');\n  });\n});","define('hospitalrun/tests/unit/utils/item-condition-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/utils/item-condition-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/utils/item-condition-test.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember-i18n'], function (exports, _hospitalrunControllersAbstractDeleteController, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: (0, _emberI18n.translationMacro)('labels.deleteUser'),\n\n    actions: {\n      'delete': function _delete() {\n        var _this = this;\n\n        var recordToDelete = this.get('model');\n        this.get('model').destroyRecord().then(function () {\n          _this.send('closeModal', recordToDelete);\n        });\n      }\n    }\n  });\n});","define('hospitalrun/tests/users/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember', 'hospitalrun/mixins/user-roles'], function (exports, _hospitalrunControllersAbstractEditController, _ember, _hospitalrunMixinsUserRoles) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsUserRoles['default'], {\n    usersController: _ember['default'].inject.controller('users/index'),\n    updateCapability: 'add_user',\n\n    users: _ember['default'].computed.alias('usersController.model'),\n\n    actions: {\n      update: function update() {\n        var updateModel = this.get('model');\n        var users = this.get('users');\n\n        if (updateModel.get('isNew')) {\n          var newData = updateModel.getProperties('password', 'email', 'roles', 'displayName');\n          newData.name = newData.email;\n          newData.id = 'org.couchdb.user:' + newData.email;\n          if (_ember['default'].isEmpty(newData.password)) {\n            newData.password = uuid.v4() + uuid.v4();\n          }\n          updateModel.deleteRecord();\n          updateModel = this.get('store').createRecord('user', newData);\n          this.set('model', updateModel);\n        }\n\n        if (_ember['default'].isEmpty(updateModel.get('userPrefix'))) {\n          var counter = 1;\n          var prefix = 'p';\n          var userPrefix = prefix + 0;\n          var usedPrefix = users.findBy('userPrefix', prefix);\n\n          while (!_ember['default'].isEmpty(usedPrefix)) {\n            prefix = userPrefix + counter++;\n            usedPrefix = users.findBy('userPrefix', prefix);\n          }\n          updateModel.set('userPrefix', prefix);\n        }\n        updateModel.save().then((function () {\n          this.displayAlert(this.get('i18n').t('messages.userSaved'), this.get('i18n').t('messages.userHasBeenSaved'));\n        }).bind(this));\n      }\n    }\n  });\n});","define('hospitalrun/tests/users/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'ember', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractEditRoute, _ember, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend({\n    editTitle: (0, _emberI18n.translationMacro)('labels.editUser'),\n    modelName: 'user',\n    newTitle: (0, _emberI18n.translationMacro)('labels.newUser'),\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        roles: ['Data Entry', 'user']\n      });\n    }\n  });\n});","define('hospitalrun/tests/users/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/index/controller', ['exports', 'hospitalrun/controllers/abstract-paged-controller', 'hospitalrun/mixins/user-session'], function (exports, _hospitalrunControllersAbstractPagedController, _hospitalrunMixinsUserSession) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractPagedController['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    addPermission: 'add_user',\n    deletePermission: 'delete_user',\n    sortProperties: ['displayName']\n\n  });\n});","define('hospitalrun/tests/users/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/index/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/index/route', ['exports', 'hospitalrun/routes/abstract-index-route', 'hospitalrun/mixins/user-session', 'ember-i18n'], function (exports, _hospitalrunRoutesAbstractIndexRoute, _hospitalrunMixinsUserSession, _emberI18n) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractIndexRoute['default'].extend(_hospitalrunMixinsUserSession['default'], {\n    newButtonAction: (function () {\n      if (this.currentUserCan('add_user')) {\n        return 'newItem';\n      } else {\n        return null;\n      }\n    }).property(),\n    newButtonText: (0, _emberI18n.translationMacro)('user.plusNewUser'),\n    pageTitle: (0, _emberI18n.translationMacro)('user.usersPageTile'),\n    model: function model() {\n      return this.store.findAll('user');\n    }\n  });\n});","define('hospitalrun/tests/users/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/index/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/users/route', ['exports', 'ember-simple-auth/mixins/authenticated-route-mixin', 'ember'], function (exports, _emberSimpleAuthMixinsAuthenticatedRouteMixin, _ember) {\n  'use strict';\n\n  exports['default'] = _ember['default'].Route.extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {\n    actions: {\n      allItems: function allItems() {\n        this.transitionTo('users.index');\n      }\n    }\n  });\n});","define('hospitalrun/tests/users/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - users/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'users/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/date-sort', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = {\n    sortByDate: function sortByDate(firstItem, secondItem, compareAttribute) {\n      var firstDate = firstItem.get(compareAttribute);\n      var secondDate = secondItem.get(compareAttribute);\n      return _ember['default'].compare(firstDate.getTime(), secondDate.getTime());\n    }\n  };\n});","define('hospitalrun/tests/utils/date-sort.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/date-sort.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/date-sort.js should pass ESLint.\\n');\n  });\n});","define(\"hospitalrun/tests/utils/email-validation\", [\"exports\"], function (exports) {\n  \"use strict\";\n\n  exports[\"default\"] = {\n    emailRegex: /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  };\n});","define('hospitalrun/tests/utils/email-validation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/email-validation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/email-validation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/item-condition', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports.rankToMultiplier = rankToMultiplier;\n  exports.getCondition = getCondition;\n\n  var rankMultiplierValues = [{\n    rank: 'A',\n    value: 0.5\n  }, {\n    rank: 'B',\n    value: 1\n  }, {\n    rank: 'C',\n    value: 2\n  }];\n\n  function rankToMultiplier() {\n    var rank = arguments.length <= 0 || arguments[0] === undefined ? 'B' : arguments[0];\n\n    var rankModel = _ember['default'].A(rankMultiplierValues).findBy('rank', rank);\n    return rankModel.value;\n  }\n\n  function getCondition(estimatedDaysOfStock) {\n    var multiplier = arguments.length <= 1 || arguments[1] === undefined ? 1 : arguments[1];\n\n    estimatedDaysOfStock *= multiplier;\n\n    if (estimatedDaysOfStock >= 14) {\n      return 'good';\n    } else if (estimatedDaysOfStock < 7) {\n      return 'bad';\n    } else {\n      return 'average';\n    }\n  }\n});","define('hospitalrun/tests/utils/item-condition.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/item-condition.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/item-condition.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/patient-validation', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  exports['default'] = {\n    patientTypeAhead: {\n      acceptance: {\n        accept: true,\n        'if': function _if(object) {\n          if (!object.get('selectPatient')) {\n            return false;\n          }\n          if (!object.get('hasDirtyAttributes')) {\n            return false;\n          }\n          var patientName = object.get('patient.displayName');\n          var patientTypeAhead = object.get('patientTypeAhead');\n          if (_ember['default'].isEmpty(patientName) || _ember['default'].isEmpty(patientTypeAhead)) {\n            // force validation to fail\n            return true;\n          } else {\n            var typeAheadName = patientTypeAhead.substr(0, patientName.length);\n            if (patientName !== typeAheadName) {\n              return true;\n            }\n          }\n          // patient is properly selected; don't do any further validation\n          return false;\n        },\n        message: 'Please select a patient'\n      }\n    }\n  };\n});","define('hospitalrun/tests/utils/patient-validation.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/patient-validation.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/patient-validation.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/pouch-views', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  /* global req */\n  /* global compareStrings */\n  /* global getCompareDate */\n\n  function buildIndex(indexName, db) {\n    return db.query(indexName, {\n      limit: 0\n    })['catch'](function (err) {\n      console.log('index error: ' + JSON.stringify(err, null, 2));\n    });\n  }\n\n  function createDesignDoc(item, rev) {\n    var ddoc = {\n      _id: '_design/' + item.name,\n      version: item.version,\n      views: {}\n    };\n    if (rev) {\n      ddoc._rev = rev;\n    }\n    ddoc.views[item.name] = { map: item['function'].toString() };\n    if (item.sort) {\n      ddoc.lists = {\n        sort: item.sort\n      };\n    }\n    return ddoc;\n  }\n\n  function checkForUpdate(view, db, runningTest, testDumpFile) {\n    return db.get('_design/' + view.name).then(function (doc) {\n      if (doc.version !== view.version) {\n        return updateDesignDoc(view, db, doc._rev, runningTest, testDumpFile);\n      } else {\n        if (runningTest) {\n          // Indexes need to be built when running tests\n          return buildIndex(view.name, db);\n        } else {\n          return _ember['default'].RSVP.resolve();\n        }\n      }\n    }, function () {\n      return updateDesignDoc(view, db, null, runningTest, testDumpFile);\n    });\n  }\n\n  function generateSortFunction(sortFunction, includeCompareDate, filterFunction) {\n    var generatedFunction = 'function(head, req) {' + 'function keysEqual(keyA, keyB) {' + 'for (var i= 0; i < keyA.length; i++) {' + 'if (keyA[i] !== keyB[i]) {' + 'return false;' + '}' + '}' + 'return true;' + '}';\n    if (includeCompareDate) {\n      generatedFunction += 'function getCompareDate(dateString) {' + 'if (!dateString || dateString === \"\") {' + 'return 0;' + '}' + 'return new Date(dateString).getTime();' + '}';\n    }\n    generatedFunction += 'function compareStrings(aString, bString) {' + 'if (!aString) {' + 'aString = \"\";' + '}' + 'if (!bString) {' + 'bString = \"\";' + '}' + 'if (aString < bString) {' + 'return -1;' + '} else if (aString > bString) {' + 'return 1;' + '} else {' + 'return 0;' + '}' + '}' + 'var row,' + 'rows=[],' + 'startingPosition = 0;' + 'while(row = getRow()) {' + 'rows.push(row);' + '}';\n    if (filterFunction) {\n      generatedFunction += 'rows = rows.filter(' + filterFunction + ');';\n    }\n    generatedFunction += 'rows.sort(' + sortFunction + ');' + 'if (req.query.sortDesc) {' + 'rows = rows.reverse();' + '}' + 'if (req.query.sortStartKey) {' + 'var startKey = JSON.parse(req.query.sortStartKey);' + 'for (var i=0; i<rows.length; i++) {' + 'if (keysEqual(startKey, rows[i].key)) {' + 'startingPosition = i;' + 'break;' + '}' + '}' + '}' + 'if (req.query.sortLimit) {' + 'rows = rows.slice(startingPosition, parseInt(req.query.sortLimit)+startingPosition);' + '} else if (startingPosition > 0) {' + 'rows = rows.slice(startingPosition);' + '}' + 'send(JSON.stringify({\"rows\" : rows}));' + '}';\n    return generatedFunction;\n  }\n\n  function generateView(viewDocType, viewBody) {\n    return 'function(doc) {\\n    var doctype, uidx;\\n    if (doc._id && (uidx = doc._id.indexOf(\\'_\\')) > 0 && !doc.data.archived) {\\n      doctype = doc._id.substring(0, uidx);\\n      if (doctype === \\'' + viewDocType + '\\') {\\n        ' + viewBody + '\\n      }\\n    }\\n  }';\n  }\n\n  function updateDesignDoc(item, db, rev, runningTest, testDumpFile) {\n    var designDoc = createDesignDoc(item, rev);\n    if (runningTest) {\n      console.log('WARNING: The view ' + item.name + ' is out of date. Please update the pouch dump ' + testDumpFile + ' to the latest version of ' + item.name);\n    }\n    return db.put(designDoc).then(function () {\n      // Update index\n      return buildIndex(item.name, db);\n    }, function (err) {\n      console.log('ERR updating design doc:', JSON.stringify(err, null, 2));\n      // ignored, design doc already exists\n    });\n  }\n\n  function generateDateForView(date1) {\n    return 'var ' + date1 + ' = doc.data.' + date1 + ';\\n    if (' + date1 + ' && ' + date1 + ' !== \"\") {\\n      ' + date1 + ' = new Date(' + date1 + ');\\n      if (' + date1 + '.getTime) {\\n        ' + date1 + ' = ' + date1 + '.getTime();\\n      }\\n    }';\n  }\n\n  var patientListingKey = 'if (doc.data.friendlyId) {\\n    emit([doc.data.friendlyId, doc._id]);\\n  } else if (doc.data.externalPatientId) {\\n    emit([doc.data.externalPatientId, doc._id]);\\n  } else {\\n    emit([doc._id, doc._id]);\\n }';\n\n  var patientListingSearch = generateSortFunction((function (a, b) {\n    var sortBy = '';\n    if (req.query && req.query.sortKey) {\n      sortBy = req.query.sortKey;\n    }\n    switch (sortBy) {\n      case 'firstName':\n      case 'sex':\n      case 'lastName':\n      case 'status':\n        {\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\n        }\n      case 'dateOfBirth':\n        {\n          return getCompareDate(a.doc.data.dateOfBirth) - getCompareDate(b.doc.data.dateOfBirth);\n        }\n      default:\n        {\n          return 0; // Don't sort\n        }\n    }\n  }).toString(), true);\n\n  var designDocs = [{\n    name: 'appointments_by_date',\n    'function': generateView('appointment', generateDateForView('endDate') + '\\n    ' + generateDateForView('startDate') + '\\n    emit([startDate, endDate, doc._id]);'),\n    sort: generateSortFunction((function (a, b) {\n      function defaultStatus(value) {\n        if (!value || value === '') {\n          return 'Scheduled';\n        } else {\n          return value;\n        }\n      }\n      var sortBy = '';\n      if (req.query && req.query.sortKey) {\n        sortBy = req.query.sortKey;\n      }\n      switch (sortBy) {\n        case 'appointmentType':\n        case 'location':\n        case 'provider':\n          return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\n        case 'date':\n          {\n            var startDiff = getCompareDate(a.doc.data.startDate) - getCompareDate(b.doc.data.startDate);\n            if (startDiff === 0) {\n              return getCompareDate(a.doc.data.endDate) - getCompareDate(b.doc.data.endDate);\n            } else {\n              return startDiff;\n            }\n          }\n        case 'status':\n          {\n            var aStatus = defaultStatus(a.doc.data[sortBy]);\n            var bStatus = defaultStatus(b.doc.data[sortBy]);\n            return compareStrings(aStatus, bStatus);\n          }\n        default:\n          {\n            return 0; // Don't sort\n          }\n      }\n    }).toString(), true, (function (row) {\n      var filterBy = null;\n      var includeRow = true;\n      if (req.query && req.query.filterBy) {\n        filterBy = JSON.parse(req.query.filterBy);\n      }\n      if (!filterBy) {\n        return true;\n      }\n      for (var i = 0; i < filterBy.length; i++) {\n        var currentValue = row.doc.data[filterBy[i].name];\n        if (filterBy[i].name === 'status' && (!currentValue || currentValue === '')) {\n          currentValue = 'Scheduled';\n        }\n        if (currentValue !== filterBy[i].value) {\n          includeRow = false;\n          break;\n        }\n      }\n      return includeRow;\n    }).toString()),\n    version: 6\n  }, {\n    name: 'appointments_by_patient',\n    'function': generateView('appointment', generateDateForView('endDate') + '\\n    ' + generateDateForView('startDate') + '\\n    emit([doc.data.patient, startDate, endDate,doc._id]);'),\n    version: 4\n  }, {\n    name: 'imaging_by_status',\n    'function': generateView('imaging', generateDateForView('imagingDate') + '\\n    ' + generateDateForView('requestedDate') + '\\n    emit([doc.data.status, requestedDate, imagingDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'inventory_by_name',\n    'function': generateView('inventory', 'emit([doc.data.name, doc._id]);'),\n    sort: generateSortFunction((function (a, b) {\n      var sortBy = '';\n      if (req.query && req.query.sortKey) {\n        sortBy = req.query.sortKey;\n      }\n      switch (sortBy) {\n        case 'crossReference':\n        case 'description':\n        case 'friendlyId':\n        case 'name':\n        case 'price':\n        case 'quantity':\n        case 'inventoryType':\n          {\n            return compareStrings(a.doc.data[sortBy], b.doc.data[sortBy]);\n          }\n        default:\n          {\n            return 0; // Don't sort\n          }\n      }\n    }).toString()),\n    version: 5\n  }, {\n    name: 'inventory_by_type',\n    'function': generateView('inventory', 'emit(doc.data.inventoryType);'),\n    version: 5\n  }, {\n    name: 'inventory_purchase_by_date_received',\n    'function': generateView('invPurchase', generateDateForView('dateReceived') + '\\n    emit([dateReceived, doc._id]);'),\n    version: 5\n  }, {\n    name: 'inventory_purchase_by_expiration_date',\n    'function': generateView('invPurchase', generateDateForView('expirationDate') + '\\n    emit([expirationDate, doc._id]);'),\n    version: 5\n  }, {\n    name: 'inventory_request_by_item',\n    'function': generateView('invRequest', generateDateForView('dateCompleted') + '\\n    emit([doc.data.inventoryItem, doc.data.status, dateCompleted]);'),\n    version: 5\n  }, {\n    name: 'inventory_request_by_status',\n    'function': generateView('invRequest', generateDateForView('dateCompleted') + '\\n    emit([doc.data.status, dateCompleted, doc._id]);'),\n    version: 5\n  }, {\n    name: 'invoice_by_patient',\n    'function': generateView('invoice', 'emit(doc.data.patient);'),\n    version: 1\n  }, {\n    name: 'invoice_by_status',\n    'function': generateView('invoice', generateDateForView('billDate') + '\\n    emit([doc.data.status, billDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'lab_by_status',\n    'function': generateView('lab', generateDateForView('labDate') + '\\n    ' + generateDateForView('requestedDate') + '\\n    emit([doc.data.status, requestedDate, labDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'medication_by_status',\n    'function': generateView('medication', generateDateForView('prescriptionDate') + '\\n    ' + generateDateForView('requestedDate') + '\\n    emit([doc.data.status, requestedDate, prescriptionDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'patient_by_display_id',\n    'function': generateView('patient', patientListingKey),\n    sort: patientListingSearch,\n    version: 7\n  }, {\n    name: 'patient_by_status',\n    'function': generateView('patient', 'emit(doc.data.status);'),\n    version: 3\n  }, {\n    name: 'patient_by_admission',\n    'function': generateView('patient', 'if (doc.data.admitted === true) {\\n      ' + patientListingKey + '\\n    }'),\n    sort: patientListingSearch,\n    version: 4\n  }, {\n    name: 'photo_by_patient',\n    'function': generateView('photo', 'emit(doc.data.patient);'),\n    version: 4\n  }, {\n    name: 'procedure_by_date',\n    'function': generateView('procedure', generateDateForView('procedureDate') + '\\n    emit([procedureDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'pricing_by_category',\n    'function': generateView('pricing', 'emit([doc.data.category, doc.data.name, doc.data.pricingType, doc._id]);'),\n    version: 5\n  }, {\n    name: 'sequence_by_prefix',\n    'function': generateView('sequence', 'emit(doc.data.prefix);'),\n    version: 4\n  }, {\n    name: 'visit_by_date',\n    'function': generateView('visit', generateDateForView('endDate') + '\\n    ' + generateDateForView('startDate') + '\\n    emit([startDate, endDate, doc._id]);'),\n    version: 4\n  }, {\n    name: 'visit_by_discharge_date',\n    'function': generateView('visit', generateDateForView('endDate') + '\\n    emit([endDate, doc._id]);'),\n    version: 2\n  }, {\n    name: 'visit_by_patient',\n    'function': generateView('visit', generateDateForView('endDate') + '\\n    ' + generateDateForView('startDate') + '\\n    emit([doc.data.patient, startDate, endDate, doc.data.visitType, doc._id]);'),\n    version: 4\n  }];\n\n  exports['default'] = function (db, runningTest, testDumpFile) {\n    var viewUpdates = [];\n    designDocs.forEach(function (item) {\n      viewUpdates.push(checkForUpdate(item, db, runningTest, testDumpFile));\n    });\n    return _ember['default'].RSVP.all(viewUpdates);\n  };\n});","define('hospitalrun/tests/utils/pouch-views.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/pouch-views.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/pouch-views.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/utils/select-values', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  function selectValuesMap(value) {\n    return {\n      id: value,\n      value: value\n    };\n  }\n\n  exports['default'] = {\n    /**\n     * Map an objects into a format so that selects can use object as value for select\n     * @param {object} object the object to map\n     * @returns {object} the mapped object\n     */\n    selectObjectMap: function selectObjectMap(selectValue) {\n      return _ember['default'].Object.create({\n        selectObject: selectValue\n      });\n    },\n\n    selectValuesMap: selectValuesMap,\n\n    /** Map an array of strings to objects with id and value set to the string values\n     * so that the array can be used for em-select\n     * @param {Array} array to map.\n     * @param {boolean} includeEmpty if there should be an empty item added to the select list\n     */\n    selectValues: function selectValues(array, includeEmpty) {\n      if (_ember['default'].isArray(array)) {\n        var arrayToMap = new Array(array);\n        if (includeEmpty) {\n          arrayToMap = [''];\n          arrayToMap.addObjects(array);\n        } else {\n          arrayToMap = array;\n        }\n        return arrayToMap.map(selectValuesMap);\n      }\n    }\n  };\n});","define('hospitalrun/tests/utils/select-values.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/select-values.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/select-values.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/add-diagnosis/controller', ['exports', 'ember', 'hospitalrun/controllers/abstract-edit-controller'], function (exports, _ember, _hospitalrunControllersAbstractEditController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    visitsController: _ember['default'].inject.controller('visits'),\n    diagnosisList: _ember['default'].computed.alias('visitsController.diagnosisList'),\n\n    editController: _ember['default'].inject.controller('visits/edit'),\n    lookupListsToUpdate: [{\n      name: 'diagnosisList',\n      property: 'model.diagnosis',\n      id: 'diagnosis_list'\n    }],\n    title: 'Add Diagnosis',\n    updateButtonText: 'Add',\n    updateButtonAction: 'add',\n    showUpdateButton: true,\n\n    actions: {\n      cancel: function cancel() {\n        this.send('closeModal');\n      },\n\n      add: function add() {\n        this.updateLookupLists();\n        var newDiag = {\n          date: new Date(),\n          description: this.get('model.diagnosis')\n        };\n        this.get('editController').send('addDiagnosis', newDiag);\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/add-diagnosis/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/add-diagnosis/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/add-diagnosis/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/charge/controller', ['exports', 'hospitalrun/procedures/charge/controller', 'ember'], function (exports, _hospitalrunProceduresChargeController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunProceduresChargeController['default'].extend({\n    cancelAction: 'closeModal',\n    newPricingItem: false,\n    requestingController: _ember['default'].inject.controller('visits/edit')\n  });\n});","define('hospitalrun/tests/visits/charge/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/charge/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/charge/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller'], function (exports, _hospitalrunControllersAbstractDeleteController) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    title: 'Delete Visit',\n\n    afterDeleteAction: (function () {\n      var deleteFromPatient = this.get('model.deleteFromPatient');\n      if (deleteFromPatient) {\n        return 'visitDeleted';\n      } else {\n        return 'closeModal';\n      }\n    }).property('model.deleteFromPatient')\n  });\n});","define('hospitalrun/tests/visits/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'hospitalrun/mixins/charge-actions', 'ember', 'hospitalrun/mixins/patient-notes', 'hospitalrun/mixins/patient-submodule', 'hospitalrun/utils/select-values', 'hospitalrun/mixins/user-session', 'hospitalrun/mixins/visit-types'], function (exports, _hospitalrunControllersAbstractEditController, _hospitalrunMixinsChargeActions, _ember, _hospitalrunMixinsPatientNotes, _hospitalrunMixinsPatientSubmodule, _hospitalrunUtilsSelectValues, _hospitalrunMixinsUserSession, _hospitalrunMixinsVisitTypes) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend(_hospitalrunMixinsChargeActions['default'], _hospitalrunMixinsPatientSubmodule['default'], _hospitalrunMixinsPatientNotes['default'], _hospitalrunMixinsUserSession['default'], _hospitalrunMixinsVisitTypes['default'], {\n    visitsController: _ember['default'].inject.controller('visits'),\n\n    canAddAppointment: (function () {\n      return this.currentUserCan('add_appointment');\n    }).property(),\n\n    canAddImaging: (function () {\n      return this.currentUserCan('add_imaging');\n    }).property(),\n\n    canAddLab: (function () {\n      return this.currentUserCan('add_lab');\n    }).property(),\n\n    canAddMedication: (function () {\n      return this.currentUserCan('add_medication');\n    }).property(),\n\n    canAddDiagnosis: (function () {\n      return this.currentUserCan('add_diagnosis');\n    }).property(),\n\n    canAddProcedure: (function () {\n      return this.currentUserCan('add_procedure');\n    }).property(),\n\n    canAddVitals: (function () {\n      return this.currentUserCan('add_vitals');\n    }).property(),\n\n    canDeleteDiagnosis: (function () {\n      return this.currentUserCan('delete_diagnosis');\n    }).property(),\n\n    canDeleteImaging: (function () {\n      return this.currentUserCan('delete_imaging');\n    }).property(),\n\n    canDeleteLab: (function () {\n      return this.currentUserCan('delete_lab');\n    }).property(),\n\n    canDeleteMedication: (function () {\n      return this.currentUserCan('delete_medication');\n    }).property(),\n\n    canDeleteProcedure: (function () {\n      return this.currentUserCan('delete_procedure');\n    }).property(),\n\n    canDeleteVitals: (function () {\n      return this.currentUserCan('delete_vitals');\n    }).property(),\n\n    disabledAction: (function () {\n      this.get('model').validate()['catch'](_ember['default'].K);\n      this._super();\n    }).property('model.endDate', 'model.startDate', 'model.isValid'),\n\n    isAdmissionVisit: (function () {\n      var visitType = this.get('model.visitType');\n      var isAdmission = visitType === 'Admission';\n      var visit = this.get('model');\n      if (isAdmission) {\n        visit.set('outPatient', false);\n      } else {\n        visit.set('status');\n        visit.set('outPatient', true);\n      }\n      return isAdmission;\n    }).property('model.visitType'),\n\n    startDateChanged: (function () {\n      var isAdmissionVisit = this.get('isAdmissionVisit');\n      var startDate = this.get('model.startDate');\n      var visit = this.get('model');\n      if (!isAdmissionVisit) {\n        visit.set('endDate', startDate);\n      }\n    }).observes('isAdmissionVisit', 'model.startDate'),\n\n    cancelAction: 'returnToPatient',\n    chargePricingCategory: 'Ward',\n    chargeRoute: 'visits.charge',\n    diagnosisList: _ember['default'].computed.alias('visitsController.diagnosisList'),\n    findPatientVisits: false,\n    patientImaging: _ember['default'].computed.alias('model.imaging'),\n    patientLabs: _ember['default'].computed.alias('model.labs'),\n    patientMedications: _ember['default'].computed.alias('model.medication'),\n    pricingList: null, // This gets filled in by the route\n    pricingTypes: _ember['default'].computed.alias('visitsController.wardPricingTypes'),\n    physicianList: _ember['default'].computed.alias('visitsController.physicianList'),\n    locationList: _ember['default'].computed.alias('visitsController.locationList'),\n    visitTypesList: _ember['default'].computed.alias('visitsController.visitTypesList'),\n    lookupListsToUpdate: [{\n      name: 'diagnosisList',\n      property: 'model.primaryBillingDiagnosis',\n      id: 'diagnosis_list'\n    }, {\n      name: 'diagnosisList',\n      property: 'model.primaryDiagnosis',\n      id: 'diagnosis_list'\n    }, {\n      name: 'physicianList',\n      property: 'model.examiner',\n      id: 'physician_list'\n    }, {\n      name: 'locationList',\n      property: 'model.location',\n      id: 'visit_location_list'\n    }],\n\n    newVisit: false,\n    visitStatuses: ['Admitted', 'Discharged'].map(_hospitalrunUtilsSelectValues['default'].selectValuesMap),\n\n    updateCapability: 'add_visit',\n\n    _addChildObject: function _addChildObject(route) {\n      this.transitionToRoute(route, 'new').then((function (newRoute) {\n        newRoute.currentModel.setProperties({\n          patient: this.get('model.patient'),\n          visit: this.get('model'),\n          selectPatient: false,\n          returnToVisit: true\n        });\n      }).bind(this));\n    },\n\n    _finishAfterUpdate: function _finishAfterUpdate() {\n      this.displayAlert('Visit Saved', 'The visit record has been saved.');\n    },\n\n    haveAdditionalDiagnoses: (function () {\n      return !_ember['default'].isEmpty(this.get('model.additionalDiagnoses'));\n    }).property('model.additionalDiagnoses.[]'),\n\n    afterUpdate: function afterUpdate() {\n      var patient = this.get('model.patient');\n      var patientAdmitted = patient.get('admitted');\n      var status = this.get('model.status');\n      if (status === 'Admitted' && !patientAdmitted) {\n        patient.set('admitted', true);\n        patient.save().then(this._finishAfterUpdate.bind(this));\n      } else if (status === 'Discharged' && patientAdmitted) {\n        this.getPatientVisits(patient).then((function (visits) {\n          if (_ember['default'].isEmpty(visits.findBy('status', 'Admitted'))) {\n            patient.set('admitted', false);\n            patient.save().then(this._finishAfterUpdate.bind(this));\n          } else {\n            this._finishAfterUpdate();\n          }\n        }).bind(this));\n      } else {\n        this._finishAfterUpdate();\n      }\n    },\n\n    beforeUpdate: function beforeUpdate() {\n      if (this.get('model.isNew')) {\n        this.set('newVisit', true);\n      }\n      return new _ember['default'].RSVP.Promise((function (resolve, reject) {\n        this.updateCharges().then(resolve, reject);\n      }).bind(this));\n    },\n\n    /**\n     * Adds or removes the specified object from the specified list.\n     * @param {String} listName The name of the list to operate on.\n     * @param {Object} listObject The object to add or removed from the\n     * specified list.\n     * @param {boolean} removeObject If true remove the object from the list;\n     * otherwise add the specified object to the list.\n     */\n    updateList: function updateList(listName, listObject, removeObject) {\n      var model = this.get('model');\n      model.get(listName).then((function (list) {\n        if (removeObject) {\n          list.removeObject(listObject);\n        } else {\n          list.addObject(listObject);\n        }\n        this.send('update', true);\n        this.send('closeModal');\n      }).bind(this));\n    },\n\n    actions: {\n      addDiagnosis: function addDiagnosis(newDiagnosis) {\n        var additionalDiagnoses = this.get('model.additionalDiagnoses');\n        var visit = this.get('model');\n        if (!_ember['default'].isArray(additionalDiagnoses)) {\n          additionalDiagnoses = [];\n        }\n        additionalDiagnoses.addObject(newDiagnosis);\n        visit.set('additionalDiagnoses', additionalDiagnoses);\n        this.send('update', true);\n        this.send('closeModal');\n      },\n\n      deleteDiagnosis: function deleteDiagnosis(diagnosis) {\n        var additionalDiagnoses = this.get('model.additionalDiagnoses');\n        var visit = this.get('model');\n        additionalDiagnoses.removeObject(diagnosis);\n        visit.set('additionalDiagnoses', additionalDiagnoses);\n        this.send('update', true);\n      },\n\n      addVitals: function addVitals(newVitals) {\n        this.updateList('vitals', newVitals);\n      },\n\n      cancel: function cancel() {\n        var cancelledItem = this.get('model');\n        if (this.get('model.isNew')) {\n          cancelledItem.deleteRecord();\n        } else {\n          cancelledItem.rollbackAttributes();\n        }\n        this.send(this.get('cancelAction'));\n      },\n\n      deleteProcedure: function deleteProcedure(procedure) {\n        this.updateList('procedures', procedure, true);\n      },\n\n      deleteVitals: function deleteVitals(vitals) {\n        this.updateList('vitals', vitals, true);\n      },\n\n      editImaging: function editImaging(imaging) {\n        if (imaging.get('canEdit')) {\n          imaging.setProperties({\n            'returnToVisit': true\n          });\n        }\n        this.transitionToRoute('imaging.edit', imaging);\n      },\n\n      editLab: function editLab(lab) {\n        if (lab.get('canEdit')) {\n          lab.setProperties({\n            'returnToVisit': true\n          });\n          this.transitionToRoute('labs.edit', lab);\n        }\n      },\n\n      editMedication: function editMedication(medication) {\n        if (medication.get('canEdit')) {\n          medication.set('returnToVisit', true);\n          this.transitionToRoute('medication.edit', medication);\n        }\n      },\n\n      showAddVitals: function showAddVitals() {\n        var newVitals = this.get('store').createRecord('vital', {\n          dateRecorded: new Date()\n        });\n        this.send('openModal', 'visits.vitals.edit', newVitals);\n      },\n\n      showAddPatientNote: function showAddPatientNote(model) {\n        if (_ember['default'].isEmpty(model)) {\n          model = this.get('store').createRecord('patient-note', {\n            visit: this.get('model'),\n            createdBy: this.getUserName(),\n            patient: this.get('model').get('patient'),\n            noteType: this._computeNoteType(this.get('model'))\n          });\n        }\n        this.send('openModal', 'patients.notes', model);\n      },\n\n      newAppointment: function newAppointment() {\n        this._addChildObject('appointments.edit');\n      },\n\n      newImaging: function newImaging() {\n        this._addChildObject('imaging.edit');\n      },\n\n      newLab: function newLab() {\n        this._addChildObject('labs.edit');\n      },\n\n      newMedication: function newMedication() {\n        this._addChildObject('medication.edit');\n      },\n\n      showAddDiagnosis: function showAddDiagnosis() {\n        var newDiagnosis = this.get('store').createRecord('add-diagnosis');\n        this.send('openModal', 'visits.add-diagnosis', newDiagnosis);\n      },\n\n      showAddProcedure: function showAddProcedure() {\n        this._addChildObject('procedures.edit');\n      },\n\n      showDeleteImaging: function showDeleteImaging(imaging) {\n        this.send('openModal', 'imaging.delete', imaging);\n      },\n\n      showDeleteLab: function showDeleteLab(lab) {\n        this.send('openModal', 'labs.delete', lab);\n      },\n\n      showDeleteMedication: function showDeleteMedication(medication) {\n        this.send('openModal', 'medication.delete', medication);\n      },\n\n      showDeleteProcedure: function showDeleteProcedure(procedure) {\n        this.send('openModal', 'visits.procedures.delete', procedure);\n      },\n\n      showDeleteVitals: function showDeleteVitals(vitals) {\n        this.send('openModal', 'visits.vitals.delete', vitals);\n      },\n\n      showEditProcedure: function showEditProcedure(procedure) {\n        if (_ember['default'].isEmpty(procedure.get('visit'))) {\n          procedure.set('visit', this.get('model'));\n        }\n        procedure.set('returnToVisit', true);\n        procedure.set('returnToPatient', false);\n        this.transitionToRoute('procedures.edit', procedure);\n      },\n\n      showEditVitals: function showEditVitals(vitals) {\n        this.send('openModal', 'visits.vitals.edit', vitals);\n      },\n\n      showDeletePatientNote: function showDeletePatientNote(note) {\n        this.send('openModal', 'dialog', _ember['default'].Object.create({\n          confirmAction: 'deletePatientNote',\n          title: 'Delete Note',\n          message: 'Are you sure you want to delete this note?',\n          noteToDelete: note,\n          updateButtonAction: 'confirm',\n          updateButtonText: this.get('i18n').t('buttons.ok')\n        }));\n      },\n\n      deletePatientNote: function deletePatientNote(model) {\n        var note = model.get('noteToDelete');\n        var patientNotes = this.get('model.patientNotes');\n        patientNotes.removeObject(note);\n        this.send('update', true);\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/edit/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/edit/route', ['exports', 'hospitalrun/routes/abstract-edit-route', 'hospitalrun/mixins/charge-route', 'ember'], function (exports, _hospitalrunRoutesAbstractEditRoute, _hospitalrunMixinsChargeRoute, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractEditRoute['default'].extend(_hospitalrunMixinsChargeRoute['default'], {\n    editTitle: 'Edit Visit',\n    modelName: 'visit',\n    newTitle: 'New Visit',\n    pricingCategory: 'Ward',\n\n    getNewData: function getNewData() {\n      return _ember['default'].RSVP.resolve({\n        visitType: 'Admission',\n        startDate: new Date(),\n        status: 'Admitted'\n      });\n    },\n\n    actions: {\n      updateNote: function updateNote() {\n        this.controller.send('update', true);\n      },\n      deletePatientNote: function deletePatientNote(model) {\n        this.controller.send('deletePatientNote', model);\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/edit/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/edit/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/edit/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/procedures/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember'], function (exports, _hospitalrunControllersAbstractDeleteController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    afterDeleteAction: 'notifyProcedureDelete',\n    editController: _ember['default'].inject.controller('visits/edit'),\n    title: 'Delete Procedure',\n\n    actions: {\n      notifyProcedureDelete: function notifyProcedureDelete() {\n        this.send('closeModal');\n        this.get('editController').send('deleteProcedure', this.get('model'));\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/procedures/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/procedures/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/procedures/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/route', ['exports', 'hospitalrun/routes/abstract-module-route'], function (exports, _hospitalrunRoutesAbstractModuleRoute) {\n  'use strict';\n\n  exports['default'] = _hospitalrunRoutesAbstractModuleRoute['default'].extend({\n    addCapability: 'add_visit',\n    additionalModels: [{\n      name: 'anesthesiaTypes',\n      findArgs: ['lookup', 'anesthesia_types']\n    }, {\n      name: 'anesthesiologistList',\n      findArgs: ['lookup', 'anesthesiologists']\n    }, {\n      name: 'diagnosisList',\n      findArgs: ['lookup', 'diagnosis_list']\n    }, {\n      name: 'cptCodeList',\n      findArgs: ['lookup', 'cpt_code_list']\n    }, {\n      name: 'physicianList',\n      findArgs: ['lookup', 'physician_list']\n    }, {\n      name: 'locationList',\n      findArgs: ['lookup', 'visit_location_list']\n    }, {\n      name: 'procedureList',\n      findArgs: ['lookup', 'procedure_list']\n    }, {\n      name: 'procedureLocations',\n      findArgs: ['lookup', 'procedure_locations']\n    }, {\n      name: 'procedurePricingTypes',\n      findArgs: ['lookup', 'procedure_pricing_types']\n    }, {\n      name: 'visitTypesList',\n      findArgs: ['lookup', 'visit_types']\n    }, {\n      name: 'wardPricingTypes',\n      findArgs: ['lookup', 'ward_pricing_types']\n    }],\n    moduleName: 'visits',\n    newButtonAction: null, // No new button\n    sectionTitle: 'Visits'\n\n  });\n});","define('hospitalrun/tests/visits/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/route.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/vitals/delete/controller', ['exports', 'hospitalrun/controllers/abstract-delete-controller', 'ember'], function (exports, _hospitalrunControllersAbstractDeleteController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractDeleteController['default'].extend({\n    afterDeleteAction: 'notifyVitalsDelete',\n    editController: _ember['default'].inject.controller('visits/edit'),\n    title: 'Delete Vitals',\n\n    actions: {\n      notifyVitalsDelete: function notifyVitalsDelete() {\n        this.send('closeModal');\n        this.get('editController').send('deleteVitals', this.get('model'));\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/vitals/delete/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/vitals/delete/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/vitals/delete/controller.js should pass ESLint.\\n');\n  });\n});","define('hospitalrun/tests/visits/vitals/edit/controller', ['exports', 'hospitalrun/controllers/abstract-edit-controller', 'ember'], function (exports, _hospitalrunControllersAbstractEditController, _ember) {\n  'use strict';\n\n  exports['default'] = _hospitalrunControllersAbstractEditController['default'].extend({\n    cancelAction: 'closeModal',\n\n    editController: _ember['default'].inject.controller('visits/edit'),\n\n    newVitals: false,\n\n    temperatureLabel: 'Temperature (\\xb0C)',\n\n    title: (function () {\n      var isNew = this.get('model.isNew');\n      if (isNew) {\n        return 'Add Vitals';\n      }\n      return 'Edit Vitals';\n    }).property('model.isNew'),\n\n    updateCapability: 'add_vitals',\n\n    beforeUpdate: function beforeUpdate() {\n      if (this.get('model.isNew')) {\n        this.set('newVitals', true);\n      }\n      return _ember['default'].RSVP.Promise.resolve();\n    },\n\n    afterUpdate: function afterUpdate(vitals) {\n      if (this.get('newVitals')) {\n        this.get('editController').send('addVitals', vitals);\n      } else {\n        this.send('closeModal');\n      }\n    }\n  });\n});","define('hospitalrun/tests/visits/vitals/edit/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - visits/vitals/edit/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'visits/vitals/edit/controller.js should pass ESLint.\\n');\n  });\n});","/* jshint ignore:start */\n\nrequire('hospitalrun/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappingsrjnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxnlKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtttppKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACplBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACblCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClhNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACndA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbloojprFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljnOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzlGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjxkjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACx5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvhhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChtjrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdlWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}